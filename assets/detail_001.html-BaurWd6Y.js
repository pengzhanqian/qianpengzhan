import{_ as l,c,b as s,d as o,a as t,w as p,r as i,o as u,e}from"./app-GRT9i7xS.js";const d={},r={class:"table-of-contents"};function k(m,n){const a=i("router-link");return u(),c("div",null,[n[7]||(n[7]=s("h1",{id:"java代码细节-详述main方法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#java代码细节-详述main方法"},[s("span",null,"Java代码细节 - 详述Main方法")])],-1)),s("nav",r,[s("ul",null,[s("li",null,[t(a,{to:"#【1】-方法定义与语法结构"},{default:p(()=>n[0]||(n[0]=[e("【1】 方法定义与语法结构")])),_:1,__:[0]})]),s("li",null,[t(a,{to:"#【2】-参数传递机制"},{default:p(()=>n[1]||(n[1]=[e("【2】 参数传递机制")])),_:1,__:[1]})]),s("li",null,[t(a,{to:"#【3】-方法重载与入口识别"},{default:p(()=>n[2]||(n[2]=[e("【3】 方法重载与入口识别")])),_:1,__:[2]})]),s("li",null,[t(a,{to:"#【4】-常见语法错误与解决方案"},{default:p(()=>n[3]||(n[3]=[e("【4】 常见语法错误与解决方案")])),_:1,__:[3]})]),s("li",null,[t(a,{to:"#【5】-jdk版本特性差异"},{default:p(()=>n[4]||(n[4]=[e("【5】 JDK版本特性差异")])),_:1,__:[4]})]),s("li",null,[t(a,{to:"#【6】-特殊用法与最佳实践"},{default:p(()=>n[5]||(n[5]=[e("【6】 特殊用法与最佳实践")])),_:1,__:[5]})]),s("li",null,[t(a,{to:"#【7】-底层执行原理"},{default:p(()=>n[6]||(n[6]=[e("【7】 底层执行原理")])),_:1,__:[6]})])])]),n[8]||(n[8]=o(`<blockquote><p>说在前面的话，本文为日常积累的一些<code>Java</code>相关代码细节积累。</p></blockquote><h2 id="【1】-方法定义与语法结构" tabindex="-1"><a class="header-anchor" href="#【1】-方法定义与语法结构"><span>【1】 方法定义与语法结构</span></a></h2><p>Java程序的入口点必须遵循严格的方法签名规范：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 程序逻辑代码</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>public</strong>：访问修饰符，确保JVM可以从外部调用此方法</li><li><strong>static</strong>：静态修饰符，允许JVM无需创建类实例即可直接调用</li><li><strong>void</strong>：返回值类型，表示该方法无返回值</li><li><strong>main</strong>：方法名，JVM规定的唯一入口方法名（大小写敏感）</li><li><strong>String[] args</strong>：参数列表，用于接收命令行输入的参数</li></ul><h2 id="【2】-参数传递机制" tabindex="-1"><a class="header-anchor" href="#【2】-参数传递机制"><span>【2】 参数传递机制</span></a></h2><blockquote><p><code>args</code>参数是字符串数组，用于接收命令行参数：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandLineExample</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;参数数量: &quot;</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;参数&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>运行方式</strong>：<code>java CommandLineExample 参数1 参数2 参数3</code></p></blockquote><h2 id="【3】-方法重载与入口识别" tabindex="-1"><a class="header-anchor" href="#【3】-方法重载与入口识别"><span>【3】 方法重载与入口识别</span></a></h2><blockquote><p>可以重载main方法，但JVM只会识别标准签名的main方法作为入口：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainOverload</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// JVM唯一识别的入口方法</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;程序入口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">main</span><span class="token punctuation">(</span><span class="token string">&quot;Hello from overloaded method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 重载的main方法（非入口点）</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【4】-常见语法错误与解决方案" tabindex="-1"><a class="header-anchor" href="#【4】-常见语法错误与解决方案"><span>【4】 常见语法错误与解决方案</span></a></h2><table><thead><tr><th>错误类型</th><th>错误示例</th><th>正确写法</th></tr></thead><tbody><tr><td>缺少static</td><td><code>public void main(String[] args)</code></td><td><code>public static void main(String[] args)</code></td></tr><tr><td>方法名错误</td><td><code>public static void Main(String[] args)</code></td><td><code>public static void main(String[] args)</code></td></tr><tr><td>参数类型错误</td><td><code>public static void main(int[] args)</code></td><td><code>public static void main(String[] args)</code></td></tr><tr><td>返回类型错误</td><td><code>public static int main(String[] args)</code></td><td><code>public static void main(String[] args)</code></td></tr></tbody></table><h2 id="【5】-jdk版本特性差异" tabindex="-1"><a class="header-anchor" href="#【5】-jdk版本特性差异"><span>【5】 JDK版本特性差异</span></a></h2><ul><li><strong>Java 1.0-8</strong>：仅支持<code>String[] args</code>形式</li><li><strong>Java 9+</strong>：支持使用可变参数语法<code>String... args</code><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 功能与String[] args完全相同</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="【6】-特殊用法与最佳实践" tabindex="-1"><a class="header-anchor" href="#【6】-特殊用法与最佳实践"><span>【6】 特殊用法与最佳实践</span></a></h2><ol><li><p><strong>参数验证</strong>：在方法开头检查必要参数</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;用法: java Program &lt;参数1&gt; &lt;参数2&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 非0退出码表示异常终止</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 业务逻辑</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>委托模式</strong>：保持main方法简洁，将业务逻辑委托给其他类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">BusinessLogic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">BusinessLogic</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 实际业务逻辑</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>单元测试支持</strong>：设计可测试的main方法</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 可独立测试的核心方法</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="【7】-底层执行原理" tabindex="-1"><a class="header-anchor" href="#【7】-底层执行原理"><span>【7】 底层执行原理</span></a></h2><blockquote><p>当使用<code>java ClassName</code>命令启动程序时：</p><ol><li>JVM加载指定的类</li><li>检查类中是否存在符合规范的main方法</li><li>若存在，调用main方法并将命令行参数传递给args数组</li><li>方法执行完成后，JVM正常退出（状态码0）</li><li>若方法抛出异常，JVM将异常信息打印到标准错误流并非0状态码退出</li></ol></blockquote>`,20))])}const b=l(d,[["render",k]]),g=JSON.parse('{"path":"/md/note/java/detail/detail_001.html","title":"Java代码细节 - 详述Main方法","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1753775347000,"contributors":[{"name":"钱鹏展","username":"","email":"873373549@qq.com","commits":1}],"changelog":[{"hash":"521e859fa1a0fb6f2d390c68ad85252b043dd085","time":1753775347000,"email":"873373549@qq.com","author":"钱鹏展","message":"提奥"}]},"filePathRelative":"md/note/java/detail/detail_001.md"}');export{b as comp,g as data};
