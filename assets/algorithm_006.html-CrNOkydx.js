import{_ as i,c as u,b as s,d as l,a,w as t,r as o,o as r,e}from"./app-GRT9i7xS.js";const k={},d={class:"table-of-contents"};function m(v,n){const p=o("router-link"),c=o("Mermaid");return r(),u("div",null,[n[19]||(n[19]=s("h1",{id:"算法-插入排序",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#算法-插入排序"},[s("span",null,"算法 - 插入排序")])],-1)),s("nav",d,[s("ul",null,[s("li",null,[a(p,{to:"#【1】定义"},{default:t(()=>n[0]||(n[0]=[e("【1】定义")])),_:1,__:[0]})]),s("li",null,[a(p,{to:"#【2】算法流程图"},{default:t(()=>n[1]||(n[1]=[e("【2】算法流程图")])),_:1,__:[1]})]),s("li",null,[a(p,{to:"#【3】算法步骤说明"},{default:t(()=>n[2]||(n[2]=[e("【3】算法步骤说明")])),_:1,__:[2]})]),s("li",null,[a(p,{to:"#【4】复杂度计算"},{default:t(()=>n[3]||(n[3]=[e("【4】复杂度计算")])),_:1,__:[3]}),s("ul",null,[s("li",null,[a(p,{to:"#【4-1】最好情况-已有序数组"},{default:t(()=>n[4]||(n[4]=[e("【4.1】最好情况（已有序数组）")])),_:1,__:[4]})]),s("li",null,[a(p,{to:"#【4-2】最坏情况-完全逆序数组"},{default:t(()=>n[5]||(n[5]=[e("【4.2】最坏情况（完全逆序数组）")])),_:1,__:[5]})]),s("li",null,[a(p,{to:"#【4-3】平均情况-随机排列数组"},{default:t(()=>n[6]||(n[6]=[e("【4.3】平均情况（随机排列数组）")])),_:1,__:[6]})]),s("li",null,[a(p,{to:"#【4-4】空间复杂度"},{default:t(()=>n[7]||(n[7]=[e("【4.4】空间复杂度")])),_:1,__:[7]})]),s("li",null,[a(p,{to:"#【4-5】关键结论‌"},{default:t(()=>n[8]||(n[8]=[e("【4.5】关键结论‌")])),_:1,__:[8]})])])]),s("li",null,[a(p,{to:"#【5】核心思想分解"},{default:t(()=>n[9]||(n[9]=[e("【5】核心思想分解")])),_:1,__:[9]}),s("ul",null,[s("li",null,[a(p,{to:"#【5-1】分治策略-有序区-vs-无序区"},{default:t(()=>n[10]||(n[10]=[e("【5.1】分治策略：有序区 vs. 无序区")])),_:1,__:[10]})]),s("li",null,[a(p,{to:"#【5-2】核心操作-比较与插入"},{default:t(()=>n[11]||(n[11]=[e("【5.2】核心操作：比较与插入")])),_:1,__:[11]})]),s("li",null,[a(p,{to:"#【5-3】直观类比"},{default:t(()=>n[12]||(n[12]=[e("【5.3】直观类比")])),_:1,__:[12]})])])]),s("li",null,[a(p,{to:"#【6】算法特性"},{default:t(()=>n[13]||(n[13]=[e("【6】算法特性")])),_:1,__:[13]})]),s("li",null,[a(p,{to:"#【7】适用场景"},{default:t(()=>n[14]||(n[14]=[e("【7】适用场景")])),_:1,__:[14]})]),s("li",null,[a(p,{to:"#【8】代码示例"},{default:t(()=>n[15]||(n[15]=[e("【8】代码示例")])),_:1,__:[15]})]),s("li",null,[a(p,{to:"#【9】对数器"},{default:t(()=>n[16]||(n[16]=[e("【9】对数器")])),_:1,__:[16]})]),s("li",null,[a(p,{to:"#【10】总结"},{default:t(()=>n[17]||(n[17]=[e("【10】总结")])),_:1,__:[17]})]),s("li",null,[a(p,{to:"#【11】参考资料"},{default:t(()=>n[18]||(n[18]=[e("【11】参考资料")])),_:1,__:[18]})])])]),n[20]||(n[20]=l('<blockquote><p>说在前面的话，本文为个人学习<a href="https://www.bilibili.com/video/BV1Ef4y1T7Qi/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">B站免费的左程云算法结构基础课</a>后进行总结的文章，主要是以<code>Java</code>来运行算法.</p></blockquote><h2 id="【1】定义" tabindex="-1"><a class="header-anchor" href="#【1】定义"><span>【1】定义</span></a></h2><blockquote><ul><li><b>插入排序 （Insertion Sort）</b></li></ul><div class="hint-container info"><p class="hint-container-title">定义</p><p><b>插入排序 （Insertion Sort）</b>‌ 是一种简单的排序算法，通过构建有序序列，对未排序数据从后向前扫描，将每个元素插入到已排序序列中的适当位置。</p></div><ul><li><b>核心思想</b></li></ul><div class="hint-container info"><p class="hint-container-title">核心思想</p><p><b>插入排序 （Insertion Sort）</b>的核心思想是 ‌<b>“分治有序”，通过 逐步构建有序子序列</b> 的方式完成排序。</p></div></blockquote><h2 id="【2】算法流程图" tabindex="-1"><a class="header-anchor" href="#【2】算法流程图"><span>【2】算法流程图</span></a></h2><blockquote><p>以下是<b>插入排序 （Insertion Sort）</b>‌ 算法的 <code>Mermaid</code> 流程图代码，可直接在支持 Mermaid 的编辑器（如 <code>Markdown</code>、<code>Obsidian </code>等）中渲染：</p></blockquote>',5)),a(c,{code:"eJxLy8kvT85ILCpRCHHhUgACx+inexqeLu+OVdDVtVNwin7aMRfIe9ozzUoh09YwFqzGCSznXJ2pYKOQZ18LFnMGidU8m7G+RsElWulp/7Sn7buyUyttE4uKojNjdRSybDN1DZUg+l3A+l2jlbIU7GwNnuyYAlKUFWsHVG8PVeKKMM4tWgksr20YCzYtKzYmTyFLVxeq0g1iGJKupxOW1Si4I+kCmgvUkqmtDdXiDnE/krvBWjyin++e/Gzu/FguLgCIE1lB"}),n[21]||(n[21]=l(`<blockquote><p><strong>流程图说明</strong>‌：</p><ol><li>‌<strong>初始化</strong>‌：从第二个元素开始遍历（i=1）</li><li>‌<strong>循环条件</strong>‌：检查是否处理完所有元素</li><li>‌<strong>插入操作</strong>‌：将当前元素(key)与有序区元素从后向前比较，移动比key大的元素</li><li>‌<strong>终止条件</strong>‌：当找到合适位置或到达有序区起点时插入key</li><li>‌<strong>循环递增</strong>‌：i++处理下一个元素</li></ol><p>该流程图完整展示了插入排序的 ‌<strong>比较-移动-插入</strong>‌ 核心过程</p></blockquote><h2 id="【3】算法步骤说明" tabindex="-1"><a class="header-anchor" href="#【3】算法步骤说明"><span>【3】算法步骤说明</span></a></h2><blockquote><p>以下是<b>插入排序 （Insertion Sort）</b>‌ 的详细算法步骤说明</p><ul><li><p><strong>初始化有序区</strong></p><ul><li>‌将数组的第一个元素视为已排序的子序列（长度为1），其余部分为待排序区</li></ul></li><li><p><strong>遍历未排序元素</strong></p><ul><li>从第二个元素开始（索引 <code>i=1</code>），依次将每个元素作为待插入的 <code>key</code>。</li><li>‌<strong>循环条件</strong>‌：直到处理完所有未排序元素（<code>i &lt; n</code>，<code>n</code> 为数组长度）。‌</li></ul></li><li><p><strong>插入操作</strong></p><ul><li>对当前 <code>key</code> 执行以下步骤： <ol><li>‌从后向前比较：从有序区的最后一个元素（索引 <code>j=i-1</code>）开始向前遍历： <ul><li>若 <code>arr[j] &gt; key</code>，则将 <code>arr[j]</code> 后移一位。</li><li>否则终止比较（找到 <code>key</code> 的正确插入位置）。</li></ul></li><li>‌<b>插入 <code>key</code></b>：将 <code>key</code> 放入 <code>arr[j+1]</code> 的位置</li></ol></li></ul></li><li><p>‌<strong>动态扩展有序区</strong>‌</p><ul><li>每轮插入后，有序区长度 <code>+1</code>，未排序区 <code>-1</code>。</li><li>重复步骤2-3，直到所有元素有序。</li></ul></li></ul></blockquote><h2 id="【4】复杂度计算" tabindex="-1"><a class="header-anchor" href="#【4】复杂度计算"><span>【4】复杂度计算</span></a></h2><blockquote><p><b>插入排序 （Insertion Sort）</b>‌的时间复杂度计算过程如下，分不同情况讨论：</p></blockquote><h3 id="【4-1】最好情况-已有序数组" tabindex="-1"><a class="header-anchor" href="#【4-1】最好情况-已有序数组"><span>【4.1】最好情况（已有序数组）</span></a></h3><blockquote><ul><li>‌<strong>操作次数</strong>‌：只需遍历数组一次，每次比较仅需1次（无需移动元素）。</li><li>‌<strong>公式</strong>‌：比较次数 = n-1 次。</li><li>‌<strong>结果</strong>‌：时间复杂度为 ‌<b><code>O(n)</code></b>。</li></ul><hr></blockquote><h3 id="【4-2】最坏情况-完全逆序数组" tabindex="-1"><a class="header-anchor" href="#【4-2】最坏情况-完全逆序数组"><span>【4.2】最坏情况（完全逆序数组）</span></a></h3><blockquote><ul><li>‌<strong>操作次数</strong>‌：每个元素需比较并移动所有已排序元素。</li><li>‌<strong>公式</strong>‌：比较次数 = <code>1 + 2 + ... + (n-1) = n(n-1)/2</code> 次。</li><li>‌推导‌： <ul><li>等差数列求和公式：<code>S = (首项 + 末项) × 项数 / 2 = (1 + n-1) × (n-1) / 2</code>。</li><li>最高次项为 <code>n²/2</code>，忽略低阶项后为 ‌<b><code>O(n²)</code></b>。</li></ul></li></ul><hr></blockquote><h3 id="【4-3】平均情况-随机排列数组" tabindex="-1"><a class="header-anchor" href="#【4-3】平均情况-随机排列数组"><span>【4.3】平均情况（随机排列数组）</span></a></h3><blockquote><ul><li>‌<strong>操作次数</strong>‌：每个元素平均需比较约有序区的一半长度（n/2 次）。</li><li>‌<strong>公式</strong>‌：总比较次数 ≈ n × n/2 = n²/2 次。</li><li>‌<strong>结果</strong>‌：时间复杂度仍为 ‌<b><code>O(n²)</code></b>。</li></ul><hr></blockquote><h3 id="【4-4】空间复杂度" tabindex="-1"><a class="header-anchor" href="#【4-4】空间复杂度"><span>【4.4】空间复杂度</span></a></h3><blockquote><ul><li>‌<strong>额外空间</strong>‌：仅需常数级临时变量（如 <code>key</code>、<code>j</code>）。</li><li>‌<strong>结果</strong>‌：空间复杂度为 ‌<b><code>O(1)</code></b>（原地排序）。</li></ul><hr></blockquote><h3 id="【4-5】关键结论‌" tabindex="-1"><a class="header-anchor" href="#【4-5】关键结论‌"><span>【4.5】<strong>关键结论</strong>‌</span></a></h3><blockquote><ul><li>‌<strong>稳定性</strong>‌：插入排序是稳定的，相同元素相对位置不变。</li><li>‌<strong>适用场景</strong>‌：小规模数据或基本有序数据效率较高。</li></ul></blockquote><h2 id="【5】核心思想分解" tabindex="-1"><a class="header-anchor" href="#【5】核心思想分解"><span>【5】核心思想分解</span></a></h2><h3 id="【5-1】分治策略-有序区-vs-无序区" tabindex="-1"><a class="header-anchor" href="#【5-1】分治策略-有序区-vs-无序区"><span>【5.1】分治策略：有序区 vs. 无序区</span></a></h3><blockquote><ul><li>‌<strong>有序区</strong>‌：初始时，数组的第一个元素被视为已排序的子序列（长度为1）。</li><li>‌<strong>无序区</strong>‌：剩余部分为待排序元素，逐步插入到有序区中。</li><li>‌<strong>动态扩展</strong>‌：每轮将一个无序区的元素插入到有序区的正确位置，有序区长度递增。</li></ul><hr></blockquote><h3 id="【5-2】核心操作-比较与插入" tabindex="-1"><a class="header-anchor" href="#【5-2】核心操作-比较与插入"><span>【5.2】核心操作：比较与插入</span></a></h3><blockquote><p>对于当前无序区的元素（<code>key</code>），执行以下步骤：</p><ol><li>‌<strong>从后向前比较</strong>‌：从有序区的最后一个元素开始，向前逐个比较。</li><li>‌<strong>移动元素</strong>‌：若 <code>key</code> 小于当前比较元素，则将比较元素后移一位（腾出插入位置）。</li><li>‌<strong>插入终止</strong>‌：当找到 <code>key</code> 应插入的位置（或到达有序区起点），将 <code>key</code> 放入该位置。</li></ol><p>‌<strong>关键点</strong>‌：通过 ‌<b>“先移动再插入”</b> 的方式逐步扩展有序区。</p><hr></blockquote><h3 id="【5-3】直观类比" tabindex="-1"><a class="header-anchor" href="#【5-3】直观类比"><span>【5.3】直观类比</span></a></h3><blockquote><p>想象整理一副扑克牌：</p><ol><li>‌<strong>初始状态</strong>‌：左手持牌（已排序），右手拿新牌（待插入）。</li><li>‌<strong>插入过程</strong>‌：从左到右比较新牌，找到合适位置插入，确保左手牌始终有序。</li></ol></blockquote><h2 id="【6】算法特性" tabindex="-1"><a class="header-anchor" href="#【6】算法特性"><span>【6】算法特性</span></a></h2><blockquote><ul><li><p><strong>优点</strong>‌：</p><ul><li><p>简单直观，适合小规模数据或部分有序数组。</p></li><li><p>原地排序（空间复杂度 <code>O(1)</code>）。</p></li><li><p>稳定排序（相等元素不交换）。</p></li></ul></li><li><p>‌<strong>缺点</strong>‌：</p></li><li><p>最坏时间复杂度 <code>O(n²)</code>（逆序数组），但实际应用中若数据接近有序，性能接近 <code>O(n)</code>。</p></li></ul></blockquote><h2 id="【7】适用场景" tabindex="-1"><a class="header-anchor" href="#【7】适用场景"><span>【7】适用场景</span></a></h2><blockquote><ul><li><strong>小规模数据</strong>‌（如 <code>n &lt; 100</code>）。</li><li><strong>部分有序数据</strong>‌（如日志时间戳排序、数据流中的实时排序）。</li><li><strong>作为更复杂算法（如快速排序）的子过程</strong>‌，处理小分段数据。</li></ul></blockquote><h2 id="【8】代码示例" tabindex="-1"><a class="header-anchor" href="#【8】代码示例"><span>【8】代码示例</span></a></h2><blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"> <span class="token comment">// 标准插入排序实现</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 遍历所有元素</span></span>
<span class="line">        <span class="token comment">// 0 ~ 0 有序的</span></span>
<span class="line">        <span class="token comment">// 0 ~ i 想做到有序</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 0 ~ i 做到有序</span></span>
<span class="line"><span class="token comment">//            int key = arr[i];</span></span>
<span class="line"><span class="token comment">//            // 从最后开始比较</span></span>
<span class="line"><span class="token comment">//            int j = i - 1;</span></span>
<span class="line"><span class="token comment">//            while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) {</span></span>
<span class="line"><span class="token comment">//                arr[j + 1] = arr[j];</span></span>
<span class="line"><span class="token comment">//                j--;</span></span>
<span class="line"><span class="token comment">//            }</span></span>
<span class="line"><span class="token comment">//            arr[j + 1] = key;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">     * 异或交换原理</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     * ‌第一次异或‌：arr[i] ^ arr[j]</span>
<span class="line">     * 将两数差异位保存到 arr[i]（此时 arr[i] 变为临时值）</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     * ‌第二次异或‌：arr[i] ^ arr[j]</span>
<span class="line">     * 用临时值与 arr[j] 异或，得到原始 arr[i] 并存入 arr[j]</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     * ‌第三次异或‌：arr[i] ^ arr[j]</span>
<span class="line">     * 用临时值与新 arr[j] 异或，得到原始 arr[j] 并存入 arr[i]</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>arr = [3,5], i=0, j=1：</span>
<span class="line">     * arr[0] = 3 ^ 5 = 6  // [6,5]</span>
<span class="line">     * arr[1] = 6 ^ 5 = 3  // [6,3]</span>
<span class="line">     * arr[0] = 6 ^ 3 = 5  // [5,3] 完成交换</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">arr</span></span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">i</span></span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">j</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="【9】对数器" tabindex="-1"><a class="header-anchor" href="#【9】对数器"><span>【9】对数器</span></a></h2><blockquote><p>以下是插入排序的对数器（验证器）Java代码示例，包含随机数组生成、排序验证和性能测试功能：</p></blockquote><blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>business</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 插入排序</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/8/15 16:39</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertionSort</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 标准插入排序实现</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 遍历所有元素</span></span>
<span class="line">        <span class="token comment">// 0 ~ 0 有序的</span></span>
<span class="line">        <span class="token comment">// 0 ~ i 想做到有序</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 0 ~ i 做到有序</span></span>
<span class="line"><span class="token comment">//            int key = arr[i];</span></span>
<span class="line"><span class="token comment">//            // 从最后开始比较</span></span>
<span class="line"><span class="token comment">//            int j = i - 1;</span></span>
<span class="line"><span class="token comment">//            while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) {</span></span>
<span class="line"><span class="token comment">//                arr[j + 1] = arr[j];</span></span>
<span class="line"><span class="token comment">//                j--;</span></span>
<span class="line"><span class="token comment">//            }</span></span>
<span class="line"><span class="token comment">//            arr[j + 1] = key;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 异或交换原理</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     * ‌第一次异或‌：arr[i] ^ arr[j]</span>
<span class="line">     * 将两数差异位保存到 arr[i]（此时 arr[i] 变为临时值）</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     * ‌第二次异或‌：arr[i] ^ arr[j]</span>
<span class="line">     * 用临时值与 arr[j] 异或，得到原始 arr[i] 并存入 arr[j]</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     * ‌第三次异或‌：arr[i] ^ arr[j]</span>
<span class="line">     * 用临时值与新 arr[j] 异或，得到原始 arr[j] 并存入 arr[i]</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>arr = [3,5], i=0, j=1：</span>
<span class="line">     * arr[0] = 3 ^ 5 = 6  // [6,5]</span>
<span class="line">     * arr[1] = 6 ^ 5 = 3  // [6,3]</span>
<span class="line">     * arr[0] = 6 ^ 3 = 5  // [5,3] 完成交换</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">arr</span></span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">i</span></span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">j</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 对数器：生成随机测试数组</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateRandomArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>maxSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> arr<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 验证排序是否正确</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSorted</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 对数器主测试方法</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> testTimes <span class="token operator">=</span> <span class="token number">50000</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> maxSize <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">boolean</span> succeed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testTimes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token function">generateRandomArray</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">insertionSort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 测试排序</span></span>
<span class="line">            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 对照排序</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                succeed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试失败：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;原始数组：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;对照数组：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>succeed <span class="token operator">?</span> <span class="token string">&quot;所有测试通过！&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;存在错误案例！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码功能说明：</p><ol><li>核心方法<code>insertionSort</code>实现标准插入排序算法</li><li><code>generateRandomArray</code>生成随机长度和随机值的测试数组</li><li><code>isSorted</code>方法验证数组是否有序</li><li>主方法通过50000次随机测试验证排序正确性</li><li>使用<code>Arrays.sort</code>作为对照标准验证自定义排序结果</li></ol><p>特点：</p><ul><li>自动化批量测试验证排序正确性</li><li>支持自定义测试规模和数值范围</li><li>错误案例自动打印便于调试</li><li>可作为其他排序算法的验证模板</li></ul></blockquote><h2 id="【10】总结" tabindex="-1"><a class="header-anchor" href="#【10】总结"><span>【10】总结</span></a></h2><blockquote><p><b>插入排序 （Insertion Sort）</b>的核心思想是 ‌<b>“逐步构建有序序列”，通过分治有序区与无序区，并 ‌动态插入</b> 完成排序。虽然效率不如高级算法（如快速排序、归并排序），但其简单性和稳定性使其在特定场景下仍具实用价值。</p></blockquote><h2 id="【11】参考资料" tabindex="-1"><a class="header-anchor" href="#【11】参考资料"><span>【11】参考资料</span></a></h2><ul><li><a href="https://www.bilibili.com/video/BV1Ef4y1T7Qi/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">B站免费的左程云算法结构基础课</a></li></ul>`,35))])}const g=i(k,[["render",m]]),y=JSON.parse('{"path":"/md/algorithm/algorithm_006.html","title":"算法 - 插入排序","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1755594400000,"contributors":[{"name":"钱鹏展","username":"","email":"873373549@qq.com","commits":5}],"changelog":[{"hash":"38504761c9b7e36cf814604bf74d0f65e5f4b2c2","time":1755594400000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"},{"hash":"6a8a03de4af01c5a26d2df6b7fa90ed5ea1389c0","time":1755486593000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"},{"hash":"413aef7d5e738c202d096a5f06143b6cc9c51a0d","time":1755486380000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"},{"hash":"8047cc4b13873a7f186d76e289f1fab4750d39ef","time":1755248680000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"},{"hash":"217cb3b10491c50e6c567ed02484095c99d3359c","time":1755239288000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"}]},"filePathRelative":"md/algorithm/algorithm_006.md"}');export{g as comp,y as data};
