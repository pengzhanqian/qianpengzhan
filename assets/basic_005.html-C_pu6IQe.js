import{_ as i,c as u,b as s,d as c,a as p,w as e,e as a,r as o,o as r}from"./app-GRT9i7xS.js";const k="/qianpengzhan/assets/image-20250724111553263-CNqCUyX0.png",d="/qianpengzhan/assets/image-20250724111730575-B-vYlFf9.png",m="/qianpengzhan/assets/image-20250724111945008-C9SXWabA.png",v="/qianpengzhan/assets/image-20250724143515606-Cv-YBaM_.png",b="/qianpengzhan/assets/image-20250724144113235-B3J92igZ.png",g="/qianpengzhan/assets/image-20250724151223126-BXPqH5Jo.png",h="/qianpengzhan/assets/image-20250724151358092-DHjqptfX.png",y="/qianpengzhan/assets/image-20250724151909701-CBStl7AG.png",w="/qianpengzhan/assets/image-20250724152119328-Cj0hSzgQ.png",f="/qianpengzhan/assets/image-20250724152142804-BhHw1qgv.png",q="/qianpengzhan/assets/image-20250724152336860-BVQFJH1W.png",j="/qianpengzhan/assets/image-20250724152402277-Ba3VX_p-.png",_="/qianpengzhan/assets/image-20250724153410605-CSZggUCt.png",S="/qianpengzhan/assets/image-20250724153426677-CFpG3C51.png",x="/qianpengzhan/assets/image-20250724162322354-Di4F9__J.png",z="/qianpengzhan/assets/image-20250724162341813-CykjuU6A.png",T="/qianpengzhan/assets/image-20250724162413044-BI2VUf3U.png",D="/qianpengzhan/assets/image-20250724162424910-B9WAslf2.png",A="/qianpengzhan/assets/image-20250724140501080-g2u5Tql5.png",I="/qianpengzhan/assets/image-20250724141643681-50z8ZmiB.png",B="/qianpengzhan/assets/image-20250724141716739-WeCpwaTu.png",J="/qianpengzhan/assets/image-20250724165612988-D43PDLcF.png",C="/qianpengzhan/assets/image-20250724171010699-M70ejpl1.png",L="/qianpengzhan/assets/image-20250724171234894-DsY4wPKO.png",N="/qianpengzhan/assets/image-20250724171253476-DBvV67E4.png",K="/qianpengzhan/assets/image-20250724173502621-D0FDLpIo.png",V="/qianpengzhan/assets/image-20250724174125213-BS4pQeIN.png",Y="/qianpengzhan/assets/image-20250724174335698-C5R7xpZq.png",F="/qianpengzhan/assets/image-20250724174348572-bJe9Kctt.png",H="/qianpengzhan/assets/image-20250725093704337-CZIRLYg3.png",U="/qianpengzhan/assets/image-20250725102920962-oJdmNS-n.png",M="/qianpengzhan/assets/image-20250725132754005-DiLqJgIN.png",R="/qianpengzhan/assets/image-20250725135056687-DJoUJujt.png",W="/qianpengzhan/assets/image-20250725135338442-DJdg5N8H.png",P="/qianpengzhan/assets/image-20250725135846151-DP2oOHIN.png",E="/qianpengzhan/assets/image-20250725142003321-BytKRWMS.png",O="/qianpengzhan/assets/image-20250725142530238-A-IK4nfT.png",X={},Z={class:"table-of-contents"};function Q(G,n){const t=o("router-link"),l=o("font");return r(),u("div",null,[n[36]||(n[36]=s("h1",{id:"java基础知识-流程控制",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#java基础知识-流程控制"},[s("span",null,"JAVA基础知识 - 流程控制")])],-1)),s("nav",Z,[s("ul",null,[s("li",null,[p(t,{to:"#【1】概念和引入"},{default:e(()=>n[0]||(n[0]=[a("【1】概念和引入")])),_:1,__:[0]}),s("ul",null,[s("li",null,[p(t,{to:"#_1-1-流程控制语句"},{default:e(()=>n[1]||(n[1]=[a("1.1 流程控制语句")])),_:1,__:[1]})]),s("li",null,[p(t,{to:"#_1-2-流程控制语句的分类"},{default:e(()=>n[2]||(n[2]=[a("1.2 流程控制语句的分类")])),_:1,__:[2]})]),s("li",null,[p(t,{to:"#_1-3-流程控制语句简单总结"},{default:e(()=>n[3]||(n[3]=[a("1.3 流程控制语句简单总结")])),_:1,__:[3]})])])]),s("li",null,[p(t,{to:"#【2】顺序结构"},{default:e(()=>n[4]||(n[4]=[a("【2】顺序结构")])),_:1,__:[4]})]),s("li",null,[p(t,{to:"#【3】选择结构"},{default:e(()=>n[5]||(n[5]=[a("【3】选择结构")])),_:1,__:[5]}),s("ul",null,[s("li",null,[p(t,{to:"#_3-1-if"},{default:e(()=>n[6]||(n[6]=[a("3.1 if")])),_:1,__:[6]})]),s("li",null,[p(t,{to:"#_3-2-switch"},{default:e(()=>n[7]||(n[7]=[a("3.2 switch")])),_:1,__:[7]})])])]),s("li",null,[p(t,{to:"#【4】循环结构"},{default:e(()=>n[8]||(n[8]=[a("【4】循环结构")])),_:1,__:[8]}),s("ul",null,[s("li",null,[p(t,{to:"#_4-1-while循环"},{default:e(()=>n[9]||(n[9]=[a("4.1 while循环")])),_:1,__:[9]})]),s("li",null,[p(t,{to:"#_4-2-do-while循环"},{default:e(()=>n[10]||(n[10]=[a("4.2 do...while循环")])),_:1,__:[10]})]),s("li",null,[p(t,{to:"#_4-3-for循环"},{default:e(()=>n[11]||(n[11]=[a("4.3 for循环")])),_:1,__:[11]})]),s("li",null,[p(t,{to:"#_4-4-循环结构中的关键字"},{default:e(()=>n[12]||(n[12]=[a("4.4 循环结构中的关键字")])),_:1,__:[12]})]),s("li",null,[p(t,{to:"#_4-5-循环嵌套"},{default:e(()=>n[13]||(n[13]=[a("4.5 循环嵌套")])),_:1,__:[13]})])])]),s("li",null,[p(t,{to:"#【5】参考资料"},{default:e(()=>n[14]||(n[14]=[a("【5】参考资料")])),_:1,__:[14]})])])]),n[37]||(n[37]=c('<blockquote><p>说在前面的话，本文为个人学习<a href="https://www.bilibili.com/video/BV1RK4y1g7A5/?spm_id_from=333.337.search-card.all.click&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">B站免费的马士兵java初级教程</a>后进行总结的文章，本文主要用于<b>JAVA基础知识</b>。</p></blockquote><h2 id="【1】概念和引入" tabindex="-1"><a class="header-anchor" href="#【1】概念和引入"><span>【1】概念和引入</span></a></h2><h3 id="_1-1-流程控制语句" tabindex="-1"><a class="header-anchor" href="#_1-1-流程控制语句"><span>1.1 流程控制语句</span></a></h3><blockquote><div class="hint-container info"><p class="hint-container-title">什么是流程控制语句?</p><p><strong>流程控制语句</strong> 是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。</p></div></blockquote><h3 id="_1-2-流程控制语句的分类" tabindex="-1"><a class="header-anchor" href="#_1-2-流程控制语句的分类"><span>1.2 流程控制语句的分类</span></a></h3><blockquote><p><strong>流程控制语句</strong> 分为三类:</p><ul><li><strong>顺序</strong></li><li><strong>选择</strong></li><li><strong>循环</strong></li></ul></blockquote><h4 id="_1-2-1-顺序" tabindex="-1"><a class="header-anchor" href="#_1-2-1-顺序"><span>1.2.1 顺序</span></a></h4><blockquote><p><strong>顺序</strong> 结构代表 <strong>&quot;先执行A，再执行B&quot;</strong> 的顺序逻辑</p></blockquote><p><img src="'+k+'" alt="image-20250724111553263"></p><h4 id="_1-2-2-选择" tabindex="-1"><a class="header-anchor" href="#_1-2-2-选择"><span>1.2.2 选择</span></a></h4><blockquote><p><strong>选择</strong> 结构 又叫做 <strong>&quot;条件判断&quot;</strong> 结构，也叫做 <strong>分支</strong> 结构， 代表 <strong>&quot;如果.......就........&quot;</strong> 的选择逻辑</p></blockquote><p><img src="'+d+'" alt="image-20250724111730575"></p><h4 id="_1-2-3-循环" tabindex="-1"><a class="header-anchor" href="#_1-2-3-循环"><span>1.2.3 循环</span></a></h4><blockquote><p><strong>循环</strong> 结构，代表 <b>&quot;如果...., 则再继续.....&quot;</b> 的遍历的逻辑。</p></blockquote><p><img src="'+m+`" alt="image-20250724111945008"></p><h3 id="_1-3-流程控制语句简单总结" tabindex="-1"><a class="header-anchor" href="#_1-3-流程控制语句简单总结"><span>1.3 流程控制语句简单总结</span></a></h3><blockquote><div class="hint-container important"><p class="hint-container-title">小结</p><p>三种流程控制语句就能表示所有的事情！不信，你可以试试拆分你遇到的各种事情。这三种基本逻辑结构是相互支撑的，它们共同构成了算法的基本结构，无论怎样复杂的逻辑结构，都可以通过它们来表达。所以任何一种高级语言都具备上述两种结构。</p></div></blockquote><h2 id="【2】顺序结构" tabindex="-1"><a class="header-anchor" href="#【2】顺序结构"><span>【2】顺序结构</span></a></h2><blockquote><p>所有的代码逻辑，按照自上而下的写法，然后编译、执行都是按照某个类、某个方法的代码执行顺序来执行的。所以顺序结构再代码中是最简单、最自然、最多的语句，也比较简单，就是按照代码编写的先后顺序及逆行执行即可。</p></blockquote><h2 id="【3】选择结构" tabindex="-1"><a class="header-anchor" href="#【3】选择结构"><span>【3】选择结构</span></a></h2><blockquote><p><strong>选择结构</strong>，又叫<strong>条件判断结构</strong> 、<strong>分支结构</strong></p></blockquote><blockquote><p>在<code>JAVA</code> 中，有2种分支结构:</p><ul><li><code>if</code> 语句</li><li><code>switch</code> 语句</li></ul></blockquote><h3 id="_3-1-if" tabindex="-1"><a class="header-anchor" href="#_3-1-if"><span>3.1 <code>if</code></span></a></h3><h4 id="_3-1-1-if-结构分类" tabindex="-1"><a class="header-anchor" href="#_3-1-1-if-结构分类"><span>3.1.1 <code>if</code> 结构分类</span></a></h4><blockquote><p><code>if</code>语句分为3类</p><ul><li>单分支</li><li>双分支</li><li>多分支</li></ul></blockquote><h5 id="_3-1-1-1-单分支" tabindex="-1"><a class="header-anchor" href="#_3-1-1-1-单分支"><span>3.1.1.1 单分支</span></a></h5><blockquote><ul><li><p>语法结构：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    语句块</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>解析</p><ul><li>if语句对布尔表达式进行一次判定，若判定为真，则执行{}中的语句块，否则跳过该语句块。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式，这个表达式的结果是布尔值：要么是<span class="token boolean">false</span>，要么是<span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//如果上面()中的表达式返回结果是true，那么执行{}中代码</span></span>
<span class="line">        <span class="token comment">//如果上面()中的表达式返回结果是false ，那么不执行{}中代码</span></span>
<span class="line">        <span class="token comment">//PS:{}中的代码是否执行，取决于()中表达式的返回结果</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>流程图</p></li></ul><p><img src="`+v+`" alt="image-20250724143515606"></p><ul><li>代码示例:</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestIfSingle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//实现一个功能：给出三个数（1-6），对三个数求和计算，根据和的大小来分配不同的奖品</span></span>
<span class="line">        <span class="token comment">//1.给出三个数：</span></span>
<span class="line">        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//2.求和</span></span>
<span class="line">        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        sum <span class="token operator">+=</span> num1<span class="token punctuation">;</span></span>
<span class="line">        sum <span class="token operator">+=</span> num2<span class="token punctuation">;</span></span>
<span class="line">        sum <span class="token operator">+=</span> num3<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;和为：&quot;</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//3.根据和判断奖品：</span></span>
<span class="line">        <span class="token comment">//如果和大于等于14，那么就是一等奖</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一等奖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;恭喜你很幸运，中了一等奖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> sum <span class="token operator">&lt;</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;二等奖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> <span class="token number">6</span> <span class="token operator">&amp;&amp;</span> sum <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;三等奖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;四等奖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        if-单分支：</span>
<span class="line">        （1）结构：</span>
<span class="line">                if(条件表达式，这个表达式的结果是布尔值：要么是false，要么是true){</span>
<span class="line">                        //如果上面()中的表达式返回结果是true，那么执行{}中代码</span>
<span class="line">                        //如果上面()中的表达式返回结果是false ，那么不执行{}中代码</span>
<span class="line">                        //PS:{}中的代码是否执行，取决于()中表达式的返回结果</span>
<span class="line">                }</span>
<span class="line">        （2）上面的代码中，我用四个单分支拼凑出四个选择，每个选择是独立的，依次判断执行的</span>
<span class="line">        （3）if后面的()中的条件，要按照自己需求尽量完善</span>
<span class="line">        （4）{}可以省略不写,但是一旦省略，这个if就只负责后面的一句话，所以我们不建议初学者省略</span>
<span class="line">        */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>编译，运行如下:</p><p><code>javac -encoding utf-8 TestIfSingle.java</code> 得到 <code>.class</code>文件</p><p><code>java TestIfSingle</code></p><p><img src="`+b+'" alt="image-20250724144113235"></p><p><img src="'+g+`" alt="image-20250724151223126"></p></blockquote><h5 id="_3-1-1-2-双分支" tabindex="-1"><a class="header-anchor" href="#_3-1-1-2-双分支"><span>3.1.1.2 双分支</span></a></h5><blockquote><ul><li>语法结构</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">语句块<span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">      语句块<span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>解析</li></ul><blockquote><p>当布尔表达式为真时，执行语句块1，否则，执行语句块2。也就是else部分</p></blockquote><ul><li>流程图</li></ul><p><img src="`+h+`" alt="image-20250724151358092"></p></blockquote><h5 id="_3-1-1-3-多分支" tabindex="-1"><a class="header-anchor" href="#_3-1-1-3-多分支"><span>3.1.1.3 多分支</span></a></h5><blockquote><ul><li>语法结构</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        语句块<span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        语句块<span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span>……</span>
<span class="line"><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式n<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        语句块n<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        语句块n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>解析</li></ul><blockquote><p>当布尔表达式1为真时，执行语句块1；否则，判断布尔表达式2，当布尔表达式2为真时，执行语句块2；否则，继续判断布尔表达式3······；如果1~n个布尔表达式均判定为假时，则执行语句块n+1，也就是else部分</p></blockquote><ul><li>流程图</li></ul><p><img src="`+y+`" alt="image-20250724151909701"></p><ul><li>例子</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestIfMore</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//实现一个功能：给出三个数（1-6），对三个数求和计算，根据和的大小来分配不同的奖品</span></span>
<span class="line">        <span class="token comment">//1.给出三个数：</span></span>
<span class="line">        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//2.求和</span></span>
<span class="line">        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        sum <span class="token operator">+=</span> num1<span class="token punctuation">;</span></span>
<span class="line">        sum <span class="token operator">+=</span> num2<span class="token punctuation">;</span></span>
<span class="line">        sum <span class="token operator">+=</span> num3<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;和为：&quot;</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//3.根据和判断奖品：</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        利用一个多分支</span>
<span class="line">        【1】结构：</span>
<span class="line">        if(){</span>
<span class="line"></span>
<span class="line">        }else if(){</span>
<span class="line"></span>
<span class="line">        }else if(){</span>
<span class="line"></span>
<span class="line">        }...</span>
<span class="line">        else{</span>
<span class="line"></span>
<span class="line">        }</span>
<span class="line">        【2】else:隐藏了一个条件，跟上面分支条件表达式相反的功能 (详见数轴分析)</span>
<span class="line">        【3】多分支：好处：只要满足一个 分支以后，后面的分支就不需要判断了 --》效率高</span>
<span class="line">        【4】我们写代码的时候，尽量保证else的存在--》else分支相当于“兜底”“备胎”的作用，别的分支都不走，就会走这个分支了</span>
<span class="line">        */</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一等奖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//隐藏了sum&lt;14</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;二等奖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//隐藏了sum&lt;10</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;三等奖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//隐藏了sum&lt;6</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;四等奖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>编译运行如下：</p><p><code>javac -encoding utf-8 TestIfMore.java</code></p><p><code>java TestIfMore</code></p><img src="`+w+'" alt="image-20250724152119328" style="zoom:33%;"><p><img src="'+f+'" alt="image-20250724152142804"></p></blockquote></blockquote><h4 id="_3-1-2-if的分支结构嵌套" tabindex="-1"><a class="header-anchor" href="#_3-1-2-if的分支结构嵌套"><span>3.1.2 <code>if</code>的分支结构嵌套</span></a></h4><h5 id="_3-1-2-1-练习题1" tabindex="-1"><a class="header-anchor" href="#_3-1-2-1-练习题1"><span>3.1.2.1 练习题1</span></a></h5><blockquote><p>会员购物时，不同积分享受的折扣不同，规则如下：</p><p><img src="'+q+'" alt="image-20250724152336860"></p><p>计算会员购物时获得的折扣，效果如下：</p><p><img src="'+j+`" alt="image-20250724152402277"></p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestIfLianxi01</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//1.给出积分：</span></span>
<span class="line">        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入会员积分：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//先判断键盘录入的数据是不是int类型的</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//是int类型数据：</span></span>
<span class="line">            <span class="token comment">//将这个int类型的数据接收：</span></span>
<span class="line">            <span class="token keyword">int</span> score <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//判断这个积分是否是正数：</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">String</span> discount <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">//2.根据积分判断折扣：</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">8000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    discount <span class="token operator">=</span> <span class="token string">&quot;0.6&quot;</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">4000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    discount <span class="token operator">=</span> <span class="token string">&quot;0.7&quot;</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    discount <span class="token operator">=</span> <span class="token string">&quot;0.8&quot;</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                    discount <span class="token operator">=</span> <span class="token string">&quot;0.9&quot;</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;该会员享受的折扣为：&quot;</span> <span class="token operator">+</span> discount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//score&lt;0</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;对不起，你录入的积分是负数！不符合需求！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//不是int类型的数据</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;你录入的积分不是整数！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>编译 运行，然后输入会员积分 6590</p><p><code>javac -encoding utf-8 TestIfLianxi01.java</code></p><p><code>java TestLianxi01</code></p><p><img src="`+_+'" alt="image-20250724153410605"></p><p><img src="'+S+`" alt="image-20250724153426677"></p></blockquote><h5 id="_3-1-2-2-练习题2" tabindex="-1"><a class="header-anchor" href="#_3-1-2-2-练习题2"><span>3.1.2.2 练习题2</span></a></h5><blockquote><p>小朋友搬桌子： 年龄大于7岁，可以搬桌子； 如果年龄大于5岁，性别是男，可以搬桌子； 否则不可以搬动桌子，提示：你还太小了</p></blockquote><ul><li>性别用 0 和 1 代替输入</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestIfLianxi02_1</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//1.录入小朋友的年龄：</span></span>
<span class="line">        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请录入小朋友的年龄：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//2.根据年龄判断：</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//录入小朋友的性别；</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请录入小朋友的性别：男：1  女 ：0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">int</span> sex <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>sex <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//男生</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//女孩</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//age&lt;5</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>编译+运行后:</p><p><code>javac -encoding utf-8 TestIfLianxi02_1.java</code></p><p><code>java TestIfLianxi02_1</code></p><p>输入 5,1</p><p><img src="`+x+'" alt="image-20250724162322354"></p><p><img src="'+z+`" alt="image-20250724162341813"></p></blockquote><ul><li>性别用 &quot;男&quot; 和 &quot;女&quot; 来输入</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestIfLianxi02_2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//1.录入小朋友的年龄：</span></span>
<span class="line">        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请录入小朋友的年龄：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//2.根据年龄判断：</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//录入小朋友的性别；</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请录入小朋友的性别：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">String</span> str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">char</span> sex <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>sex <span class="token operator">==</span> <span class="token char">&#39;男&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//age&lt;5</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>编译+运行后:</p><p><code>javac -encoding utf-8 TestIfLianxi02_2.java</code></p><p><code>java TestIfLianxi02_2</code></p><p>输入5，男</p><p><img src="`+T+'" alt="image-20250724162413044"></p><p><img src="'+D+`" alt="image-20250724162424910"></p></blockquote><h3 id="_3-2-switch" tabindex="-1"><a class="header-anchor" href="#_3-2-switch"><span>3.2 <code>switch</code></span></a></h3><h4 id="_3-2-1-switch的语法结构" tabindex="-1"><a class="header-anchor" href="#_3-2-1-switch的语法结构"><span>3.2.1 <code>switch</code>的语法结构</span></a></h4><blockquote><p><code>switch</code>语句本身就包含了单、双、多分支的情形，其语句结构如下:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> 值<span class="token number">1</span><span class="token operator">:</span></span>
<span class="line">         语句序列<span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> 值<span class="token number">2</span><span class="token operator">:</span></span>
<span class="line">         语句序列<span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        … … …      … …</span>
<span class="line">    <span class="token punctuation">[</span><span class="token keyword">default</span><span class="token operator">:</span>默认语句<span class="token punctuation">;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">描述</p><p><code>switch</code>语句会根据表达式的值从相匹配的<code>case</code>标签处开始执行，一直执行到break语句处或者是<code>switch</code>语句的末尾。如果表达式的值与任一case值不匹配，则进入<code>default</code>语句（如果存在<code>default</code>语句的情况）。根据表达式值的不同可以执行许多不同的操作。<code>switch</code>语句中<code>case</code>标签在<code>JDK1.5</code>之前必须是整数（long类型除外）或者枚举，不能是字符串，在<code>JDK1.7</code>之后允许使用字符串(String)。大家要注意，当布尔表达式是等值判断的情况，可以使用<code>if-else if-else</code>多分支结构或者<code>switch</code>结构，如果布尔表达式区间判断的情况，则只能使用<code>if-else if-else</code>多分支结构</p></div></blockquote><h4 id="_3-2-2-switch的使用" tabindex="-1"><a class="header-anchor" href="#_3-2-2-switch的使用"><span>3.2.2 <code>switch</code>的使用</span></a></h4><blockquote><p>switch多分支结构的流程图如图所示：</p><p><img src="`+A+`" alt="image-20250724140501080"></p></blockquote><blockquote><p>下面我们做个最简单的例子。根据给出的学生的分数，判断学生的等级。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">process_control</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSwitch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        实现一个功能：</span>
<span class="line">        根据给出的学生分数，判断学生的等级：</span>
<span class="line">        &gt;=90  -----A</span>
<span class="line">        &gt;=80  -----B</span>
<span class="line">        &gt;=70  -----C</span>
<span class="line">        &gt;=60  -----D</span>
<span class="line">        &lt;60   -----E</span>
<span class="line"></span>
<span class="line">        用if分支：</span>
<span class="line">        if(score&gt;=90){</span>
<span class="line"></span>
<span class="line">        }else if(score&gt;=80){</span>
<span class="line"></span>
<span class="line">        }</span>
<span class="line">        */</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//1.给出学生的成绩：</span></span>
<span class="line">        <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">167</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//2.根据成绩判断学生的等级：</span></span>
<span class="line">        <span class="token keyword">switch</span> <span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;A级&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;B级&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;C级&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;D级&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;成绩错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;E级&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        【1】语法结构：</span>
<span class="line">        switch(){</span>
<span class="line">                case * :</span>
<span class="line">                case * :</span>
<span class="line">                .......</span>
<span class="line">        }</span>
<span class="line">        【2】switch后面是一个()，()中表达式返回的结果是一个等值，这个等值的类型可以为：</span>
<span class="line">        int,byte,short,char,String,枚举类型</span>
<span class="line">        【3】这个()中的等值会依次跟case后面的值进行比较，如果匹配成功，就执行:后面的代码</span>
<span class="line">        【4】为了防止代码的“穿透”效果：在每个分支后面加上一个关键词break，遇到break这个分支就结束了</span>
<span class="line">        【5】类似else的“兜底”“备胎”的分支：default分支</span>
<span class="line">        【6】default分支可以写在任意的位置上，但是如果没有在最后一行，后面必须加上break关键字，</span>
<span class="line">        如果在最后一行的话，break可以省略</span>
<span class="line">        【7】相邻分支逻辑是一样的，那么就可以只保留最后一个分支，上面的都可以省去不写了</span>
<span class="line">        【8】switch分支和if分支区别：</span>
<span class="line">        表达式是等值判断的话--&gt; if ，switch都可以</span>
<span class="line">        如果表达式是区间判断的情况---&gt; if最好</span>
<span class="line">        【9】switch应用场合：就是等值判断，等值的情况比较少的情况下</span>
<span class="line">        */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用命令行: <code>javac -encoding utf-8 TestSwitch.java</code> 进行编译后， 然后使用<code>java TestSwithc</code> 运行下：</p><p><img src="`+I+'" alt="image-20250724141643681"></p><p>编译后的代码如下:</p><p><img src="'+B+`" alt="image-20250724141716739"></p></blockquote><h4 id="_3-2-3-jdk9之后的switch" tabindex="-1"><a class="header-anchor" href="#_3-2-3-jdk9之后的switch"><span>3.2.3 JDK9之后的<code>switch</code></span></a></h4><h5 id="_3-2-3-1-语法结构变化" tabindex="-1"><a class="header-anchor" href="#_3-2-3-1-语法结构变化"><span>3.2.3.1 语法结构变化</span></a></h5><blockquote><div class="hint-container warning"><p class="hint-container-title"><code>JDK9 </code>之后的 <code>switch</code>语句</p><p>在<code>JDK 9</code>之后（特别是<code>JDK 12、13、14、17</code>中逐步完善），<code>switch</code>语法经历了‌<strong>重大改进</strong>‌，主要目的是简化代码、减少错误，并支持作为表达式使用将<code>switch</code>从‌<strong>语句</strong>‌升级为‌<strong>表达式</strong>‌，可直接返回值。语法结构如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">int</span> numLetters <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span> <span class="token operator">-&gt;</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token comment">// 多标签逗号分隔</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token constant">TUESDAY</span>                <span class="token operator">-&gt;</span> <span class="token number">7</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span>                     <span class="token operator">-&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 不再需要break</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>语法</strong>‌：使用箭头<code>-&gt;</code>代替冒号<code>:</code>，无需<code>break</code>。</p><ul><li><p><strong>避免穿透(Fall-through)</strong> ：使用<code>-&gt;</code>后，执行完当前分支自动跳出，无需<code>break</code>。</p></li><li><p><strong>支持代码块</strong>‌：右侧可以是单行表达式或<code>{}</code>代码块。</p></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">int</span> numLetters <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Even&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 多行代码</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// 使用yield返回值</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token constant">TUESDAY</span> <span class="token operator">-&gt;</span> <span class="token number">7</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span>      <span class="token operator">-&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></blockquote><h5 id="_3-2-3-2-yield-关键字" tabindex="-1"><a class="header-anchor" href="#_3-2-3-2-yield-关键字"><span>3.2.3.2 <code>yield</code> 关键字</span></a></h5><ul><li><p>‌<strong>作用</strong>‌：在<code>switch</code>代码块中返回值（替代<code>return</code>）。</p></li><li><p>‌使用场景：当分支需要多行逻辑时，用<code>yield</code>显式返回结果。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&quot;A&quot;</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&quot;B&quot;</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">yield</span> temp <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 通过yield返回</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">default</span>  <span class="token operator">-&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="_3-2-3-3-‌多常量匹配‌" tabindex="-1"><a class="header-anchor" href="#_3-2-3-3-‌多常量匹配‌"><span>3.2.3.3 ‌<strong>多常量匹配</strong>‌</span></a></h5><ul><li><p>‌简化语法：同一分支支持多个常量，用逗号分隔。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>digit<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Low&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Medium&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span>      <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;High&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="_3-2-3-4-‌模式匹配-预览特性-jdk-17" tabindex="-1"><a class="header-anchor" href="#_3-2-3-4-‌模式匹配-预览特性-jdk-17"><span>3.2.3.4 ‌模式匹配（预览特性，JDK 17+）</span></a></h5><ul><li><p>‌<strong>类型匹配</strong>‌：直接检查类型并绑定变量。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token class-name">Integer</span> i <span class="token operator">-&gt;</span> <span class="token string">&quot;Integer: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token class-name">String</span> s  <span class="token operator">-&gt;</span> <span class="token string">&quot;String: &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">;</span> <span class="token comment">// s自动绑定为String</span></span>
<span class="line">    <span class="token keyword">default</span>        <span class="token operator">-&gt;</span> <span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>‌<strong>null值处理</strong> : 可显式处理<code>null</code>分支（JDK 17预览，JDK 19正式）：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token keyword">null</span>     <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Null!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&quot;Hello&quot;</span>  <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span>       <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Bye&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="_3-2-3-5-‌作用域隔离" tabindex="-1"><a class="header-anchor" href="#_3-2-3-5-‌作用域隔离"><span>3.2.3.5 ‌作用域隔离</span></a></h5><ul><li><p>每个分支的变量作用域独立，避免命名冲突：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 仅在此分支有效</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&quot;b&quot;</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 与前一个s互不影响</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="_3-2-3-5-‌兼容性规则" tabindex="-1"><a class="header-anchor" href="#_3-2-3-5-‌兼容性规则"><span>3.2.3.5 ‌兼容性规则</span></a></h5><ul><li>‌<strong>必须穷举</strong>‌：作为表达式时，需覆盖所有可能值（或提供<code>default</code>）。</li><li>‌<strong>类型兼容</strong>‌：所有分支返回值类型需一致。</li></ul><h4 id="_3-2-4-总结-jdk-9-的-switch-优势" tabindex="-1"><a class="header-anchor" href="#_3-2-4-总结-jdk-9-的-switch-优势"><span>3.2.4 总结 JDK 9+ 的 <code>switch</code> 优势</span></a></h4><table><thead><tr><th>特性</th><th>传统<code>switch</code></th><th>JDK 9+ <code>switch</code></th></tr></thead><tbody><tr><td>‌<strong>返回值</strong>‌</td><td>不能直接返回值</td><td>可作为表达式返回值</td></tr><tr><td>‌<strong>穿透</strong>‌</td><td>需手动<code>break</code></td><td>箭头语法自动跳出</td></tr><tr><td>‌<strong>多分支合并</strong>‌</td><td>需堆叠<code>case</code></td><td>逗号分隔（<code>case A, B</code>）</td></tr><tr><td>‌<strong>代码简洁性</strong>‌</td><td>冗长</td><td>简洁，减少模板代码</td></tr><tr><td>‌<strong>作用域</strong>‌</td><td>整个<code>switch</code>共享作用域</td><td>分支隔离作用域</td></tr></tbody></table><h2 id="【4】循环结构" tabindex="-1"><a class="header-anchor" href="#【4】循环结构"><span>【4】循环结构</span></a></h2><h3 id="_4-1-while循环" tabindex="-1"><a class="header-anchor" href="#_4-1-while循环"><span>4.1 <code>while</code>循环</span></a></h3><h4 id="_4-1-1-语法结构" tabindex="-1"><a class="header-anchor" href="#_4-1-1-语法结构"><span>4.1.1 语法结构</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    循环体<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-2-解析" tabindex="-1"><a class="header-anchor" href="#_4-1-2-解析"><span>4.1.2 解析</span></a></h4><blockquote><p>在循环刚开始时，会计算一次“布尔表达式”的值，若条件为真，执行循环体。而对于后来每一次额外的循环，都会在开始前重新计算一次。 语句中应有使循环趋向于结束的语句，否则会出现无限循环–––&quot;死&quot;循环。</p></blockquote><h4 id="_4-1-3-流程图" tabindex="-1"><a class="header-anchor" href="#_4-1-3-流程图"><span>4.1.3 流程图</span></a></h4><blockquote><p>while循环结构流程图如图所示:</p><p><img src="`+J+`" alt="image-20250724165612988"></p></blockquote><h4 id="_4-1-4-示例" tabindex="-1"><a class="header-anchor" href="#_4-1-4-示例"><span>4.1.4 示例</span></a></h4><blockquote><p>练习：1+2+3+4+5</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestWhile</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//功能：1+2+3+4+5</span></span>
<span class="line">        <span class="token comment">//1.定义变量：</span></span>
<span class="line">        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//[1]条件初始化</span></span>
<span class="line">        <span class="token comment">//2.定义一个求和变量，用来接收和：</span></span>
<span class="line">        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//[2]条件判断</span></span>
<span class="line">            sum <span class="token operator">+=</span> num<span class="token punctuation">;</span><span class="token comment">//[3]循环体</span></span>
<span class="line">            num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//[4]迭代</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">//3.输出和</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译 运行:</p><p><code>javac -encoding utf-8 TestWhile.java</code></p><p><code>java TestWhile</code></p><p><img src="`+C+'" alt="image-20250724171010699"></p></blockquote><h4 id="_4-1-5-总结" tabindex="-1"><a class="header-anchor" href="#_4-1-5-总结"><span>4.1.5 总结</span></a></h4><ol><li><p>循环作用：将部分代码重复执行。</p><ol><li>循环只是提高了程序员编写代码的效率，但是底层执行的时候依然是重复执行。</li></ol></li><li><p>循环四要素</p><ol><li><p>条件初始化</p></li><li><p>条件判断</p></li><li><p>循环体</p></li><li><p>迭代</p><p><img src="'+L+'" alt="image-20250724171234894"></p></li></ol></li><li><p>循环的执行过程</p><p><img src="'+N+`" alt="image-20250724171253476"></p></li></ol><h4 id="_4-1-6-死循环" tabindex="-1"><a class="header-anchor" href="#_4-1-6-死循环"><span>4.1.6 死循环</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-2-do-while循环" tabindex="-1"><a class="header-anchor" href="#_4-2-do-while循环"><span>4.2 <code>do...while</code>循环</span></a></h3><h4 id="_4-2-1-语法结构" tabindex="-1"><a class="header-anchor" href="#_4-2-1-语法结构"><span>4.2.1 语法结构</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    循环体<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2-解析" tabindex="-1"><a class="header-anchor" href="#_4-2-2-解析"><span>4.2.2 解析</span></a></h4><blockquote><p>do-while循环结构会先执行循环体，然后再判断布尔表达式的值，若条件为真，执行循环体，当条件为假时结束循环。do-while循环的循环体至少执行一次。</p></blockquote><h4 id="_4-2-3-流程图" tabindex="-1"><a class="header-anchor" href="#_4-2-3-流程图"><span>4.2.3 流程图</span></a></h4><blockquote><p>do-while循环结构流程图如图所示：</p></blockquote><p><img src="`+K+`" alt="image-20250724173502621"></p><h4 id="_4-2-4-示例" tabindex="-1"><a class="header-anchor" href="#_4-2-4-示例"><span>4.2.4 示例</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDoWhile</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//1+2+3+4+...100</span></span>
<span class="line">        <span class="token comment">//while方式:</span></span>
<span class="line">            <span class="token comment">/*</span>
<span class="line">            int i = 101;</span>
<span class="line">            int sum = 0;</span>
<span class="line">            while(i&lt;=100){</span>
<span class="line">                    sum += i;</span>
<span class="line">                    i++;</span>
<span class="line">            }</span>
<span class="line">            System.out.println(i);//101</span>
<span class="line">            System.out.println(sum);//0</span>
<span class="line">            */</span></span>
<span class="line">        <span class="token comment">//do-while方式：</span></span>
<span class="line">        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span></span>
<span class="line">            i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一定要注意写这个分号，否则编译出错</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//102</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//101</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        【1】while和do-while的区别:</span>
<span class="line">                while:先判断，再执行</span>
<span class="line">                do-while:先执行，再判断---》至少被执行一次，从第二次开始才进行判断</span>
<span class="line">        【2】什么场合使用do-while:</span>
<span class="line"></span>
<span class="line">        while(考试是否通过){</span>
<span class="line">                考试；</span>
<span class="line">        }</span>
<span class="line">        ---》不合适</span>
<span class="line">        do{</span>
<span class="line">                考试；</span>
<span class="line">        }while(考试是否通过);</span>
<span class="line">        ---》合适</span>
<span class="line">        */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-5-while-和-do-while-的区别" tabindex="-1"><a class="header-anchor" href="#_4-2-5-while-和-do-while-的区别"><span>4.2.5 <code>while</code> 和 <code>do...while</code> 的区别</span></a></h4><blockquote><p><code>while</code> : 先判断，再执行 <code>do-while</code>: 先执行，再判断---&gt;至少被执行一次，从第二次开始才进行判断</p></blockquote><h4 id="_4-2-6-死循环" tabindex="-1"><a class="header-anchor" href="#_4-2-6-死循环"><span>4.2.6 死循环</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">        <span class="token keyword">do</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-for循环" tabindex="-1"><a class="header-anchor" href="#_4-3-for循环"><span>4.3 <code>for</code>循环</span></a></h3><h4 id="_4-3-1-语法结构" tabindex="-1"><a class="header-anchor" href="#_4-3-1-语法结构"><span>4.3.1 语法结构</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始表达式<span class="token punctuation">;</span> 布尔表达式<span class="token punctuation">;</span> 迭代因子<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          循环体<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-2-解析" tabindex="-1"><a class="header-anchor" href="#_4-3-2-解析"><span>4.3.2 解析</span></a></h4><blockquote><p><code>for</code>循环语句是支持迭代的一种通用结构，是最有效、最灵活的循环结构。</p><ul><li><code>for</code>循环在第一次反复之前要进行初始化，即执行初始表达式；</li><li>随后，对布尔表达式进行判定，若判定结果为<code>true</code>，则执行循环体，否则，终止循环；</li><li>最后在每一次反复的时候，进行某种形式的“步进”，即执行迭代因子。</li></ul></blockquote><blockquote><ol><li>初始化部分设置循环变量的初值</li><li>条件判断部分为任意布尔表达式</li><li>迭代因子控制循环变量的增减</li></ol></blockquote><h4 id="_4-3-3-流程图" tabindex="-1"><a class="header-anchor" href="#_4-3-3-流程图"><span>4.3.3 流程图</span></a></h4><blockquote><p>for循环在执行条件判定后，先执行的循环体部分，再执行步进。 for循环结构的流程图如图所示：</p><p><img src="`+V+`" alt="image-20250724174125213"></p></blockquote><h4 id="_4-3-4-示例" tabindex="-1"><a class="header-anchor" href="#_4-3-4-示例"><span>4.3.4 示例</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFor</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//1+2+3+..+100</span></span>
<span class="line">        <span class="token comment">//while:</span></span>
<span class="line">                <span class="token comment">/*int i = 1;</span>
<span class="line">                int sum = 0;</span>
<span class="line">                while(i&lt;=100){</span>
<span class="line">                        sum += i;</span>
<span class="line">                        i++;</span>
<span class="line">                }</span>
<span class="line">                System.out.println(sum);</span>
<span class="line">                */</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//for:</span></span>
<span class="line">        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        【1】for的结构：</span>
<span class="line">        for(条件初始化;条件判断;迭代){</span>
<span class="line">                循环体；</span>
<span class="line">        }</span>
<span class="line"></span>
<span class="line">        【2】i的作用域：作用范围：离变量最近{}  ---&gt;可以自己去控制</span>
<span class="line">        【3】for循环格式特别灵活：格式虽然很灵活，但是我们自己写代码的时候不建议灵活着写。</span>
<span class="line">        for(;;){}  --&gt;死循环</span>
<span class="line"></span>
<span class="line">        int i = 1;</span>
<span class="line">        for(;i&lt;=100;){</span>
<span class="line">                sum += i;</span>
<span class="line">                i++;</span>
<span class="line">        }</span>
<span class="line"></span>
<span class="line">        【4】死循环：</span>
<span class="line">        for(;;){}</span>
<span class="line"></span>
<span class="line">        while(true){}</span>
<span class="line"></span>
<span class="line">        do{</span>
<span class="line"></span>
<span class="line">        }while(true);</span>
<span class="line"></span>
<span class="line">        【5】循环分为两大类：</span>
<span class="line">        第一类：当型   while(){}   for(;;){}</span>
<span class="line">        第二类：直到型  do{}while();</span>
<span class="line"></span>
<span class="line">        【6】以后常用：for循环</span>
<span class="line">        【7】do-while,while,for循环谁的效率高？  一样高</span>
<span class="line">        */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>编译，运行下：</p><p><img src="`+Y+'" alt="image-20250724174335698"></p><p><img src="'+F+`" alt="image-20250724174348572"></p></blockquote><h4 id="_4-3-5-死循环" tabindex="-1"><a class="header-anchor" href="#_4-3-5-死循环"><span>4.3.5 死循环</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-4-循环结构中的关键字" tabindex="-1"><a class="header-anchor" href="#_4-4-循环结构中的关键字"><span>4.4 循环结构中的关键字</span></a></h3>`,110)),s("blockquote",null,[s("p",null,[n[17]||(n[17]=a("在任何循环语句的主体部分，均可用")),p(l,{style:{color:"orange"}},{default:e(()=>n[15]||(n[15]=[a("break")])),_:1,__:[15]}),n[18]||(n[18]=a("控制循环的流程。")),p(l,{style:{color:"orange"}},{default:e(()=>n[16]||(n[16]=[a("break")])),_:1,__:[16]}),n[19]||(n[19]=a("用于强行退出循环，不执行循环中剩余的语句。"))]),p(l,{style:{color:"orange"}},{default:e(()=>n[20]||(n[20]=[a("continue")])),_:1,__:[20]}),n[22]||(n[22]=a(" 语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。")),p(l,{style:{color:"orange"}},{default:e(()=>n[21]||(n[21]=[a("return")])),_:1,__:[21]}),n[23]||(n[23]=a("的作用,结束当前所在方法的执行."))]),n[38]||(n[38]=s("h4",{id:"_4-4-1-break",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_4-4-1-break"},[s("span",null,[a("4.4.1 "),s("code",null,"break")])])],-1)),s("blockquote",null,[s("p",null,[n[25]||(n[25]=s("code",null,"break",-1)),n[26]||(n[26]=a(" ： 用于")),p(l,{style:{color:"red"}},{default:e(()=>n[24]||(n[24]=[a("强行退出当前循环，不执行当前循环中的剩余的语句")])),_:1,__:[24]}),n[27]||(n[27]=a("。"))]),n[28]||(n[28]=s("ul",null,[s("li",null,"退出的是当前的循环"),s("li",null,"停止的是最近的循环")],-1))]),n[39]||(n[39]=c(`<blockquote><p>例子如下:</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">//功能：求1-100的和，当和第一次超过300的时候，停止程序</span></span>
<span class="line"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>	</span>
<span class="line">        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>	</span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当和第一次超过300的时候</span></span>
<span class="line">                <span class="token comment">//停止循环 --&gt; 对应就是for循环</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//停止循环</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>加深理解，再看下如下例子:</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">//break的作用：停止最近的循环</span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">for(int i=1;i&lt;=100;i++){</span>
<span class="line">        System.out.println(i);</span>
<span class="line">        if(i==36){</span>
<span class="line">                break;//1-36   // 这个退出的是当前for循环</span>
<span class="line">        }</span>
<span class="line">}</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//1-100  ---》break停止的是while循环，而不是外面的for循环</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4-2-break-标签" tabindex="-1"><a class="header-anchor" href="#_4-4-2-break-标签"><span>4.4.2 <code>break</code> + 标签</span></a></h4><blockquote><p><code>break</code> 可以带标签，然后去定义循环结束的地方</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">outer<span class="token operator">:</span>     <span class="token operator">--</span><span class="token operator">--</span>》定义标签结束的位置</span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">break</span> outer<span class="token punctuation">;</span>    <span class="token operator">--</span><span class="token operator">--</span>》根据标签来结束循环 </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>多层循环也可以使用标签，按照自己的需求去设定即可：</p><p><img src="`+H+'" alt="image-20250725093704337"></p></blockquote><h4 id="_4-4-3-continue" tabindex="-1"><a class="header-anchor" href="#_4-4-3-continue"><span>4.4.3 <code>continue</code></span></a></h4>',9)),s("blockquote",null,[s("p",null,[n[30]||(n[30]=s("code",null,"continue",-1)),n[31]||(n[31]=a(" ： 用于")),p(l,{style:{color:"red"}},{default:e(()=>n[29]||(n[29]=[a("结束本次的循环，继续下一次循环")])),_:1,__:[29]})]),n[32]||(n[32]=s("ul",null,[s("li",null,"结束当前当次循环，后面语句不执行了"),s("li",null,"下次以及剩下的很多次的循环还是要执行的")],-1))]),n[40]||(n[40]=c(`<blockquote><p>例子：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">//功能：输出1-100中被6整除的数：</span></span>
<span class="line"><span class="token comment">//方式1：</span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">for(int i=1;i&lt;=100;i++){	</span>
<span class="line">        if(i%6==0){//被6整除</span>
<span class="line">                System.out.println(i);</span>
<span class="line">        }</span>
<span class="line">}</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//方式2：</span></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>	</span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">6</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//不被6整除</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//停止本次循环，继续下一次循环</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>加深理解：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">//continue:结束本次离它近的循环，继续下一次循环</span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">for(int i=1;i&lt;=100;i++){	</span>
<span class="line">        if(i==36){</span>
<span class="line">                continue;//1-100中间没有36</span>
<span class="line">        }</span>
<span class="line">        System.out.println(i);</span>
<span class="line">}</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>	</span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//1-35+死循环</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>continue</code> + 标签就不多做赘述了，和<code>break</code> + 标签是一样的。</p></blockquote><h4 id="_4-4-4-return" tabindex="-1"><a class="header-anchor" href="#_4-4-4-return"><span>4.4.4 <code>return </code></span></a></h4><blockquote><p><code>return</code>的作用：跟循环无关，就是程序中遇到<code>return</code>那么<code>return</code>所在的那个方法就停止执行了.</p><p>例子：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">//return:遇到return结束当前正在执行的方法</span></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>	</span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">{</span> </span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-循环嵌套" tabindex="-1"><a class="header-anchor" href="#_4-5-循环嵌套"><span>4.5 循环嵌套</span></a></h3>`,9)),s("blockquote",null,[p(l,{style:{}},{default:e(()=>n[33]||(n[33]=[a("循环嵌套")])),_:1,__:[33]}),n[34]||(n[34]=a(" : 就是多种循环的写法在各自的循环体中添加循环结构，这样互相叠加而成，叫做")),n[35]||(n[35]=s("code",null,"循环嵌套",-1))]),n[41]||(n[41]=c(`<h4 id="_4-5-1-双重循环基础练习-99乘法表" tabindex="-1"><a class="header-anchor" href="#_4-5-1-双重循环基础练习-99乘法表"><span>4.5.1 双重循环基础练习 - 99乘法表</span></a></h4><blockquote><p>比如，我们从小学的乘法口诀表。如下：</p><p>1<em>1=1 1</em>2=2 2<em>2=4 1</em>3=3 2<em>3=6 3</em>3=9 1<em>4=4 2</em>4=8 3<em>4=12 4</em>4=16 1<em>5=5 2</em>5=10 3<em>5=15 4</em>5=20 5<em>5=25 1</em>6=6 2<em>6=12 3</em>6=18 4<em>6=24 5</em>6=30 6<em>6=36 1</em>7=7 2<em>7=14 3</em>7=21 4<em>7=28 5</em>7=35 6<em>7=42 7</em>7=49 1<em>8=8 2</em>8=16 3<em>8=24 4</em>8=32 5<em>8=40 6</em>8=48 7<em>8=56 8</em>8=64 1<em>9=9 2</em>9=18 3<em>9=27 4</em>9=36 5<em>9=45 6</em>9=54 7<em>9=63 8</em>9=72 9*9=81</p><p>这样，让代码将这样的样式弄出来</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMultiplication</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//1*6=6   2*6=12  3*6=18  4*6=24  5*6=30  6*6=36</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        System.out.print(&quot;1*6=6&quot;+&quot;\\t&quot;);</span>
<span class="line">        System.out.print(&quot;2*6=12&quot;+&quot;\\t&quot;);</span>
<span class="line">        System.out.print(&quot;3*6=18&quot;+&quot;\\t&quot;);</span>
<span class="line">        System.out.print(&quot;4*6=24&quot;+&quot;\\t&quot;);</span>
<span class="line">        System.out.print(&quot;5*6=30&quot;+&quot;\\t&quot;);</span>
<span class="line">        System.out.print(&quot;6*6=36&quot;+&quot;\\t&quot;);</span>
<span class="line"></span>
<span class="line">        for(int i=1;i&lt;=6;i++){</span>
<span class="line">                System.out.print(i+&quot;*6=&quot;+i*6+&quot;\\t&quot;);</span>
<span class="line">        }</span>
<span class="line">        //换行</span>
<span class="line">        System.out.println();</span>
<span class="line"></span>
<span class="line">        //1*7=7   2*7=14  3*7=21  4*7=28  5*7=35  6*7=42  7*7=49</span>
<span class="line">        for(int i=1;i&lt;=7;i++){</span>
<span class="line">                System.out.print(i+&quot;*7=&quot;+i*7+&quot;\\t&quot;);</span>
<span class="line">        }</span>
<span class="line">        //换行</span>
<span class="line">        System.out.println();</span>
<span class="line"></span>
<span class="line">        //1*8=8   2*8=16  3*8=24  4*8=32  5*8=40  6*8=48  7*8=56  8*8=64</span>
<span class="line">        for(int i=1;i&lt;=8;i++){</span>
<span class="line">                System.out.print(i+&quot;*8=&quot;+i*8+&quot;\\t&quot;);</span>
<span class="line">        }</span>
<span class="line">        //换行</span>
<span class="line">        System.out.println();</span>
<span class="line">        */</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;*&quot;</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> i <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//换行</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>编译运行下:</p><p><img src="`+U+`" alt="image-20250725102920962"></p></blockquote><h4 id="_4-5-2-双重循环嵌套进阶练习-打印各种平面图形" tabindex="-1"><a class="header-anchor" href="#_4-5-2-双重循环嵌套进阶练习-打印各种平面图形"><span>4.5.2 双重循环嵌套进阶练习 - 打印各种平面图形</span></a></h4><h5 id="_4-5-2-1-长方形" tabindex="-1"><a class="header-anchor" href="#_4-5-2-1-长方形"><span>4.5.2.1 长方形</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRectangle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 打印1个 长9个*  宽度为4行 的 长方形</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//j:控制行数</span></span>
<span class="line">            <span class="token comment">//*********</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//i:控制*的个数</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//换行:</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>编译运行后如下:</p><p><img src="`+M+`" alt="image-20250725132754005"></p></blockquote><blockquote><p>若要正方形，则将行数 和 <code>*</code> 数量保持一致即可。</p></blockquote><h5 id="_4-5-2-2-平行四边形" tabindex="-1"><a class="header-anchor" href="#_4-5-2-2-平行四边形"><span>4.5.2.2 平行四边形</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestParallelogram</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//j:控制行数</span></span>
<span class="line">            <span class="token comment">//加入空格：</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//i:控制空格的个数</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//*********</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//i:控制*的个数</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//换行：</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>平行四边形的精髓则 前空格 后空格 递进</p><p>编译运行下如下：</p><p><img src="`+R+`" alt="image-20250725135056687"></p></blockquote><h5 id="_4-5-2-3-三角形" tabindex="-1"><a class="header-anchor" href="#_4-5-2-3-三角形"><span>4.5.2.3 三角形</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTriangle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 三角形</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//j:控制行数</span></span>
<span class="line">            <span class="token comment">//加入空格：</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//i:控制空格的个数</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//*********</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//i:控制*的个数</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//换行：</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>编译运行下如下：</p><p><img src="`+W+`" alt="image-20250725135338442"></p></blockquote><h5 id="_4-5-2-4-菱形" tabindex="-1"><a class="header-anchor" href="#_4-5-2-4-菱形"><span>4.5.2.4 菱形</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLozenge</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//上面三角形：</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//j:控制行数</span></span>
<span class="line">            <span class="token comment">//加入空格：</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//i:控制空格的个数</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//*********</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//i:控制*的个数</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//换行：</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//下面三角形：</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//j:控制行数</span></span>
<span class="line">            <span class="token comment">//加入空格：</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//i:控制空格的个数</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//*********</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//i:控制*的个数</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//换行：</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>编译运行下如下：</p><p><img src="`+P+`" alt="image-20250725135846151"></p></blockquote><h5 id="_4-5-2-5-空心菱形" tabindex="-1"><a class="header-anchor" href="#_4-5-2-5-空心菱形"><span>4.5.2.5 空心菱形</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHallowLozenge</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//上面三角形：</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//j:控制行数</span></span>
<span class="line">            <span class="token comment">//加入空格：</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//i:控制空格的个数</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//*********</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//i:控制*的个数</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//换行：</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//下面三角形：</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//j:控制行数</span></span>
<span class="line">            <span class="token comment">//加入空格：</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//i:控制空格的个数</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//*********</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//i:控制*的个数</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">//换行：</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>编译后运行如下:</p><p><img src="`+E+`" alt="image-20250725142003321"></p></blockquote><h4 id="_4-5-3-三重循环" tabindex="-1"><a class="header-anchor" href="#_4-5-3-三重循环"><span>4.5.3 三重循环</span></a></h4><blockquote><p>【1】二重循环可以帮我们解决：二元一次方程组的问题：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>b<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>b<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">&quot;----&quot;</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【2】三重循环可以帮我们解决：三元一次方程组的问题：</p><p>例子: <strong>百钱买百鸡</strong>： 公鸡5文钱一只，母鸡3文钱一只，小鸡3只一文钱， 用100文钱买一百只鸡,其中公鸡，母鸡，小鸡都必须要有，问公鸡，母鸡，小鸡要买多少只刚好凑足100文钱。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestForThree</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        百钱买百鸡：</span>
<span class="line">        公鸡5文钱一只，母鸡3文钱一只，小鸡3只一文钱，</span>
<span class="line">        用100文钱买一百只鸡,其中公鸡，母鸡，小鸡都必须要有，问公鸡，母鸡，小鸡要买多少只刚好凑足100文钱。</span>
<span class="line">        数学：</span>
<span class="line">        设未知数：</span>
<span class="line">        公鸡：x只</span>
<span class="line">        母鸡：y只</span>
<span class="line">        小鸡：z只</span>
<span class="line">        x+y+z=100只</span>
<span class="line">        5x+3y+z/3=100钱</span>
<span class="line">        麻烦方式：</span>
<span class="line">        for(int x=1;x&lt;=100;x++){</span>
<span class="line">                for(int y=1;y&lt;=100;y++){</span>
<span class="line">                        for(int z=1;z&lt;=100;z++){</span>
<span class="line">                                if((x+y+z==100)&amp;&amp;(5*x+3*y+z/3==100)&amp;&amp;(z%3==0)){</span>
<span class="line">                                        System.out.println(x+&quot;\\t&quot;+y+&quot;\\t&quot;+z);</span>
<span class="line">                                }</span>
<span class="line">                        }</span>
<span class="line">                }</span>
<span class="line">        }</span>
<span class="line">        */</span></span>
<span class="line">        <span class="token comment">//优化：</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token number">19</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> <span class="token number">31</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">-</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> y <span class="token operator">+</span> z <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>z <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>编译运行下:</p><p><img src="`+O+'" alt="image-20250725142530238"></p></blockquote><h2 id="【5】参考资料" tabindex="-1"><a class="header-anchor" href="#【5】参考资料"><span>【5】参考资料</span></a></h2><ul><li><a href="https://www.bilibili.com/video/BV1RK4y1g7A5/?spm_id_from=333.337.search-card.all.click&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">B站免费的马士兵java初级教程</a></li></ul>',29))])}const nn=i(X,[["render",Q]]),sn=JSON.parse('{"path":"/md/note/java/basic/basic_005.html","title":"JAVA基础知识 - 流程控制","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1753684520000,"contributors":[{"name":"qianpengzhan","username":"qianpengzhan","email":"873373549@qq.com","commits":2,"url":"https://github.com/qianpengzhan"},{"name":"钱鹏展","username":"","email":"873373549@qq.com","commits":3}],"changelog":[{"hash":"2bb13f62902ae4121dcff4be58735a2732f1e41d","time":1753684520000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"},{"hash":"c9d7f19a39a0f067143be0259d0e33bba6c55006","time":1753425998000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"},{"hash":"78978f9253da81b4fcd08e86538bdbf33fa48607","time":1748929004000,"email":"873373549@qq.com","author":"钱鹏展","message":"添加部分忽略"},{"hash":"d863387d62fb13ed083b72e20ebbe73c2dc65725","time":1732763898000,"email":"873373549@qq.com","author":"qianpengzhan","message":"init basic_005"},{"hash":"f18fed6742dd6e6e75b43978e8c74087635e5d65","time":1732615245000,"email":"873373549@qq.com","author":"qianpengzhan","message":"init"}]},"filePathRelative":"md/note/java/basic/basic_005.md"}');export{nn as comp,sn as data};
