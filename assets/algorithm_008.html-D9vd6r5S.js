import{_ as l,c as o,b as s,d as c,a as p,w as e,r as i,o as u,e as t}from"./app-GRT9i7xS.js";const r="/qianpengzhan/assets/image-20250819150247778-CGtklshj.png",k="/qianpengzhan/assets/image-20250819172911950-CP6t6Pbm.png",d={},m={class:"table-of-contents"};function v(b,n){const a=i("router-link");return u(),o("div",null,[n[9]||(n[9]=s("h1",{id:"算法-异或运算",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#算法-异或运算"},[s("span",null,"算法 - 异或运算")])],-1)),s("nav",m,[s("ul",null,[s("li",null,[p(a,{to:"#【1】定义"},{default:e(()=>n[0]||(n[0]=[t("【1】定义")])),_:1,__:[0]})]),s("li",null,[p(a,{to:"#【2】运算规则"},{default:e(()=>n[1]||(n[1]=[t("【2】运算规则")])),_:1,__:[1]})]),s("li",null,[p(a,{to:"#【3】主要特性"},{default:e(()=>n[2]||(n[2]=[t("【3】主要特性")])),_:1,__:[2]})]),s("li",null,[p(a,{to:"#【4】常用场景"},{default:e(()=>n[3]||(n[3]=[t("【4】常用场景")])),_:1,__:[3]})]),s("li",null,[p(a,{to:"#【5】代码示例"},{default:e(()=>n[4]||(n[4]=[t("【5】代码示例")])),_:1,__:[4]})]),s("li",null,[p(a,{to:"#【6】特殊的技巧案例"},{default:e(()=>n[5]||(n[5]=[t("【6】特殊的技巧案例")])),_:1,__:[5]}),s("ul",null,[s("li",null,[p(a,{to:"#【6-1】提取最右侧1"},{default:e(()=>n[6]||(n[6]=[t("【6.1】提取最右侧1")])),_:1,__:[6]})]),s("li",null,[p(a,{to:"#【6-2】2个奇数次的数"},{default:e(()=>n[7]||(n[7]=[t("【6.2】2个奇数次的数")])),_:1,__:[7]})])])]),s("li",null,[p(a,{to:"#【7】参考资料"},{default:e(()=>n[8]||(n[8]=[t("【7】参考资料")])),_:1,__:[8]})])])]),n[10]||(n[10]=c('<blockquote><p>说在前面的话，本文为个人学习<a href="https://www.bilibili.com/video/BV1Ef4y1T7Qi/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">B站免费的左程云算法结构基础课</a>后进行总结的文章，主要是以<code>Java</code>来运行算法.</p></blockquote><h2 id="【1】定义" tabindex="-1"><a class="header-anchor" href="#【1】定义"><span>【1】定义</span></a></h2><blockquote><p><b>异或运算（XOR）</b>是一种<b>二进制位运算</b>，符号通常表示为<code>^</code></p></blockquote><h2 id="【2】运算规则" tabindex="-1"><a class="header-anchor" href="#【2】运算规则"><span>【2】运算规则</span></a></h2><blockquote><ul><li>相同为0：<code>0 ^ 0 = 0, 1 ^ 1 = 1</code></li><li>相异为1：<code>0 ^ 1 = 1, 1 ^ 0 = 1</code></li></ul></blockquote><blockquote><p>总结： 不要记上面的公式，直接对数值进行2进制转换后，进行列竖式计算，2进制加法，无进位加法计算即可。例如：</p><p><img src="'+r+`" alt="image-20250819150247778"></p></blockquote><h2 id="【3】主要特性" tabindex="-1"><a class="header-anchor" href="#【3】主要特性"><span>【3】主要特性</span></a></h2><blockquote><ol><li>交换律：<code>a ^ b = b ^ a</code></li><li>结合律：<code>a ^ ( b ^ c) = (a ^ b ) ^ c</code></li><li>自反性：<code>a ^ a = 0</code></li><li>恒等性：<code>a ^ 0 = a</code></li><li>可逆性：<code>a ^ b ^ b = a</code></li></ol></blockquote><h2 id="【4】常用场景" tabindex="-1"><a class="header-anchor" href="#【4】常用场景"><span>【4】常用场景</span></a></h2><blockquote><ul><li>交换两个变量的值（无需临时变量）</li><li>数据加密/解密</li><li>校验数据完整性</li><li>寻找出现奇数次的数字</li><li>位操作算法</li></ul></blockquote><h2 id="【5】代码示例" tabindex="-1"><a class="header-anchor" href="#【5】代码示例"><span>【5】代码示例</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>business</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 异或运算测试</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/8/19 14:20</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XORTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 基本运算</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (0101 ^ 0011 = 0110 = 6)  输出6</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 交换变量 这个就是算法这块需要的</span></span>
<span class="line">        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 注意： 这里交换的时候 a b 2个值指向的内存不能是同一块内存</span></span>
<span class="line">        a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>   <span class="token comment">// 赋值a的操作 b的值不变为7  a = 6 ^ 7, b = 7</span></span>
<span class="line">        b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>   <span class="token comment">// 赋值b的操作 a的指不变为 6 ^ 7  a= 6 ^ 7, b = 6 ^ 7 ^ 7 = 6 ^ 0 = 6  自反性  恒等性</span></span>
<span class="line">        a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>   <span class="token comment">// 赋值a的操作 b的值不变为6  a = 6 ^ 7 ^ 6 = 0 ^ 7 = 7, b = 6</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 找出数组中唯一出现奇数次的数字</span></span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            result <span class="token operator">^=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 利用自反性 + 恒等性 = 可逆性</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;唯一出现奇数次的数字为：&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 简单加密</span></span>
<span class="line">        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token char">&#39;X&#39;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;加密前： &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encrypted <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>message<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> message<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            encrypted<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">^</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;加密后：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 简单解密</span></span>
<span class="line">        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decrypted <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>encrypted<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> encrypted<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            decrypted<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>encrypted<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;解密后的值： &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decrypted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>运行后的结果：</p><p>6 7 6 唯一出现奇数次的数字为：3 加密前： Hello World 加密后：=447x7*4&lt; 解密后的值： Hello World</p></blockquote><blockquote><p>解析：</p><ol><li>演示了异或运算的基本用法和特性</li><li>包含变量交换、查找奇数次数字等经典应用</li><li>实现了简单的加密解密功能</li><li>所有示例都有清晰的输出结果</li><li>代码可直接运行测试不同场景下的异或运算效果</li></ol></blockquote><h2 id="【6】特殊的技巧案例" tabindex="-1"><a class="header-anchor" href="#【6】特殊的技巧案例"><span>【6】特殊的技巧案例</span></a></h2><h3 id="【6-1】提取最右侧1" tabindex="-1"><a class="header-anchor" href="#【6-1】提取最右侧1"><span>【6.1】提取最右侧1</span></a></h3><blockquote><p>题目：1个正整数N, 提取出N的最右侧的1个1出来，得到的值</p></blockquote><p><img src="`+k+`" alt="image-20250819172911950"></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">        <span class="token comment">// 1个正整数N, 提取出N的最右侧的1个1出来，得到的值</span></span>
<span class="line">        <span class="token doc-comment comment">/**</span>
<span class="line">         * 36 ÷ 2 = 18 ... 余 0  ↑</span>
<span class="line">         * 18 ÷ 2 = 9  ... 余 0  ↑</span>
<span class="line">         * 9  ÷ 2 = 4  ... 余 1  ↑</span>
<span class="line">         * 4  ÷ 2 = 2  ... 余 0  ↑</span>
<span class="line">         * 2  ÷ 2 = 1  ... 余 0  ↑</span>
<span class="line">         * 1  ÷ 2 = 0  ... 余 1  ↑</span>
<span class="line">         */</span></span>
<span class="line">        <span class="token comment">// 36的2进制为: 00100100</span></span>
<span class="line">        <span class="token comment">// ~36为: 11011011</span></span>
<span class="line">        <span class="token comment">// ~36 + 1 为: 11011100</span></span>
<span class="line">        <span class="token comment">// 36 &amp; (~36 + 1) =</span></span>
<span class="line">        <span class="token doc-comment comment">/**</span>
<span class="line">         * 11011100</span>
<span class="line">         * 00100100</span>
<span class="line">         * --------</span>
<span class="line">         * 00000100 = 2^0 * 0 + 2^1 * 0 + 2^2 * 1 = 4</span>
<span class="line">         */</span></span>
<span class="line">        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">36</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> nOneResult <span class="token operator">=</span> n <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1个正整数N, 提取出N的最右侧的1个1出来，得到的值: &quot;</span> <span class="token operator">+</span> nOneResult<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【6-2】2个奇数次的数" tabindex="-1"><a class="header-anchor" href="#【6-2】2个奇数次的数"><span>【6.2】2个奇数次的数</span></a></h3><blockquote><p>题目： 一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两种数？</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两种数？</span></span>
<span class="line"><span class="token comment">// 这个问题会用到上面的提取出N的最右侧的1个1出来 得到的值的结论</span></span>
<span class="line"><span class="token comment">// 假设出现奇数次的两种数设为 a,b, 因为是两种数, 那么 a != b, 数组种的其他数均出现了偶数次.</span></span>
<span class="line"><span class="token comment">// 那么这个数组遍历进行异或最终的结果则为 xor = a ^ b ^ c ^ c ^ d ^ d ... = a ^ b  ,其他均为偶数次(自反性) = 0了</span></span>
<span class="line"><span class="token comment">// 因为 a != b 所以 xor = a ^ b 一定不等于 0 , 所以 xor的二进制数中的某一位(M)一定有1 也说明了 a  和 b 的 M位的数字一定不同</span></span>
<span class="line"><span class="token comment">// 要么 a的M位为1, b的M位为0; 要么 b的M位为1, a的M位为0;</span></span>
<span class="line"><span class="token comment">// 这样我们就可以把整个数组分为2类，1类是每个元素的二进制的M位为1, 1类是每个元素的二进制的M位为0</span></span>
<span class="line"><span class="token comment">// 这样我们只要提取出 xor 的最右侧的1 ，然后重新遍历1次数组, 继续每个异或, 就可以得到其中1个数 a / b 了</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrTwoOddNumber <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">twoOddNumber</span><span class="token punctuation">(</span>arrTwoOddNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两种数？</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">arr</span> 数组</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">twoOddNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> xor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        xor <span class="token operator">^=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// xor = a ^ b</span></span>
<span class="line">    <span class="token comment">// a != b ==&gt;  xor != 0</span></span>
<span class="line">    <span class="token comment">// xor 的二进制数上必然有1个位置是1 提取出来</span></span>
<span class="line">    <span class="token keyword">int</span> rightOne <span class="token operator">=</span> xor <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>xor <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 定义 xor&#39; = a / b</span></span>
<span class="line">    <span class="token keyword">int</span> dXor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// dXor = xor&#39;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 再次遍历 因为 xor 必有1个位置为1 则 rightOne 和 每个元素(相同位置是0) 异或 则 不等于0</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> rightOne<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            dXor <span class="token operator">^=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a = &quot;</span> <span class="token operator">+</span> dXor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;b = &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dXor <span class="token operator">^</span> xor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【7】参考资料" tabindex="-1"><a class="header-anchor" href="#【7】参考资料"><span>【7】参考资料</span></a></h2><ul><li><a href="https://www.bilibili.com/video/BV1Ef4y1T7Qi/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">B站免费的左程云算法结构基础课</a></li></ul>`,24))])}const g=l(d,[["render",v]]),y=JSON.parse('{"path":"/md/algorithm/algorithm_008.html","title":"算法 - 异或运算","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1756092625000,"contributors":[{"name":"钱鹏展","username":"","email":"873373549@qq.com","commits":5}],"changelog":[{"hash":"ce12c6cb5a196528519058b2a8da72cef946e855","time":1756092625000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"},{"hash":"ec7f7fd707c0e43d7c6b754b0986a2342710d7df","time":1755685021000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"},{"hash":"5fdd4f14d6f5577450d543062494d5562c49542b","time":1755591344000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"},{"hash":"8047cc4b13873a7f186d76e289f1fab4750d39ef","time":1755248680000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"},{"hash":"217cb3b10491c50e6c567ed02484095c99d3359c","time":1755239288000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"}]},"filePathRelative":"md/algorithm/algorithm_008.md"}');export{g as comp,y as data};
