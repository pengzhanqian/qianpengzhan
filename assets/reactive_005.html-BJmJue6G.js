import{_ as i,c as u,b as s,d as o,a,w as e,r as l,o as r,e as t}from"./app-GRT9i7xS.js";const k="/qianpengzhan/assets/image-20250709144609335-CSEBzLA8.png",d="/qianpengzhan/assets/image-20250709165722880-CpnOLpC-.png",v="/qianpengzhan/assets/image-20250709173259651-ZliQmfvA.png",m="/qianpengzhan/assets/image-20250709173342621-uxrot0yK.png",b="/qianpengzhan/assets/image-20250710103938447-BKumBmLZ.png",g="/qianpengzhan/assets/image-20250710141133617-CD-lDFSc.png",f="/qianpengzhan/assets/image-20250710150100114-z2s8e8Yb.png",h="/qianpengzhan/assets/image-20250710150126132-BLwEEhX0.png",w="/qianpengzhan/assets/image-20250710150202114-CRchQWtk.png",y="/qianpengzhan/assets/20250710-154540-18lsRXt2.gif",x="/qianpengzhan/assets/image-20250711095814716-M6bSxtwW.png",q="/qianpengzhan/assets/20250711_095328-_vfwu0Oh.gif",S="/qianpengzhan/assets/image-20250711102757989-BlVrfnHb.png",R="/qianpengzhan/assets/20250711_103008-PsTCD_mf.gif",M="/qianpengzhan/assets/image-20250714103647770-W6nlHp4x.png",F="/qianpengzhan/assets/image-20250714103710747-DH_97EVu.png",_="/qianpengzhan/assets/image-20250714163206529-CHr_gVt6.png",E={},C={class:"table-of-contents"};function H(j,n){const p=l("router-link"),c=l("Mermaid");return r(),u("div",null,[n[30]||(n[30]=s("h1",{id:"第五章-spring-webflux-框架",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#第五章-spring-webflux-框架"},[s("span",null,"第五章: Spring WebFlux 框架")])],-1)),s("nav",C,[s("ul",null,[s("li",null,[a(p,{to:"#【1】本章学习图解"},{default:e(()=>n[0]||(n[0]=[t("【1】本章学习图解")])),_:1,__:[0]})]),s("li",null,[a(p,{to:"#【2】响应式web和阻塞式web对比"},{default:e(()=>n[1]||(n[1]=[t("【2】响应式Web和阻塞式Web对比")])),_:1,__:[1]})]),s("li",null,[a(p,{to:"#【3】spring-webflux-的引入和介绍"},{default:e(()=>n[2]||(n[2]=[t("【3】Spring WebFlux 的引入和介绍")])),_:1,__:[2]}),s("ul",null,[s("li",null,[a(p,{to:"#_3-1-新建项目"},{default:e(()=>n[3]||(n[3]=[t("3.1 新建项目")])),_:1,__:[3]})]),s("li",null,[a(p,{to:"#_3-2-引入依赖"},{default:e(()=>n[4]||(n[4]=[t("3.2 引入依赖")])),_:1,__:[4]})]),s("li",null,[a(p,{to:"#_3-3-官网文档"},{default:e(()=>n[5]||(n[5]=[t("3.3 官网文档")])),_:1,__:[5]})]),s("li",null,[a(p,{to:"#_3-4-编程方式改变"},{default:e(()=>n[6]||(n[6]=[t("3.4 编程方式改变")])),_:1,__:[6]})]),s("li",null,[a(p,{to:"#_3-5-原生api搭建简单服务器"},{default:e(()=>n[7]||(n[7]=[t("3.5 原生API搭建简单服务器")])),_:1,__:[7]})])])]),s("li",null,[a(p,{to:"#【4】spring-webflux-controller"},{default:e(()=>n[8]||(n[8]=[t("【4】Spring WebFlux Controller")])),_:1,__:[8]})]),s("li",null,[a(p,{to:"#【5】server-send-event-sse-服务端事件推送"},{default:e(()=>n[9]||(n[9]=[t("【5】Server Send Event (SSE) 服务端事件推送")])),_:1,__:[9]}),s("ul",null,[s("li",null,[a(p,{to:"#_5-1-简单的例子"},{default:e(()=>n[10]||(n[10]=[t("5.1 简单的例子")])),_:1,__:[10]})]),s("li",null,[a(p,{to:"#_5-2-带有界面的例子"},{default:e(()=>n[11]||(n[11]=[t("5.2 带有界面的例子")])),_:1,__:[11]})]),s("li",null,[a(p,{to:"#_5-3-sse的完整api写法"},{default:e(()=>n[12]||(n[12]=[t("5.3 SSE的完整API写法")])),_:1,__:[12]})])])]),s("li",null,[a(p,{to:"#【6】spring-webflux-核心源码之-dispatcherhandler"},{default:e(()=>n[13]||(n[13]=[t("【6】Spring WebFlux 核心源码之 DispatcherHandler")])),_:1,__:[13]})]),s("li",null,[a(p,{to:"#【7】spring-webflux-核心之-全局异常处理"},{default:e(()=>n[14]||(n[14]=[t("【7】Spring WebFlux 核心之 全局异常处理")])),_:1,__:[14]})]),s("li",null,[a(p,{to:"#【8】spring-webflux-核心之-方法传参"},{default:e(()=>n[15]||(n[15]=[t("【8】Spring WebFlux 核心之 方法传参")])),_:1,__:[15]})]),s("li",null,[a(p,{to:"#【9】spring-webflux-核心之-返回值"},{default:e(()=>n[16]||(n[16]=[t("【9】Spring WebFlux 核心之 返回值")])),_:1,__:[16]})]),s("li",null,[a(p,{to:"#【10】spring-webflux-核心之-文件上传"},{default:e(()=>n[17]||(n[17]=[t("【10】Spring WebFlux 核心之 文件上传")])),_:1,__:[17]})]),s("li",null,[a(p,{to:"#【11】spring-webflux-核心之-flux自定义配置"},{default:e(()=>n[18]||(n[18]=[t("【11】Spring WebFlux 核心之 Flux自定义配置")])),_:1,__:[18]})]),s("li",null,[a(p,{to:"#【12】spring-webflux-核心之自定义filter"},{default:e(()=>n[19]||(n[19]=[t("【12】Spring WebFlux 核心之自定义Filter")])),_:1,__:[19]})]),s("li",null,[a(p,{to:"#【13】spring-webflux-单个请求的执行流程"},{default:e(()=>n[20]||(n[20]=[t("【13】Spring WebFlux 单个请求的执行流程")])),_:1,__:[20]})]),s("li",null,[a(p,{to:"#【14】spring-webflux-核心之-routerfunction"},{default:e(()=>n[21]||(n[21]=[t("【14】Spring WebFlux 核心之 RouterFunction")])),_:1,__:[21]}),s("ul",null,[s("li",null,[a(p,{to:"#_14-1-核心接口和协作关系"},{default:e(()=>n[22]||(n[22]=[t("14.1 核心接口和协作关系")])),_:1,__:[22]})]),s("li",null,[a(p,{to:"#_14-2-路由构建方式"},{default:e(()=>n[23]||(n[23]=[t("14.2 路由构建方式")])),_:1,__:[23]})]),s("li",null,[a(p,{to:"#_14-3-请求谓词-requestpredicate"},{default:e(()=>n[24]||(n[24]=[t("14.3 请求谓词（RequestPredicate）")])),_:1,__:[24]})]),s("li",null,[a(p,{to:"#_14-4-执行流程"},{default:e(()=>n[25]||(n[25]=[t("14.4 执行流程")])),_:1,__:[25]})]),s("li",null,[a(p,{to:"#_14-5-优于-controller进行处理"},{default:e(()=>n[26]||(n[26]=[t("14.5 优于@Controller进行处理")])),_:1,__:[26]})]),s("li",null,[a(p,{to:"#_14-6-注册"},{default:e(()=>n[27]||(n[27]=[t("14.6 注册")])),_:1,__:[27]})]),s("li",null,[a(p,{to:"#_14-7-错误处理"},{default:e(()=>n[28]||(n[28]=[t("14.7 错误处理")])),_:1,__:[28]})])])]),s("li",null,[a(p,{to:"#【15】参考资料"},{default:e(()=>n[29]||(n[29]=[t("【15】参考资料")])),_:1,__:[29]})])])]),n[31]||(n[31]=o('<blockquote><p>说在前面的话，本文为个人学习<a href="https://www.bilibili.com/video/BV1gsYEeLEuM?spm_id_from=333.788.videopod.episodes&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">SpringBoot3响应式编程精讲</a>后进行总结的文章，本文主要用于<b>响应式编程</b>。</p></blockquote><h2 id="【1】本章学习图解" tabindex="-1"><a class="header-anchor" href="#【1】本章学习图解"><span>【1】本章学习图解</span></a></h2><p><img src="'+k+'" alt="image-20250709144609335"></p><h2 id="【2】响应式web和阻塞式web对比" tabindex="-1"><a class="header-anchor" href="#【2】响应式web和阻塞式web对比"><span>【2】响应式Web和阻塞式Web对比</span></a></h2><blockquote><ul><li><code>Spring webFlux</code>: 底层完全是基于 <code>netty</code> + <code>reactor</code> + <code>springweb</code>完成的1个全异步非阻塞<strong>响应式Web架构</strong></li><li><strong>底层</strong>: <strong>异步 + 消息队列(内存级别) + 事件回调机制</strong> = <strong>整套系统</strong></li><li><strong>优点</strong> : 可以使用少量资源就可以处理大量的请求</li></ul></blockquote><p><img src="'+d+'" alt="image-20250709165722880"></p><blockquote><p><strong><code>Mon</code></strong> : <strong>返回0|1数据流</strong></p><p><strong><code>Flux</code></strong> : <strong>返回N数据流</strong></p></blockquote><h2 id="【3】spring-webflux-的引入和介绍" tabindex="-1"><a class="header-anchor" href="#【3】spring-webflux-的引入和介绍"><span>【3】Spring WebFlux 的引入和介绍</span></a></h2><blockquote><p>再次强调下,Spring WebFlux的底层容器不是<code>tomcat</code>,而是：</p><ul><li><strong>Netty</strong></li></ul></blockquote><h3 id="_3-1-新建项目" tabindex="-1"><a class="header-anchor" href="#_3-1-新建项目"><span>3.1 新建项目</span></a></h3><p><img src="'+v+'" alt="image-20250709173259651"></p><p><img src="'+m+`" alt="image-20250709173342621"></p><h3 id="_3-2-引入依赖" tabindex="-1"><a class="header-anchor" href="#_3-2-引入依赖"><span>3.2 引入依赖</span></a></h3><blockquote><p>在项目的<code>pom.xml</code>中加入如下依赖：</p></blockquote><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-官网文档" tabindex="-1"><a class="header-anchor" href="#_3-3-官网文档"><span>3.3 官网文档</span></a></h3><blockquote><p>所有的学习参考<a href="https://docs.spring.io/spring-framework/reference/6.2-SNAPSHOT/web/webflux.html" target="_blank" rel="noopener noreferrer">这里</a></p></blockquote><h3 id="_3-4-编程方式改变" tabindex="-1"><a class="header-anchor" href="#_3-4-编程方式改变"><span>3.4 编程方式改变</span></a></h3>`,18)),a(c,{code:"eJxLy8kvT85ILCpR8AnictSIVno6ce+T3Uue7ul/vmfa8xXdCsUlQEmlWE0uRwVdXTsFJ6AS5/y8kqL8nJzUIpC4E1jcGSgenFpUlpmcChJ0Bgu6AAVdHP1BAi5gAVeggKufC0gAANTKJuY="}),a(c,{code:"eJxLy8kvT85ILCpR8AnictSIVno6uffprilP9/Q/3zPt+YpuheISoKRSrCaXE1DSxdFf4dnUDc961z3bNeH9nh4gCURPdvQ+m7b2+ayWJ7v7ILJPd01+smPts/lLX6xf9KKh59ncpSATnIEmBKcWlWUmp4K4LkCuc35eSVF+Tk5qEUjEFSjybGv/i+UdT2euAAk4Kujq2ik4gUlnMOkCJl0VuADiH1Ok"}),n[32]||(n[32]=o('<blockquote><p>以前：浏览器--&gt; <code>Controller</code>--&gt;<code>Service</code>---&gt;<code>Dao</code>---&gt;数据库 ： 这是以往的<strong>阻塞式编程流程</strong></p><p>现在: DAO(查询得到数据源,是发布者) --&gt; <code>Service</code> --&gt; <code>Contorller</code> --&gt; 浏览器(订阅者) : 这是<strong>响应式编程</strong></p><p>在这其中，<code>service</code>, <code>controller</code> 则是中间处理器的作用.</p><p><code>Context</code> 则是承担着上下文的数据传递的作用。</p></blockquote><h3 id="_3-5-原生api搭建简单服务器" tabindex="-1"><a class="header-anchor" href="#_3-5-原生api搭建简单服务器"><span>3.5 原生API搭建简单服务器</span></a></h3><p><a href="https://docs.spring.io/spring-framework/reference/6.2-SNAPSHOT/web/webflux/reactive-spring.html" target="_blank" rel="noopener noreferrer">参照</a></p><p><img src="'+b+`" alt="image-20250710103938447"></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 函数式接口</span></span>
<span class="line"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span>reactive</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HttpHandler</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>webflux<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span></span><span class="token class-name">DataBuffer</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span></span><span class="token class-name">DataBufferFactory</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span></span><span class="token class-name">HttpHandler</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span></span><span class="token class-name">ReactorHttpHandlerAdapter</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpRequest</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpResponse</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>netty<span class="token punctuation">.</span></span><span class="token class-name">DisposableServer</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">HttpServer</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/10 9:58</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringWebFluxDemoApplication</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 快速编写一个可以处理http请求的服务器</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 1.创建一个可以处理http请求的处理器</span></span>
<span class="line">        <span class="token class-name">HttpHandler</span> httpHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span></span>
<span class="line">                                   <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Mono&lt;Void&gt; handle(ServerHttpRequest request, ServerHttpResponse response);</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请求进来了....&quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 这里我们在编写一段内容给浏览器响应</span></span>
<span class="line">            <span class="token class-name">String</span> respContent <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, Hello!&quot;</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">DataBufferFactory</span> dataBufferFactory <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">DataBuffer</span> dataBuffer <span class="token operator">=</span> dataBufferFactory<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>respContent<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 处理业务逻辑</span></span>
<span class="line">            <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>dataBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//            return response.setComplete();</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 2. 创建1个Reactor的Http请求的适配器</span></span>
<span class="line">        <span class="token class-name">ReactorHttpHandlerAdapter</span> adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactorHttpHandlerAdapter</span><span class="token punctuation">(</span>httpHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 3. 启动1个Netty服务器 监听8080端口 接收数据 拿到数据提交给 HttpHandler 进行业务处理</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        HttpServer.create()</span>
<span class="line">          .host(&quot;0.0.0.0&quot;)</span>
<span class="line">          .handle((req, res) -&gt; res.sendString(Flux.just(&quot;hello&quot;)))</span>
<span class="line">          .bind()</span>
<span class="line">          .block();</span>
<span class="line">         */</span></span>
<span class="line">        <span class="token comment">// reactor.netty.transport.ServerTransport$InetDisposableBind@1224144a</span></span>
<span class="line">        <span class="token class-name">DisposableServer</span> server <span class="token operator">=</span> <span class="token class-name">HttpServer</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">port</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">bindNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务器启动完成,监听8080端口...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 4. 阻塞住</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务停止..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>请求:</p><p><img src="`+g+`" alt="image-20250710141133617"></p></blockquote><h2 id="【4】spring-webflux-controller" tabindex="-1"><a class="header-anchor" href="#【4】spring-webflux-controller"><span>【4】Spring WebFlux Controller</span></a></h2><blockquote><p><code>SpringMVC</code>: <code>DispathcerServlet</code></p><p><code>SpringWebFlux</code>: <code>DispatherHandler</code></p></blockquote><blockquote><p><code>SpringWebFlux</code> 写<code>Controller</code>和<code>SpringMVC</code>差不多的。就是返回参数改为<code>Flux&lt;T&gt;</code>. <code>Mono&lt;T&gt;</code>即可。</p></blockquote><blockquote><p><code>SpringMVC</code>写法如下:</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>webflux<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/10 14:39</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MvcDemoController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello-world&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>SpringWebFlux</code>的写法如下:</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>webflux<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/10 14:39</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebFluxDemoController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/webflux/hello-world&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>服务启动：</p></blockquote><p><img src="`+f+'" alt="image-20250710150100114"></p><blockquote><p>访问如下:</p></blockquote><p><img src="'+h+'" alt="image-20250710150126132"></p><p><img src="'+w+`" alt="image-20250710150202114"></p><blockquote><p>故而: 以前<code>SpringMVC</code>怎么写<code>Controller</code>,<code>SpringWebFlux</code>可以无缝衔接的。但是底层需要自行改造为响应式编程。</p></blockquote><h2 id="【5】server-send-event-sse-服务端事件推送" tabindex="-1"><a class="header-anchor" href="#【5】server-send-event-sse-服务端事件推送"><span>【5】Server Send Event (SSE) 服务端事件推送</span></a></h2><h3 id="_5-1-简单的例子" tabindex="-1"><a class="header-anchor" href="#_5-1-简单的例子"><span>5.1 简单的例子</span></a></h3><blockquote><p>简单的例子：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>webflux<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/10 15:13</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SseController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 告诉前端数据类型是 事件流  text/event-stream</span></span>
<span class="line">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/sse&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">sse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token string">&quot;Hello-&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 每隔500毫秒发送浏览器1个字符串 直到结束</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">delayElements</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>启动服务后，访问会出现如下动图的展示：</p></blockquote><p><img src="`+y+`" alt="20250710-154540"></p><h3 id="_5-2-带有界面的例子" tabindex="-1"><a class="header-anchor" href="#_5-2-带有界面的例子"><span>5.2 带有界面的例子</span></a></h3><p><a href="http://www.axios-js.com/zh-cn/docs/" target="_blank" rel="noopener noreferrer">参照Axios的中文文档，它是专门可以处理SSE的数据接收</a></p><ul><li><p>在<code>resource</code>下创建<code>static</code>文件夹并且创建<code>index.html</code>文件</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>SSE数据展示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后引入<code>axios</code>，编写<code>axios</code>的请求代码，最终代码如下</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>SSE数据展示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sse<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> beige<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:8080&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">10000000</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// \`responseType\` 表示服务器响应的数据类型，可以是 &#39;arraybuffer&#39;, &#39;blob&#39;, &#39;document&#39;, &#39;json&#39;, &#39;text&#39;, &#39;stream&#39;</span></span>
<span class="line">        <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">&#39;stream&#39;</span><span class="token punctuation">,</span> <span class="token comment">// default</span></span>
<span class="line">        <span class="token literal-property property">responseEncoding</span><span class="token operator">:</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token comment">// default</span></span>
<span class="line">        <span class="token comment">// \`onDownloadProgress\` 允许为下载处理进度事件</span></span>
<span class="line">        <span class="token function-variable function">onDownloadProgress</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">progressEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 对原生进度事件的处理</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;progressEvent=&gt;&quot;</span><span class="token punctuation">,</span> progressEvent<span class="token punctuation">.</span>event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span></span>
<span class="line">            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;sse&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> progressEvent<span class="token punctuation">.</span>event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>responseText<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;data:&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 为给定 ID 的 user 创建请求</span></span>
<span class="line">    instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/sse&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>启动服务：</p><p><img src="`+x+'" alt="image-20250711095814716"></p><p>结果如下:</p><p><img src="'+q+`" alt="20250711_095328"></p></blockquote><div class="hint-container warning"><p class="hint-container-title">注意事项</p><blockquote><p>为了和其他的服务进行区分，在<code>resources</code>下创建1个配置文件<code>application.yaml</code>,设置端口为9000</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后<code>index.html</code>中的前端访问端口地址改为 9000</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line">...</span>
<span class="line">const instance = axios.create({</span>
<span class="line">        baseURL: &#39;http://localhost:9000&#39;,</span>
<span class="line">        timeout: 10000000,</span>
<span class="line">        // \`responseType\` 表示服务器响应的数据类型，可以是 &#39;arraybuffer&#39;, &#39;blob&#39;, &#39;document&#39;, &#39;json&#39;, &#39;text&#39;, &#39;stream&#39;</span>
<span class="line">        responseType: &#39;stream&#39;, // default</span>
<span class="line">        responseEncoding: &#39;utf8&#39;, // default</span>
<span class="line">        // \`onDownloadProgress\` 允许为下载处理进度事件</span>
<span class="line">        onDownloadProgress: function (progressEvent) {</span>
<span class="line">            // 对原生进度事件的处理</span>
<span class="line">            console.log(&quot;progressEvent=&gt;&quot;, progressEvent.event.currentTarget.responseText)</span>
<span class="line">            document.getElementById(&quot;sse&quot;).innerHTML = 			progressEvent.event.currentTarget.responseText.replaceAll(&quot;data:&quot;, &quot;&quot;)</span>
<span class="line">        },</span>
<span class="line">    });</span>
<span class="line">...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></div></li></ul><h3 id="_5-3-sse的完整api写法" tabindex="-1"><a class="header-anchor" href="#_5-3-sse的完整api写法"><span>5.3 SSE的完整API写法</span></a></h3><blockquote><p><code>ServerSentEvent&lt;String&gt;</code>的源码如下:</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ServerSentEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Nullable</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Nullable</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> event<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Nullable</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Duration</span> retry<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Nullable</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> comment<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Nullable</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>完整代码如下:</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * sse的完整写法是返回1个<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Flux</span></span>&lt;ServerSentEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">&gt;</span></span>&gt;<span class="token punctuation">}</span></span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Flux</span></span>&lt;ServerSentEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">&gt;</span></span>&gt;<span class="token punctuation">}</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/sse2&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerSentEvent</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">sse2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token class-name">ServerSentEvent</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&quot;hello-&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string">&quot;comment-&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token string">&quot;event-&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">// 每隔500毫秒发送浏览器1个字符串 直到结束</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">delayElements</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>然后 <code>index.html</code>改一下如下:</p></blockquote><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:9000&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">10000000</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// \`responseType\` 表示服务器响应的数据类型，可以是 &#39;arraybuffer&#39;, &#39;blob&#39;, &#39;document&#39;, &#39;json&#39;, &#39;text&#39;, &#39;stream&#39;</span></span>
<span class="line">        <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">&#39;stream&#39;</span><span class="token punctuation">,</span> <span class="token comment">// default</span></span>
<span class="line">        <span class="token literal-property property">responseEncoding</span><span class="token operator">:</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token comment">// default</span></span>
<span class="line">        <span class="token comment">// \`onDownloadProgress\` 允许为下载处理进度事件</span></span>
<span class="line">        <span class="token function-variable function">onDownloadProgress</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">progressEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 对原生进度事件的处理</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;progressEvent=&gt;&quot;</span><span class="token punctuation">,</span> progressEvent<span class="token punctuation">.</span>event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span></span>
<span class="line">            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;sse&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> progressEvent<span class="token punctuation">.</span>event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>responseText</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 为给定 ID 的 user 创建请求</span></span>
<span class="line">    instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/sse2&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>启动服务器:</p></blockquote><p><img src="`+S+'" alt="image-20250711102757989"></p><blockquote><p>进入界面如下:</p></blockquote><p><img src="'+R+`" alt="20250711_103008"></p><h2 id="【6】spring-webflux-核心源码之-dispatcherhandler" tabindex="-1"><a class="header-anchor" href="#【6】spring-webflux-核心源码之-dispatcherhandler"><span>【6】Spring WebFlux 核心源码之 DispatcherHandler</span></a></h2><blockquote><p>这里我们对比进行学习，我们都知道如下：</p><p><code>SpringMVC</code>: <code>DispathcerServlet</code></p><p><code>SpringWebFlux</code>: <code>DispatherHandler</code></p></blockquote><blockquote><p>以往，<code>SpringMVC中</code>，<code>DispatcherServlet</code>有1个方法<code>doDispatch()</code>方法来处理所有的请求</p><p>对应的，<code>Spring WebFlux</code>中, <code>DispatcherHandler</code>中有1个方法<code>handle()</code>方法来处理所以的请求，我们看下其源码如下:</p></blockquote><ul><li>首先看组件源码</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">	<span class="token annotation punctuation">@Nullable</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMapping</span><span class="token punctuation">&gt;</span></span> handlerMappings<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Nullable</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerAdapter</span><span class="token punctuation">&gt;</span></span> handlerAdapters<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Nullable</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerResultHandler</span><span class="token punctuation">&gt;</span></span> resultHandlers<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以看到，这三个属性我们在<code>SpringMVC</code>中都是非常熟悉的,后续我们一个个的介绍. 再看下核心方法<code>handle()</code></p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token function">createNotFoundError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CorsUtils</span><span class="token punctuation">.</span><span class="token function">isPreFlightRequest</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token function">handlePreFlight</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings<span class="token punctuation">)</span></span>
<span class="line">				<span class="token punctuation">.</span><span class="token function">concatMap</span><span class="token punctuation">(</span>mapping <span class="token operator">-&gt;</span> mapping<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">				<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">				<span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token function">createNotFoundError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">				<span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span>ex <span class="token operator">-&gt;</span> <span class="token function">handleResultMono</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">				<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>handler <span class="token operator">-&gt;</span> <span class="token function">handleRequestWith</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>我们对这段代码加以分析后如下:</p><ol><li><p>请求和响应都封装在<code>ServerWebExchange</code>这个对象中，由<code>handle()</code>方法进行处理</p></li><li><p>如果没有对应的请求映射器<code>handlerMappings</code> == null, 则直接返回404; 若存在映射 则继续</p></li><li><p>进行跨域请求工具的检查，若发现存在跨域或者是预检的过滤等满足，则进行跨域请求的处理，不满足的返回403 未授权；不是跨域的则继续。</p></li><li><p>进行<code>flux</code>的流式操作.迭代所有的<code>HandlerMappings</code>映射器列表,找到匹配的那个请求映射器，然后通过<code>concatMap</code>映射为<code>handlerAdapt</code>适配器，</p><p>没找到就返回404，找到就了就进行业务处理，业务处理由错误，通过<code>.onErrorResume(ex -&gt; handleResultMono(exchange, Mono.error(ex)))</code>进行处理</p></li></ol></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 请求和响应都封装在\`ServerWebExchange\`这个对象中，由\`handle()\`方法进行处理	</span></span>
<span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果没有对应的请求映射器\`handlerMappings\` == null, 则直接返回404; 若存在映射 则继续</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">createNotFoundError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 进行跨域请求工具的检查，若发现存在跨域或者是预检的过滤等满足，则进行跨域请求的处理，不满足的返回403 未授权；不是跨域的则继续。</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CorsUtils</span><span class="token punctuation">.</span><span class="token function">isPreFlightRequest</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">handlePreFlight</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 进行\`flux\`的流式操作.迭代所有的\`HandlerMappings\`映射器列表,找到匹配的那个请求映射器，然后通过\`concatMap\`映射为\`handlerAdapt\`适配器，</span></span>
<span class="line"><span class="token comment">//没找到就返回404，找到就了就进行业务处理，业务处理由错误，通过\`.onErrorResume(ex -&gt; handleResultMono(exchange, Mono.error(ex)))\`进行处理</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings<span class="token punctuation">)</span> <span class="token comment">// 遍历所有的映射器列表</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">concatMap</span><span class="token punctuation">(</span>mapping <span class="token operator">-&gt;</span> mapping<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 请求映射器转为适配器</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token function">createNotFoundError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 找不到映射器 适配器 则返回 404</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span>ex <span class="token operator">-&gt;</span> <span class="token function">handleResultMono</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 业务的报错处理</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>handler <span class="token operator">-&gt;</span> <span class="token function">handleRequestWith</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 业务处理</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 源码的核心之一</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleRequestWith</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">nullSafeEquals</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// CORS rejection</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerAdapter</span> adapter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>adapter<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerResult</span><span class="token punctuation">&gt;</span></span> resultMono <span class="token operator">=</span> adapter<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token function">handleResultMono</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> resultMono<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;No HandlerAdapter: &quot;</span> <span class="token operator">+</span> handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 源码的核心之一</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleResultMono</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerResult</span><span class="token punctuation">&gt;</span></span> resultMono<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerAdapter</span> adapter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>adapter <span class="token keyword">instanceof</span> <span class="token class-name">DispatchExceptionHandler</span> exceptionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                resultMono <span class="token operator">=</span> resultMono<span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span>ex2 <span class="token operator">-&gt;</span> exceptionHandler<span class="token punctuation">.</span><span class="token function">handleError</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> ex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> resultMono<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>result <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> voidMono <span class="token operator">=</span> <span class="token function">handleResult</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token string">&quot;Handler &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            voidMono <span class="token operator">=</span> voidMono<span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span>ex <span class="token operator">-&gt;</span></span>
<span class="line">                    result<span class="token punctuation">.</span><span class="token function">getExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleError</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>result2 <span class="token operator">-&gt;</span></span>
<span class="line">                            <span class="token function">handleResult</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> result2<span class="token punctuation">,</span> <span class="token string">&quot;Exception handler &quot;</span> <span class="token operator">+</span></span>
<span class="line">                                    result2<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, error=\\&quot;&quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> voidMono<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 处理跨域请求</span></span>
<span class="line"><span class="token comment">// 返回 未授权  403</span></span>
<span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handlePreFlight</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">:</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">concatMap</span><span class="token punctuation">(</span>mapping <span class="token operator">-&gt;</span> mapping<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 直接判断请求方法是否是Options 或者请求头中的  ORIGIN 等存在跨域的标签</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPreFlightRequest</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">OPTIONS</span></span>
<span class="line">            <span class="token operator">&amp;&amp;</span> headers<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ORIGIN</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">&amp;&amp;</span> headers<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ACCESS_CONTROL_REQUEST_METHOD</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 统一的返回404的代码</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">createNotFoundError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// defer的作用是 做全异步 背压 等到流到这里的时候才进行业务处理 封装响应然后终结流</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Exception</span> ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseStatusException</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">NOT_FOUND</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【7】spring-webflux-核心之-全局异常处理" tabindex="-1"><a class="header-anchor" href="#【7】spring-webflux-核心之-全局异常处理"><span>【7】Spring WebFlux 核心之 全局异常处理</span></a></h2><blockquote><p>以前，我们<code>SpringMVC</code>的全局异常处理如下: 我们会使用<code>@ResponseBoy</code> <code>@ControllerAdvice</code> 2个注解， 合起来就是1个注解<code>@RestControllerAdvice</code>,</p><p>那么，<code>SpringWebFlux</code>则使用同样的注解即可，然后和以前一样，拦截具体的错误注解，进行返回<code>Mono</code> 或者 <code>Flux</code>即可。代码如下：</p></blockquote><blockquote><p>项目中创建1个包<code>com.xxx.xxx.exception</code>, 然后在这个包下创建1个类<code>GlobalExceptionHandler</code></p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>webflux<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>exception</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestControllerAdvice</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerWebExchange</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URI</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * // 全局异常处理器</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/14 9:37</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Slf4j</span></span>
<span class="line"><span class="token annotation punctuation">@RestControllerAdvice</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 计算异常处理器</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">arithmeticException</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">,</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">URI</span> uri <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;uri: {}, ArithmeticException:{}&quot;</span><span class="token punctuation">,</span> uri<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;计算异常: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>然后在<code>controller</code>包下创建1个测试类<code>ExceptionTestController</code>,如下:</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>webflux<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/14 10:18</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionTestController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/test-arithmetic-exception&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">testArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token number">10</span> <span class="token operator">/</span> i<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>启动服务：</p><p><img src="`+M+'" alt="image-20250714103647770"></p><p>访问请求地址:</p><p><img src="'+F+`" alt="image-20250714103710747"></p><p>查看日志：</p><p>2025-07-14T10:34:43.595+08:00 ERROR 15336 --- [ctor-http-nio-2] c.l.s.w.d.e.GlobalExceptionHandler : uri: http://localhost:9000/test-arithmetic-exception, ArithmeticException:/ by zero</p></blockquote><blockquote><p>至此，我们一个简单的全局异常就OK，那么剩下的我们常用的异常按照这个格式，仿照写出来即可。</p></blockquote><h2 id="【8】spring-webflux-核心之-方法传参" tabindex="-1"><a class="header-anchor" href="#【8】spring-webflux-核心之-方法传参"><span>【8】Spring WebFlux 核心之 方法传参</span></a></h2><p><a href="https://docs.spring.io/spring-framework/reference/web/webflux/controller/ann-methods/arguments.html" target="_blank" rel="noopener noreferrer">这里可以参照官网</a></p><blockquote><p>以前<code>SpringMVC</code>的时候<code>Controller</code>的方法中的可以使用的很多参数我们<code>SrpingWebFlux</code>可以继续沿用，但是也有很多无法使用了，具体参考如下官网表格。</p></blockquote><table><thead><tr><th>Controller method argument</th><th>Description</th></tr></thead><tbody><tr><td><code>ServerWebExchange</code></td><td>访问完整的ServerWebExchange-HTTP请求和响应、请求和会话属性、checkNotModified方法等的容器。</td></tr><tr><td><code>ServerHttpRequest</code>, <code>ServerHttpResponse</code></td><td>访问HTTP请求或响应。</td></tr><tr><td><code>WebSession</code></td><td>访问会话。除非添加属性，否则这不会强制开始新会话。支持反应式类型。</td></tr><tr><td><code>java.security.Principal</code></td><td>当前经过身份验证的用户-如果已知，可能是特定的主体实现类。支持反应式类型。</td></tr><tr><td><code>org.springframework.http.HttpMethod</code></td><td>请求的HTTP方法。</td></tr><tr><td><code>java.util.Locale</code></td><td>国际化。<br>当前请求区域设置，由可用的最具体的LocaleResolver确定-实际上，配置的LocaleResolver/LocaleContextResolver。</td></tr><tr><td><code>java.util.TimeZone</code> + <code>java.time.ZoneId</code></td><td>时区<br>与当前请求相关联的时区，由LocaleContextResolver确定。</td></tr><tr><td><code>@PathVariable</code></td><td>路径变量</td></tr><tr><td><code>@MatrixVariable</code></td><td>矩阵变量</td></tr><tr><td><code>@RequestParam</code></td><td>请求参数</td></tr><tr><td><code>@RequestHeader</code></td><td>请求头参数</td></tr><tr><td><code>@CookieValue</code></td><td>获取Cookie参数</td></tr><tr><td><code>@RequestBody</code></td><td>获取请求体参数 Body内容 Post 文件上传</td></tr><tr><td><code>HttpEntity&lt;B&gt;</code></td><td>封装后的请求体对象</td></tr><tr><td><code>@RequestPart</code></td><td>文件上传使用的数据<code>multipart/form-data</code></td></tr><tr><td><code>java.util.Map</code> or <code>org.springframework.ui.Model</code></td><td><code>Map</code>, <code>ModelMap</code></td></tr><tr><td><code>@ModelAttribute</code></td><td>对象属性</td></tr><tr><td><code>Errors</code> or <code>BindingResult</code></td><td>数据校验 错误封装</td></tr><tr><td><code>SessionStatus</code> + class-level <code>@SessionAttributes</code></td><td>用于标记表单处理完成，这会触发清理通过类级<code>@SessionAttributes</code>注释声明的会话属性。有关更多详细信息，请参阅<code>@SessionAttributes</code>。</td></tr><tr><td><code>UriComponentsBuilder</code></td><td>用于准备相对于当前请求的主机、端口、方案和上下文路径的URL。请参阅URI链接。</td></tr><tr><td><code>@SessionAttribute</code></td><td>用于访问任何会话属性-与作为类级<code>@SessionAttribute</code>声明的结果存储在会话中的模型属性相反。有关更多详细信息，请参阅<code>@SessionAttribute</code>。</td></tr><tr><td><code>@RequestAttribute</code></td><td>转发请求的请求域数据<br>用于访问请求属性。有关更多详细信息，请参阅<code>@RequestAttribute</code>。</td></tr><tr><td>Any other argument</td><td>如果方法参数参数与上述任何参数都不匹配，则默认将其解析为@RequestParam（如果它是简单类型，由BeanUtils#isSimpleProperty确定），否则解析为<code>@ModelAttribute</code><br>所有得参数都可以作为参数:<br>1. 基本类型，等于标注<code>@RequesParam</code><br>2.对象类型，等于标注<code>@ModelAttribute</code></td></tr></tbody></table><h2 id="【9】spring-webflux-核心之-返回值" tabindex="-1"><a class="header-anchor" href="#【9】spring-webflux-核心之-返回值"><span>【9】Spring WebFlux 核心之 返回值</span></a></h2><blockquote><p>这里的<code>SSE</code>和<code>websocket</code>的区别</p><ul><li><code>SSE</code>: 属于<strong>单工</strong> , 请求过去后，等待服务端源源不断的数据</li><li><code>Websocket</code>: 属于<strong>双工</strong> ，双方建立连接，可以任意交互。</li></ul></blockquote><p><a href="https://docs.spring.io/spring-framework/reference/web/webflux/controller/ann-methods/return-types.html" target="_blank" rel="noopener noreferrer">这里可以参照官网</a></p><table><thead><tr><th>Controller method return value</th><th>Description</th></tr></thead><tbody><tr><td><code>@ResponseBody</code></td><td>返回值通过<code>HttpMessageWriter</code>实例编码并写入响应。请参阅<code>@ResponseseBody</code>。<br>其实就是把响应数据写出去，如果是对象，可以自动转为<code>Json</code></td></tr><tr><td><code>HttpEntity&lt;B&gt;</code>, <code>ResponseEntity&lt;B&gt;</code></td><td>返回值指定完整的响应，包括HTTP标头，正文通过<code>HttpMessageWriter</code>实例编码并写入响应。请参阅响应实体。</td></tr><tr><td><code>HttpHeaders</code></td><td>用于返回带有标头但没有正文的响应。</td></tr><tr><td><code>ErrorResponse</code>, <code>ProblemDetail</code></td><td>快速错误响应</td></tr><tr><td><code>String</code></td><td>要通过<code>ViewResolver</code>实例解析并与隐式模型一起使用的视图名称——通过命令对象和<code>@ModelAtual</code>方法确定。处理程序方法还可以通过声明模型参数（如前所述）以编程方式丰富模型。</td></tr><tr><td><code>View</code></td><td>用于与隐式模型一起呈现的视图实例——通过命令对象和<code>@Model</code>属性方法确定。处理程序方法还可以通过声明模型参数（如前所述）以编程方式丰富模型。<br>直接返回视图</td></tr><tr><td><code>java.util.Map</code>, <code>org.springframework.ui.Model</code></td><td>要添加到隐式模型的属性，视图名称根据请求路径隐式确定。</td></tr><tr><td><code>@ModelAttribute</code></td><td>要添加到模型的属性，视图名称根据请求路径隐式确定。</td></tr><tr><td><code>Rendering</code></td><td>用于模型和视图渲染场景的API。</td></tr><tr><td><code>FragmentsRendering</code>, <code>Flux&lt;Fragment&gt;</code>, <code>Collection&lt;Fragment&gt;</code></td><td>用于渲染一个或多个片段，每个片段都有自己的视图和模型。有关详细信息，请参阅超文本标记语言片段。</td></tr><tr><td><code>void</code></td><td>无返回值</td></tr><tr><td><code>Flux&lt;ServerSentEvent&gt;</code>, <code>Observable&lt;ServerSentEvent&gt;</code>, or other reactive type</td><td>发送服务器发送的事件。当只需要写入数据时，可以省略ServerSentEvent包装器（但是，必须通过生成属性在映射中请求或声明text/event-stream）。</td></tr><tr><td>Other return values</td><td>如果返回值以任何其他方式仍未解析，则将其视为模型属性，除非它是由BeanUtils#isSimpleProperty确定的简单类型，在这种情况下它仍未解析。</td></tr></tbody></table><h2 id="【10】spring-webflux-核心之-文件上传" tabindex="-1"><a class="header-anchor" href="#【10】spring-webflux-核心之-文件上传"><span>【10】Spring WebFlux 核心之 文件上传</span></a></h2><blockquote><p><code>Spring WebFlux</code> 多了数据流文件上传的新写法，同时兼容<code>SpringMVC</code>的旧写法</p></blockquote><blockquote><p>旧写法:</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyForm</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">private</span> <span class="token class-name">FilePart</span> file<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUploadController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/form&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleFormUpload</span><span class="token punctuation">(</span><span class="token class-name">MyForm</span> form<span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> errors<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">// ...</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>增加的新写法:</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">&quot;meta-data&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Part</span> metadata<span class="token punctuation">,</span> </span>
<span class="line">		<span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">&quot;file-data&quot;</span><span class="token punctuation">)</span> <span class="token class-name">FilePart</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">	<span class="token comment">// ...</span></span>
<span class="line">    <span class="token comment">// 这里的filePart 是异步非阻塞的 并且底层使用了零拷贝技术 性能高</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【11】spring-webflux-核心之-flux自定义配置" tabindex="-1"><a class="header-anchor" href="#【11】spring-webflux-核心之-flux自定义配置"><span>【11】Spring WebFlux 核心之 Flux自定义配置</span></a></h2><blockquote><p>容器中注入<code>WevFluxConfigurer</code>这个类型的组件即可，然后重新底层的逻辑。</p></blockquote><p><img src="`+_+`" alt="image-20250714163206529"></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>webflux<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token class-name">FormatterRegistry</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>codec<span class="token punctuation">.</span></span><span class="token class-name">ServerCodecConfigurer</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">MessageCodesResolver</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">Validator</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>accept<span class="token punctuation">.</span></span><span class="token class-name">RequestedContentTypeResolverBuilder</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>result<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ArgumentResolverConfigurer</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">WebSocketService</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/14 16:31</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebFluxConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebFluxConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//想要修改哪个就改为自定义的逻辑即可。</span></span>
<span class="line">    <span class="token comment">//同时我们这里可以增加自定义的Filter</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureHttpMessageCodecs</span><span class="token punctuation">(</span><span class="token class-name">ServerCodecConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WebFluxConfigurer</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configureHttpMessageCodecs</span><span class="token punctuation">(</span>configurer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span><span class="token class-name">FormatterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WebFluxConfigurer</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addFormatters</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Validator</span> <span class="token function">getValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">WebFluxConfigurer</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MessageCodesResolver</span> <span class="token function">getMessageCodesResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">WebFluxConfigurer</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getMessageCodesResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WebFluxConfigurer</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addCorsMappings</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureBlockingExecution</span><span class="token punctuation">(</span><span class="token class-name">BlockingExecutionConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WebFluxConfigurer</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configureBlockingExecution</span><span class="token punctuation">(</span>configurer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureContentTypeResolver</span><span class="token punctuation">(</span><span class="token class-name">RequestedContentTypeResolverBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WebFluxConfigurer</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configureContentTypeResolver</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatching</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WebFluxConfigurer</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configurePathMatching</span><span class="token punctuation">(</span>configurer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureArgumentResolvers</span><span class="token punctuation">(</span><span class="token class-name">ArgumentResolverConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WebFluxConfigurer</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configureArgumentResolvers</span><span class="token punctuation">(</span>configurer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureViewResolvers</span><span class="token punctuation">(</span><span class="token class-name">ViewResolverRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WebFluxConfigurer</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configureViewResolvers</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WebFluxConfigurer</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">WebSocketService</span> <span class="token function">getWebSocketService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">WebFluxConfigurer</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getWebSocketService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【12】spring-webflux-核心之自定义filter" tabindex="-1"><a class="header-anchor" href="#【12】spring-webflux-核心之自定义filter"><span>【12】Spring WebFlux 核心之自定义Filter</span></a></h2><blockquote><p>很简单，自定义一个类实现<code>org.springframework.web.server.WebFilter</code>，然后编写好自己的过滤逻辑，加上注解<code>@Component</code>注册到容器中即可。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>webflux<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>filters</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerWebExchange</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">WebFilter</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">WebFilterChain</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/14 16:37</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">WebFilter</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">WebFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 注意这里的操作都是异步非阻塞的，使用流的API才有效</span></span>
<span class="line">        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【13】spring-webflux-单个请求的执行流程" tabindex="-1"><a class="header-anchor" href="#【13】spring-webflux-单个请求的执行流程"><span>【13】Spring WebFlux 单个请求的执行流程</span></a></h2><blockquote><p>根据Spring WebFlux的执行流程，确定流程图的主要节点，这些节点包括：</p><ul><li>‌<strong>浏览器请求</strong>‌：用户通过浏览器发起HTTP请求。</li><li>‌<strong>DispatcherHandler</strong>‌：Spring WebFlux的核心组件，负责接收和分发请求。</li><li>‌<strong>上下文处理</strong>‌：使用Reactive上下文传递数据。</li><li>‌<strong>过滤器处理</strong>‌：WebFilter对请求和响应进行预处理和后处理。</li><li>‌<strong>HandlerMapping</strong>‌：确定请求应该由哪个处理器处理。</li><li>‌<strong>HandlerAdapter</strong>‌：调用处理器执行实际业务逻辑。</li><li>‌<strong>AOP处理</strong>‌：在处理器执行前后进行切面处理。</li><li>‌<strong>处理器（Handler）执行</strong>‌：执行实际的业务逻辑。</li><li>‌<strong>结果处理</strong>‌：处理器返回结果，由HandlerResultHandler处理并生成最终响应。</li><li>‌<strong>响应返回给浏览器</strong>‌：最终的响应通过HTTP协议返回给浏览器。</li></ul></blockquote>`,80)),a(c,{code:"eJx1kd9KAkEUh+/PU8zlBPoKwbrruipRRNDF0MWmWwqLbutEXYZopmUJSqSFJAh2k9VFJEn4Ms7s7lu0jVts/66+A+f7zTkzs2MWDzI53aZoQwEJE/584Y5OWPduawlimCj5kqXTTM6wNb2QNQ0bzSf3bDhmw4rTOl5oMibrxt6+UaJysUCNQ+o7jfnklF/W/K6CyaaxreZN6ofdWY1Ph34MsXrTeft2TPwfsXX+Q1QxCZZZ0S0rX9hF7sMLfyrzq1v2WAmbiS9TyuoWDTynV2Hjvtetzic91hh4R2Wv2gzHNEyk1bU/VkwGjV8rpTD5uLtdNP1Zkc+nCk/h9ZE7OPPVNCbOtM37N4t8hLWb7LUTcWcddt13pt3wB4CEotFlFIOYoAyyoAKKoAqqYAISghpogilICSYRJEURRxAXRRpBWhQSvAOh8eh9"}),n[33]||(n[33]=o(`<h2 id="【14】spring-webflux-核心之-routerfunction" tabindex="-1"><a class="header-anchor" href="#【14】spring-webflux-核心之-routerfunction"><span>【14】Spring WebFlux 核心之 RouterFunction</span></a></h2><blockquote><p><code>Spring WebFlux</code>包含<code>WebFlux. fn</code>，这是一个轻量级泛函编程模型，其中函数用于路由和处理请求，合约旨在实现不变性。它是基于注释的编程模型的替代方案，但在其他方面运行在相同的<code>Reactive Core</code>基础上。</p></blockquote><blockquote><p><code>Spring WebFlux</code> 的 <code>RouterFunction</code> 是函数式编程模型的核心组件，用于定义请求路由规则并关联对应的处理器逻辑。以下是其核心机制与使用方法的系统解析：</p></blockquote><h3 id="_14-1-核心接口和协作关系" tabindex="-1"><a class="header-anchor" href="#_14-1-核心接口和协作关系"><span>14.1 核心接口和协作关系</span></a></h3><blockquote><p>在<code>Spring WebFlux</code> 的 <code>RouterFunction</code> 中，<code>HTTP</code>请求由<code>HandlerFunction</code>处理：该函数接受<code>ServerRequest</code>并返回延迟的<code>ServerResponse</code>（即<code>Mono&lt;ServerResponse&gt;</code>）。请求和响应对象都有不可变的契约，提供对<code>HTTP</code>请求和响应的<code>JDK 8</code>友好访问。<code>HandlerFunction</code>相当于基于注释的编程模型中的<code>@RequestMap</code>方法的主体。</p></blockquote><blockquote><p>传入的请求被路由到带有<code>RouterFunction</code>的处理函数：一个接受<code>ServerRequest</code>并返回延迟的<code>HandlerFunction</code>（即<code>Mono&lt;HandlerFunction&gt;</code>）的函数。当路由器函数匹配时，将返回一个处理函数；否则为空的Mono。<code>RouterFunction</code>等价于<code>@RequestMap</code>注释，但主要区别在于路由器函数不仅提供数据，还提供行为。</p></blockquote><h4 id="_14-1-1routerfunction‌" tabindex="-1"><a class="header-anchor" href="#_14-1-1routerfunction‌"><span>14.1.1<code>RouterFunction</code>‌</span></a></h4><blockquote><p>通过 <code>RequestPredicate</code> 匹配请求路径、方法、头等条件，并返回关联的 <code>HandlerFunction</code>（匹配成功）或 <code>Optional.empty()</code>（匹配失败）。本质是函数式接口：<code>ServerRequest → Optional&lt;HandlerFunction&gt;</code>‌。</p></blockquote><h4 id="_14-1-2-handlerfunction" tabindex="-1"><a class="header-anchor" href="#_14-1-2-handlerfunction"><span>14.1.2 <code>HandlerFunction</code></span></a></h4><blockquote><p>处理业务逻辑，接收 <code>ServerRequest</code> 并返回 <code>ServerResponse</code>（封装为 <code>Mono&lt;ServerResponse&gt;</code> 或 <code>Flux&lt;ServerResponse&gt;</code>）‌</p></blockquote><h3 id="_14-2-路由构建方式" tabindex="-1"><a class="header-anchor" href="#_14-2-路由构建方式"><span>14.2 路由构建方式</span></a></h3><h4 id="_14-2-1-链式-api-推荐" tabindex="-1"><a class="header-anchor" href="#_14-2-1-链式-api-推荐"><span>14.2.1 链式 API（推荐）</span></a></h4><p>支持模块化组合路由规则，嵌套路由（<code>nest()</code>）和条件组合：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">PersonRepository</span> repository <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token class-name">PersonHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonHandler</span><span class="token punctuation">(</span>repository<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">&gt;</span></span> route <span class="token operator">=</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line">	<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/person/{id}&quot;</span><span class="token punctuation">,</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">getPerson</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/person&quot;</span><span class="token punctuation">,</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">listPeople</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/person&quot;</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">createPerson</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonHandler</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">listPeople</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">// ...</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">// ...</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">// ...</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_14-2-2-静态方法" tabindex="-1"><a class="header-anchor" href="#_14-2-2-静态方法"><span>14.2.2 静态方法</span></a></h4><p>直接通过 <code>RouterFunctions.route(RequestPredicate, HandlerFunction)</code> 创建简单路由‌。</p><h3 id="_14-3-请求谓词-requestpredicate" tabindex="-1"><a class="header-anchor" href="#_14-3-请求谓词-requestpredicate"><span>14.3 请求谓词（RequestPredicate）</span></a></h3><p>用于扩展路由匹配条件，支持路径、请求头、参数等验证‌26：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">&gt;</span></span> route <span class="token operator">=</span> <span class="token class-name">RouterFunctions</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">,</span> </span>
<span class="line">         <span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">queryParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> value <span class="token operator">-&gt;</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 必须包含name参数</span></span>
<span class="line">         handler<span class="token operator">::</span><span class="token function">getUserById</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用谓词包括：</p><ul><li><code>RequestPredicates.path(String path)</code>：路径匹配</li><li><code>RequestPredicates.accept(MediaType)</code>：内容类型验证</li><li><code>RequestPredicates.and()</code>/<code>or()</code>：逻辑组合‌。</li></ul><h3 id="_14-4-执行流程" tabindex="-1"><a class="header-anchor" href="#_14-4-执行流程"><span>14.4 执行流程</span></a></h3><ol><li><strong>请求分发</strong>‌ <code>DispatcherHandler</code> 遍历所有 <code>RouterFunction</code>，调用其 <code>route()</code> 方法匹配请求‌</li><li><strong>处理器调用</strong>‌ 匹配成功后，通过 <code>HandlerAdapter</code> 执行 <code>HandlerFunction</code> 并生成响应‌。</li><li><strong>响应式流水线</strong>‌ 全程非阻塞，依赖 Reactor 的 <code>Mono</code>/<code>Flux</code> 实现背压管理‌。</li></ol><h3 id="_14-5-优于-controller进行处理" tabindex="-1"><a class="header-anchor" href="#_14-5-优于-controller进行处理"><span>14.5 优于@Controller进行处理</span></a></h3><blockquote><p>若存在<code>RouterFunction</code> 和 <code>@Controller</code> 的时候，<code>RouterFunction</code>的优先级更高。</p></blockquote><h3 id="_14-6-注册" tabindex="-1"><a class="header-anchor" href="#_14-6-注册"><span>14.6 注册</span></a></h3><blockquote><p>需要放入<code>WebFluxConfigurer</code>中进行注册到容器中才能生效。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebFluxConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Bean</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">routerFunctionA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">// ...</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Bean</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">routerFunctionB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">// ...</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureHttpMessageCodecs</span><span class="token punctuation">(</span><span class="token class-name">ServerCodecConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">// configure message conversion...</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">// configure CORS...</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureViewResolvers</span><span class="token punctuation">(</span><span class="token class-name">ViewResolverRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">// configure view resolution for HTML rendering...</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-7-错误处理" tabindex="-1"><a class="header-anchor" href="#_14-7-错误处理"><span>14.7 错误处理</span></a></h3><p>需通过 <code>WebFilter</code> 或 <code>HandlerFilterFunction</code> 捕获异常，无法直接使用 <code>@ControllerAdvice</code>‌69：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token class-name">WebFilter</span> <span class="token function">globalExceptionFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span><span class="token class-name">MyException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>通过以上机制，<code>RouterFunction</code> 实现了高效灵活的路由分发，是构建响应式 Web 应用的核心支柱之一‌。</p><h2 id="【15】参考资料" tabindex="-1"><a class="header-anchor" href="#【15】参考资料"><span>【15】参考资料</span></a></h2><ul><li><a href="https://www.bilibili.com/video/BV1gsYEeLEuM?spm_id_from=333.788.videopod.episodes&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">SpringBoot3响应式编程精讲</a></li><li><a href="https://docs.spring.io/spring-boot/reference/web/reactive.html" target="_blank" rel="noopener noreferrer">官方SpringBoot3.5.3-SpringWebFlux指导</a></li></ul>`,35))])}const T=i(E,[["render",H]]),A=JSON.parse('{"path":"/md/note/reactive/reactive_005.html","title":"第五章: Spring WebFlux 框架","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1753684520000,"contributors":[{"name":"钱鹏展","username":"","email":"873373549@qq.com","commits":8}],"changelog":[{"hash":"2bb13f62902ae4121dcff4be58735a2732f1e41d","time":1753684520000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"},{"hash":"2c51260c3e312d6ca04bfc93854f014061104fa6","time":1752486107000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"},{"hash":"52ba92596c4f634ec77074e90baa6b9cfec7bc3f","time":1752473437000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"},{"hash":"ffaf296b09121d1283ce0733cd0c4f4f7194823e","time":1752455086000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"},{"hash":"d00f384206e8b13b4a0ba56473ab541b39ff43d0","time":1752141341000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"},{"hash":"9001006476b9e8dbddd8125b7365ba6bdccdbb52","time":1752055073000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"},{"hash":"9e2c8d5af29c1795b803b1099638fd647f79f931","time":1752042688000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"},{"hash":"4ea33341761afcd5c93660f415365711d628c071","time":1752042418000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"}]},"filePathRelative":"md/note/reactive/reactive_005.md"}');export{T as comp,A as data};
