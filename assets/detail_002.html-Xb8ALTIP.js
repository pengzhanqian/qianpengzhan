import{_ as l,c as i,b as s,d as o,a as t,w as p,r as c,o as u,e}from"./app-GRT9i7xS.js";const r={},d={class:"table-of-contents"};function k(m,n){const a=c("router-link");return u(),i("div",null,[n[11]||(n[11]=s("h1",{id:"java代码细节-可变参数-varargs",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#java代码细节-可变参数-varargs"},[s("span",null,"JAVA代码细节 - 可变参数(Varargs)")])],-1)),s("nav",d,[s("ul",null,[s("li",null,[t(a,{to:"#【1】基本概念"},{default:p(()=>n[0]||(n[0]=[e("【1】基本概念")])),_:1,__:[0]})]),s("li",null,[t(a,{to:"#【2】核心特性"},{default:p(()=>n[1]||(n[1]=[e("【2】核心特性")])),_:1,__:[1]})]),s("li",null,[t(a,{to:"#【3】使用示例"},{default:p(()=>n[2]||(n[2]=[e("【3】使用示例")])),_:1,__:[2]}),s("ul",null,[s("li",null,[t(a,{to:"#_3-1-基础用法"},{default:p(()=>n[3]||(n[3]=[e("3.1 基础用法")])),_:1,__:[3]})]),s("li",null,[t(a,{to:"#_3-2-与其他参数配合"},{default:p(()=>n[4]||(n[4]=[e("3.2 与其他参数配合")])),_:1,__:[4]})])])]),s("li",null,[t(a,{to:"#【4】注意事项"},{default:p(()=>n[5]||(n[5]=[e("【4】注意事项")])),_:1,__:[5]})]),s("li",null,[t(a,{to:"#【5】最佳实践"},{default:p(()=>n[6]||(n[6]=[e("【5】最佳实践")])),_:1,__:[6]})]),s("li",null,[t(a,{to:"#【6】实际应用场景"},{default:p(()=>n[7]||(n[7]=[e("【6】实际应用场景")])),_:1,__:[7]})]),s("li",null,[t(a,{to:"#【7】与数组参数的区别"},{default:p(()=>n[8]||(n[8]=[e("【7】与数组参数的区别")])),_:1,__:[8]})]),s("li",null,[t(a,{to:"#【8】扩展知识"},{default:p(()=>n[9]||(n[9]=[e("【8】扩展知识")])),_:1,__:[9]})]),s("li",null,[t(a,{to:"#【9】日常开发注意事项"},{default:p(()=>n[10]||(n[10]=[e("【9】日常开发注意事项")])),_:1,__:[10]})])])]),n[12]||(n[12]=o(`<blockquote><p>说在前面的话，本文为日常积累的一些<code>Java</code>相关代码细节积累。</p></blockquote><h2 id="【1】基本概念" tabindex="-1"><a class="header-anchor" href="#【1】基本概念"><span>【1】基本概念</span></a></h2><p>可变参数(<code>Variable Arguments</code>)是Java 5引入的特性，允许方法接受‌<strong>零个或多个</strong>‌指定类型的参数。</p><p>语法格式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodName</span><span class="token punctuation">(</span>dataType<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 方法体</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【2】核心特性" tabindex="-1"><a class="header-anchor" href="#【2】核心特性"><span>【2】核心特性</span></a></h2><ul><li><b>三个点(...)</b> 表示可变参数</li><li>可变参数在方法内部作为‌<strong>数组</strong>‌处理</li><li>必须是方法的‌<strong>最后一个参数</strong>‌</li><li>一个方法只能有‌<strong>一个</strong>‌可变参数</li></ul><h2 id="【3】使用示例" tabindex="-1"><a class="header-anchor" href="#【3】使用示例"><span>【3】使用示例</span></a></h2><h3 id="_3-1-基础用法" tabindex="-1"><a class="header-anchor" href="#_3-1-基础用法"><span>3.1 基础用法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        total <span class="token operator">+=</span> num<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> total<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 调用方式</span></span>
<span class="line"><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回6</span></span>
<span class="line"><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回15</span></span>
<span class="line"><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 返回0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-与其他参数配合" tabindex="-1"><a class="header-anchor" href="#_3-2-与其他参数配合"><span>3.2 与其他参数配合</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 调用</span></span>
<span class="line"><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token string">&quot;Fruits&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【4】注意事项" tabindex="-1"><a class="header-anchor" href="#【4】注意事项"><span>【4】注意事项</span></a></h2><ul><li><strong>重载问题</strong>‌：可变参数方法可能造成方法重载歧义</li><li>‌<strong>性能考虑</strong>‌：频繁调用会创建多个数组对象</li><li>‌<strong>null处理</strong>‌：传入null时需要特别处理</li><li>‌<strong>类型安全</strong>‌：编译器不会检查所有参数类型是否一致</li></ul><h2 id="【5】最佳实践" tabindex="-1"><a class="header-anchor" href="#【5】最佳实践"><span>【5】最佳实践</span></a></h2><ul><li>优先使用集合类型(如List)替代可变参数（当API稳定性重要时）</li><li>添加清晰的文档说明参数要求</li><li>考虑提供重载方法优化常见用例</li><li>对可变参数进行非空检查</li></ul><h2 id="【6】实际应用场景" tabindex="-1"><a class="header-anchor" href="#【6】实际应用场景"><span>【6】实际应用场景</span></a></h2><ol><li>日志工具类方法</li><li>字符串拼接/格式化</li><li>数学计算工具类</li><li>测试断言方法</li><li>命令行参数处理</li></ol><h2 id="【7】与数组参数的区别" tabindex="-1"><a class="header-anchor" href="#【7】与数组参数的区别"><span>【7】与数组参数的区别</span></a></h2><table><thead><tr><th>特性</th><th>可变参数</th><th>数组参数</th></tr></thead><tbody><tr><td>调用语法</td><td>可直接传多个值</td><td>必须包装成数组</td></tr><tr><td>空参数</td><td>允许不传参数</td><td>必须显式传null或空数组</td></tr><tr><td>方法内部</td><td>当作数组处理</td><td>本身就是数组</td></tr><tr><td>重载优先级</td><td>低于固定参数方法</td><td>与普通方法同级</td></tr></tbody></table><h2 id="【8】扩展知识" tabindex="-1"><a class="header-anchor" href="#【8】扩展知识"><span>【8】扩展知识</span></a></h2><p>Java编译器对可变参数的处理实际上是：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 源代码</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 编译后等价于</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最新Java版本(17+)中，可变参数可以与<code>@SafeVarargs</code>注解配合使用，消除泛型可变参数的警告。</p><h2 id="【9】日常开发注意事项" tabindex="-1"><a class="header-anchor" href="#【9】日常开发注意事项"><span>【9】日常开发注意事项</span></a></h2><blockquote><ul><li>可变参数：作用提供了一个方法，参数的个数是可变的 ,解决了部分方法的重载问题 <ul><li>int...num</li><li>double...num</li><li>boolean...num</li></ul></li><li>可变参数在JDK1.5之后加入的新特性</li><li>方法的内部对可变参数的处理跟数组是一样</li><li>可变参数和其他数据一起作为形参的时候，可变参数一定要放在最后</li><li>我们自己在写代码的时候，建议不要使用可变参数。</li><li>1个方法最多只有1个可变参数</li></ul></blockquote>`,26))])}const b=l(r,[["render",k]]),h=JSON.parse('{"path":"/md/note/java/detail/detail_002.html","title":"JAVA代码细节 - 可变参数(Varargs)","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1753775347000,"contributors":[{"name":"钱鹏展","username":"","email":"873373549@qq.com","commits":1}],"changelog":[{"hash":"521e859fa1a0fb6f2d390c68ad85252b043dd085","time":1753775347000,"email":"873373549@qq.com","author":"钱鹏展","message":"提奥"}]},"filePathRelative":"md/note/java/detail/detail_002.md"}');export{b as comp,h as data};
