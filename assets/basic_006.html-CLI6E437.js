import{_ as u,c as r,b as n,d as o,a as p,w as e,e as a,r as c,o as d}from"./app-GRT9i7xS.js";const k={},m={class:"table-of-contents"},b={class:"hint-container info"};function v(g,s){const l=c("router-link"),i=c("Mermaid"),t=c("font");return d(),r("div",null,[s[29]||(s[29]=n("h1",{id:"java基础知识-方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java基础知识-方法"},[n("span",null,"JAVA基础知识 - 方法")])],-1)),n("nav",m,[n("ul",null,[n("li",null,[p(l,{to:"#【1】什么是方法"},{default:e(()=>s[0]||(s[0]=[a("【1】什么是方法?")])),_:1,__:[0]})]),n("li",null,[p(l,{to:"#【2】方法的声明格式"},{default:e(()=>s[1]||(s[1]=[a("【2】方法的声明格式")])),_:1,__:[1]})]),n("li",null,[p(l,{to:"#【3】方法的调用方式"},{default:e(()=>s[2]||(s[2]=[a("【3】方法的调用方式")])),_:1,__:[2]})]),n("li",null,[p(l,{to:"#【4】-方法的详细说明"},{default:e(()=>s[3]||(s[3]=[a("【4】 方法的详细说明")])),_:1,__:[3]})]),n("li",null,[p(l,{to:"#【5】方法的代码示例"},{default:e(()=>s[4]||(s[4]=[a("【5】方法的代码示例")])),_:1,__:[4]})]),n("li",null,[p(l,{to:"#【6】方法总结"},{default:e(()=>s[5]||(s[5]=[a("【6】方法总结")])),_:1,__:[5]})]),n("li",null,[p(l,{to:"#【7】方法的重载"},{default:e(()=>s[6]||(s[6]=[a("【7】方法的重载")])),_:1,__:[6]}),n("ul",null,[n("li",null,[p(l,{to:"#_7-1-什么是方法的重载"},{default:e(()=>s[7]||(s[7]=[a("7.1 什么是方法的重载")])),_:1,__:[7]})]),n("li",null,[p(l,{to:"#_7-2-构成方法重载的条件"},{default:e(()=>s[8]||(s[8]=[a("7.2 构成方法重载的条件")])),_:1,__:[8]})]),n("li",null,[p(l,{to:"#_7-3-代码示例"},{default:e(()=>s[9]||(s[9]=[a("7.3 代码示例")])),_:1,__:[9]})]),n("li",null,[p(l,{to:"#_7-4-重载总结"},{default:e(()=>s[10]||(s[10]=[a("7.4 重载总结")])),_:1,__:[10]})])])]),n("li",null,[p(l,{to:"#【8】参考资料"},{default:e(()=>s[11]||(s[11]=[a("【8】参考资料")])),_:1,__:[11]})])])]),s[30]||(s[30]=o('<blockquote><p>说在前面的话，本文为个人学习<a href="https://www.bilibili.com/video/BV1RK4y1g7A5/?spm_id_from=333.337.search-card.all.click&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">B站免费的马士兵java初级教程</a>后进行总结的文章，本文主要用于<b>JAVA基础知识</b>。</p></blockquote><h2 id="【1】什么是方法" tabindex="-1"><a class="header-anchor" href="#【1】什么是方法"><span>【1】什么是方法?</span></a></h2><blockquote><p><b>方法(<code>method</code>)</b> 就是一段用来完成特定功能的代码片段，类似于其它语言的函数(<code>function</code>)。</p><p><b>方法</b>用于定义该类或该类的实例的行为特征和功能实现。</p><p><b>方法</b>是类和对象行为特征的抽象。</p><p><b>方法</b>很类似于面向过程中的函数。面向过程中，函数是最基本单位，整个程序由一个个函数调用组成。面向对象中，整个程序的基本单位是类，<b>方法</b>是从属于类和对象的。</p><p><b>方法</b>在被调用的时候，1个方法，<code>JVM</code>就会在内存虚拟机栈中创建1个<b>栈帧</b>。</p><p><b>栈帧</b> 用于存储:</p><ul><li>方法中定义的局部变量表</li><li>操作数栈</li><li>方法返回地址</li><li>动态连接</li></ul></blockquote>',3)),n("blockquote",null,[s[12]||(s[12]=o(`<p>例子：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">callB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 调用点位置：地址【0x105】</span></span>
<span class="line">    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 返回后继续执行的位置：地址【0x108】</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">callB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b>栈帧</b>创建的过程:</p>`,3)),p(i,{code:"eJxLL0osyFDwCeLKTczMe7ag4+mO5Qq6unYKNU/7up+2Lq1RSE7MyXGCSHAhsaPBbAUI5/nuyc/mtbzfM4tL4enGhpfNK572z3jZ3v9i4Qqg2POVu7gUnk3ufbJ3zrOpG4AaYGIv9k95Onve0zkbns5tAIoZVBgaWMRycQEAONtRZw=="}),s[13]||(s[13]=o("<p>当 <code>callB()</code>执行完毕（遇到<code>return</code>或执行到方法结尾）：</p><ul><li><code>JVM</code>从当前栈帧（<code>callB</code>）中读取‌<b>返回地址(0x108)</b> ‌</li><li>弹出<code>callB</code>栈帧</li><li>将程序计数器（<code>PC</code>）设置为 ‌<strong>0x108</strong>‌</li><li>继续执行<code>main()</code>中<code>int b=2;</code>的代码</li></ul><hr>",3))]),s[31]||(s[31]=o(`<h2 id="【2】方法的声明格式" tabindex="-1"><a class="header-anchor" href="#【2】方法的声明格式"><span>【2】方法的声明格式</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token punctuation">[</span>修饰符<span class="token number">1</span>  修饰符<span class="token number">2</span>  …<span class="token punctuation">]</span>  返回值类型    方法名<span class="token punctuation">(</span>形式参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Java</span>语句；… … …</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【3】方法的调用方式" tabindex="-1"><a class="header-anchor" href="#【3】方法的调用方式"><span>【3】方法的调用方式</span></a></h2>`,3)),n("blockquote",null,[p(t,{style:{color:"orange"}},{default:e(()=>s[14]||(s[14]=[n("b",null,"对象名.方法名(实参列表)",-1)])),_:1,__:[14]})]),s[32]||(s[32]=n("h2",{id:"【4】-方法的详细说明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【4】-方法的详细说明"},[n("span",null,"【4】 方法的详细说明")])],-1)),n("blockquote",null,[n("ul",null,[n("li",null,[p(t,{style:{color:"orange"}},{default:e(()=>s[15]||(s[15]=[n("b",null,"形式参数",-1)])),_:1,__:[15]}),s[16]||(s[16]=a(" ：在方法声明时用于接收外界传入的数据。"))]),n("li",null,[p(t,{style:{color:"orange"}},{default:e(()=>s[17]||(s[17]=[n("b",null,"实参",-1)])),_:1,__:[17]}),s[18]||(s[18]=a("：调用方法时实际传给方法的数据。"))]),n("li",null,[p(t,{style:{color:"orange"}},{default:e(()=>s[19]||(s[19]=[n("b",null,"返回值",-1)])),_:1,__:[19]}),s[20]||(s[20]=a("：方法在执行完毕后返还给调用它的环境的数据。"))]),n("li",null,[p(t,{style:{color:"orange"}},{default:e(()=>s[21]||(s[21]=[n("b",null,"返回值类型",-1)])),_:1,__:[21]}),s[22]||(s[22]=a("：事先约定的返回值的数据类型，如无返回值，必须显示指定为为void。"))])])]),s[33]||(s[33]=o(`<h2 id="【5】方法的代码示例" tabindex="-1"><a class="header-anchor" href="#【5】方法的代码示例"><span>【5】方法的代码示例</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Method01</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//方法的定义：（写方法）</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        sum <span class="token operator">+=</span> num1<span class="token punctuation">;</span></span>
<span class="line">        sum <span class="token operator">+=</span> num2<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> sum<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>然后编译为<code>.class</code>文件</p><p><code> javac -encoding utf-8 .\\Method01.java</code></p><p>得到1个<code>.class</code>文件 <code>Method01.class</code></p><p>然后再使用命令行将其编译为字节码文件</p><p><code>javap -v -p Method01.lcass</code></p><p>得到如下代码:</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"> <span class="token class-name">Last</span> modified <span class="token number">2025</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">;</span> size <span class="token number">484</span> bytes</span>
<span class="line">  <span class="token constant">MD5</span> checksum b7d64f502de97f0edc7919de8d115a55</span>
<span class="line">  <span class="token class-name">Compiled</span> from <span class="token string">&quot;Method01.java&quot;</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Method01</span></span>
<span class="line">  minor version<span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">  major version<span class="token operator">:</span> <span class="token number">52</span></span>
<span class="line">  flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_SUPER</span></span>
<span class="line"><span class="token class-name">Constant</span> pool<span class="token operator">:</span></span>
<span class="line">   #<span class="token number">1</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">6.</span>#<span class="token number">17</span>         <span class="token comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line">   #<span class="token number">2</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">5.</span>#<span class="token number">18</span>         <span class="token comment">// Method01.add:(II)I</span></span>
<span class="line">   #<span class="token number">3</span> <span class="token operator">=</span> <span class="token class-name">Fieldref</span>           #<span class="token number">19.</span>#<span class="token number">20</span>        <span class="token comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line">   #<span class="token number">4</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">21.</span>#<span class="token number">22</span>        <span class="token comment">// java/io/PrintStream.println:(I)V</span></span>
<span class="line">   #<span class="token number">5</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">23</span>            <span class="token comment">// Method01</span></span>
<span class="line">   #<span class="token number">6</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">24</span>            <span class="token comment">// java/lang/Object</span></span>
<span class="line">   #<span class="token number">7</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span></span>
<span class="line">   #<span class="token number">8</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">   #<span class="token number">9</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Code</span></span>
<span class="line">  #<span class="token number">10</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">LineNumberTable</span></span>
<span class="line">  #<span class="token number">11</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               add</span>
<span class="line">  #<span class="token number">12</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token constant">II</span><span class="token punctuation">)</span><span class="token class-name">I</span></span>
<span class="line">  #<span class="token number">13</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               main</span>
<span class="line">  #<span class="token number">14</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">  #<span class="token number">15</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">SourceFile</span></span>
<span class="line">  #<span class="token number">16</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Method01</span><span class="token punctuation">.</span>java</span>
<span class="line">  #<span class="token number">17</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">7</span><span class="token operator">:</span>#<span class="token number">8</span>          <span class="token comment">// &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line">  #<span class="token number">18</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">11</span><span class="token operator">:</span>#<span class="token number">12</span>        <span class="token comment">// add:(II)I</span></span>
<span class="line">  #<span class="token number">19</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">25</span>            <span class="token comment">// java/lang/System</span></span>
<span class="line">  #<span class="token number">20</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">26</span><span class="token operator">:</span>#<span class="token number">27</span>        <span class="token comment">// out:Ljava/io/PrintStream;</span></span>
<span class="line">  #<span class="token number">21</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">28</span>            <span class="token comment">// java/io/PrintStream</span></span>
<span class="line">  #<span class="token number">22</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">29</span><span class="token operator">:</span>#<span class="token number">30</span>        <span class="token comment">// println:(I)V</span></span>
<span class="line">  #<span class="token number">23</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Method01</span></span>
<span class="line">  #<span class="token number">24</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span></span>
<span class="line">  #<span class="token number">25</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">System</span></span>
<span class="line">  #<span class="token number">26</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               out</span>
<span class="line">  #<span class="token number">27</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Ljava</span><span class="token operator">/</span>io<span class="token operator">/</span><span class="token class-name">PrintStream</span><span class="token punctuation">;</span></span>
<span class="line">  #<span class="token number">28</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>io<span class="token operator">/</span><span class="token class-name">PrintStream</span></span>
<span class="line">  #<span class="token number">29</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               println</span>
<span class="line">  #<span class="token number">30</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token class-name">I</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">Method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">    flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span></span>
<span class="line">    <span class="token class-name">Code</span><span class="token operator">:</span></span>
<span class="line">      stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span></span>
<span class="line">         <span class="token number">0</span><span class="token operator">:</span> aload_0</span>
<span class="line">         <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line">         <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span></span>
<span class="line">      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span></span>
<span class="line">        line <span class="token number">1</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">//这就是1个方法  1个独立的栈帧</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token constant">II</span><span class="token punctuation">)</span><span class="token class-name">I</span></span>
<span class="line">    flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_STATIC</span></span>
<span class="line">    <span class="token class-name">Code</span><span class="token operator">:</span></span>
<span class="line">      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">2</span></span>
<span class="line">         <span class="token number">0</span><span class="token operator">:</span> iconst_0</span>
<span class="line">         <span class="token number">1</span><span class="token operator">:</span> istore_2</span>
<span class="line">         <span class="token number">2</span><span class="token operator">:</span> iload_2</span>
<span class="line">         <span class="token number">3</span><span class="token operator">:</span> iload_0</span>
<span class="line">         <span class="token number">4</span><span class="token operator">:</span> iadd</span>
<span class="line">         <span class="token number">5</span><span class="token operator">:</span> istore_2</span>
<span class="line">         <span class="token number">6</span><span class="token operator">:</span> iload_2</span>
<span class="line">         <span class="token number">7</span><span class="token operator">:</span> iload_1</span>
<span class="line">         <span class="token number">8</span><span class="token operator">:</span> iadd</span>
<span class="line">         <span class="token number">9</span><span class="token operator">:</span> istore_2</span>
<span class="line">        <span class="token number">10</span><span class="token operator">:</span> iload_2</span>
<span class="line">        <span class="token number">11</span><span class="token operator">:</span> ireturn</span>
<span class="line">      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span></span>
<span class="line">        line <span class="token number">4</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">        line <span class="token number">5</span><span class="token operator">:</span> <span class="token number">2</span></span>
<span class="line">        line <span class="token number">6</span><span class="token operator">:</span> <span class="token number">6</span></span>
<span class="line">        line <span class="token number">7</span><span class="token operator">:</span> <span class="token number">10</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">//这就是1个方法  1个独立的栈帧</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">    flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_STATIC</span></span>
<span class="line">    <span class="token class-name">Code</span><span class="token operator">:</span></span>
<span class="line">      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span></span>
<span class="line">         <span class="token number">0</span><span class="token operator">:</span> bipush        <span class="token number">10</span></span>
<span class="line">         <span class="token number">2</span><span class="token operator">:</span> bipush        <span class="token number">20</span></span>
<span class="line">         <span class="token number">4</span><span class="token operator">:</span> invokestatic  #<span class="token number">2</span>                  <span class="token comment">// Method add:(II)I</span></span>
<span class="line">         <span class="token number">7</span><span class="token operator">:</span> istore_1</span>
<span class="line">         <span class="token number">8</span><span class="token operator">:</span> getstatic     #<span class="token number">3</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line">        <span class="token number">11</span><span class="token operator">:</span> iload_1</span>
<span class="line">        <span class="token number">12</span><span class="token operator">:</span> invokevirtual #<span class="token number">4</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span></span>
<span class="line">        <span class="token number">15</span><span class="token operator">:</span> <span class="token keyword">return</span></span>
<span class="line">      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span></span>
<span class="line">        line <span class="token number">11</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">        line <span class="token number">12</span><span class="token operator">:</span> <span class="token number">8</span></span>
<span class="line">        line <span class="token number">13</span><span class="token operator">:</span> <span class="token number">15</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">SourceFile</span><span class="token operator">:</span> <span class="token string">&quot;Method01.java&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【6】方法总结" tabindex="-1"><a class="header-anchor" href="#【6】方法总结"><span>【6】方法总结</span></a></h2><blockquote><ol><li><p><strong>方法</strong>：对特定的功能进行提取，形成一个代码片段，这个代码片段就是我们所说的方法</p></li><li><p>方法和方法是<strong>并列</strong>的关系，所以我们定义的方法不能写到<code>main</code>方法中</p></li><li><p><strong>方法的语法结构</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"> 修饰符 方法返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        方法体<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> 方法返回值<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>方法的作用</strong>：提高代码的复用性</p></li><li><p><strong>总结方法定义的格式</strong></p><ol><li><strong>修饰符</strong>: 暂时使用 <code>public static</code>/ <code>public</code>/ <code>private</code></li><li><strong>方法返回值类型</strong> : 方法的返回值对应的数据类型 <ol><li><strong>可以是基本数据类型</strong>（byte,short,int,long,float,double,char,boolean）</li><li><strong>也可以是引用数据类型</strong></li></ol></li><li><strong>方法名</strong> :见名知意，首字母小写，其余遵循驼峰命名， eg: addNum ,一般尽量使用英文来命名</li><li><strong>形参列表</strong> : 方法定义的时候需要的形式参数 ： int num1, int num2 --&gt;相当于告诉方法的调用者：需要传入几个参数，需要传入的参数的类型，实际参数：方法调用的时候传入的具体的参数： 10,20 --&gt;根据形式参数的需要传入的</li></ol></li><li><p><strong>方法体</strong>：具体的业务逻辑代码</p></li><li><p><strong>return 方法返回值</strong></p><ol><li>方法如果有返回值的话： return+方法返回值，将返回值返回到方法的调用处</li><li>方法没有返回值的话：return可以省略不写了，并且方法的返回值类型为：void</li></ol></li></ol></blockquote><h2 id="【7】方法的重载" tabindex="-1"><a class="header-anchor" href="#【7】方法的重载"><span>【7】方法的重载</span></a></h2><h3 id="_7-1-什么是方法的重载" tabindex="-1"><a class="header-anchor" href="#_7-1-什么是方法的重载"><span>7.1 什么是方法的重载</span></a></h3>`,8)),n("blockquote",null,[n("div",b,[s[27]||(s[27]=n("p",{class:"hint-container-title"},"什么是方法的重载?",-1)),n("p",null,[s[24]||(s[24]=n("strong",null,"方法的重载",-1)),s[25]||(s[25]=a(" 是指一个类中可以定义多个")),p(t,{style:{color:"red"}},{default:e(()=>s[23]||(s[23]=[n("b",null,"方法名相同，但参数不同",-1)])),_:1,__:[23]}),s[26]||(s[26]=a("的方法。 调用时，会根据不同的参数自动匹配对应的方法。"))])]),s[28]||(s[28]=n("div",{class:"hint-container warning"},[n("p",{class:"hint-container-title"},"注意"),n("p",null,[n("b",null,"注意本质"),a("："),n("b",null,"重载"),a("的方法，实际是完全不同的方法，只是名称相同而已！")])],-1))]),s[34]||(s[34]=o(`<h3 id="_7-2-构成方法重载的条件" tabindex="-1"><a class="header-anchor" href="#_7-2-构成方法重载的条件"><span>7.2 构成方法重载的条件</span></a></h3><blockquote><div class="hint-container info"><p class="hint-container-title">构成方法重载的条件</p><ul><li>不同的含义：形参类型、形参个数、形参顺序不同</li><li>只有返回值不同不构成方法的重载 <ul><li>int a(String str){}与 void a(String str){}不构成方法重载</li></ul></li><li>只有形参的名称不同，不构成方法的重载 <ul><li>int a(String str){}与int a(String s){}不构成方法重载</li></ul></li></ul></div></blockquote><h3 id="_7-3-代码示例" tabindex="-1"><a class="header-anchor" href="#_7-3-代码示例"><span>7.3 代码示例</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodOverride</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//10+20:</span></span>
<span class="line">        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//20+40+80:</span></span>
<span class="line">        <span class="token comment">//System.out.println(add(add(20,40),80));</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//30+60+90+120:</span></span>
<span class="line">        <span class="token comment">//System.out.println(add(add(30,60),add(90,120)));</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//9.8+4.7:</span></span>
<span class="line">        <span class="token comment">//System.out.println(add(9.8,4.7));</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">9.8</span><span class="token punctuation">,</span> <span class="token number">4.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//定义一个方法：两个数相加：两个int类型数据相加</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//定义一个方法：三个数相加：</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span> num3<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//定义一个方法：四个数相加：</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span> num3<span class="token punctuation">,</span> <span class="token keyword">int</span> num4<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3 <span class="token operator">+</span> num4<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//定义一个方法：两个数相加：两个double类型的数据相加</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> num1<span class="token punctuation">,</span> <span class="token keyword">double</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-重载总结" tabindex="-1"><a class="header-anchor" href="#_7-4-重载总结"><span>7.4 重载总结</span></a></h3><blockquote><ol><li>方法的重载：在同一个类中，方法名相同，形参列表不同的多个方法，构成了方法的重载。</li><li>方法的重载只跟方法名和形参列表有关，与修饰符，返回值类型无关。</li><li>注意：形参列表不同指的是什么？ <ol><li>个数不同 <code>add() </code> <code>add(int num1) </code> <code>add(int num1,int num2)</code></li><li>顺序不同 <code>add(int num1,double num2) </code> <code>add(double num1,int num2)</code></li><li>类型不同 <code>add(int num1)</code> <code> add(double num1)</code></li></ol></li><li>请问下面的方法是否构成了方法的重载？ <ol><li><code>add(int a)</code> 和 <code>add(int b) </code> ---&gt;不构成,相当于方法的重复定义</li><li><code>public static int add(int a)</code> 和 <code>public static void add(int b) </code> ---&gt;不构成</li></ol></li></ol></blockquote><h2 id="【8】参考资料" tabindex="-1"><a class="header-anchor" href="#【8】参考资料"><span>【8】参考资料</span></a></h2><ul><li><a href="https://www.bilibili.com/video/BV1RK4y1g7A5/?spm_id_from=333.337.search-card.all.click&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">B站免费的马士兵java初级教程</a></li></ul>`,8))])}const y=u(k,[["render",v]]),h=JSON.parse('{"path":"/md/note/java/basic/basic_006.html","title":"JAVA基础知识 - 方法","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1754462125000,"contributors":[{"name":"钱鹏展","username":"","email":"873373549@qq.com","commits":4}],"changelog":[{"hash":"6dd5c44273ee89f502050e811880a32b56b1807d","time":1754462125000,"email":"873373549@qq.com","author":"钱鹏展","message":"提奥"},{"hash":"7687a2a361978fcb4b3154c2ba3755c67c069d9e","time":1753743330000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"},{"hash":"2bb13f62902ae4121dcff4be58735a2732f1e41d","time":1753684520000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"},{"hash":"de35d470c9123e35599a94fe6b0083c6df06b969","time":1753427449000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"}]},"filePathRelative":"md/note/java/basic/basic_006.md"}');export{y as comp,h as data};
