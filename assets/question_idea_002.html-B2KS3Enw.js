import{_ as n,c as s,d as e,o as t}from"./app-GRT9i7xS.js";const i="/qianpengzhan/assets/image-20250820105303303-TW7KGnCS.png",p={};function o(l,a){return t(),s("div",null,a[0]||(a[0]=[e('<h1 id="【intellj-idea】-配置java-method-live-template" tabindex="-1"><a class="header-anchor" href="#【intellj-idea】-配置java-method-live-template"><span>【Intellj Idea】 配置Java method Live template</span></a></h1><p><img src="'+i+`" alt="image-20250820105303303"></p><blockquote><p>具体的<code>Template Text</code> 如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token operator">*</span></span>
<span class="line"><span class="token operator">*</span> </span>
<span class="line"><span class="token operator">*</span></span>
<span class="line">$params$ $<span class="token keyword">return</span>$</span>
<span class="line"><span class="token operator">*</span> <span class="token annotation punctuation">@author</span> qianpengzhan</span>
<span class="line"><span class="token operator">*</span><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动态表达式如下:</p><ul><li><code>params</code></li></ul><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line"><span class="token function">groovyScript</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;def result=&#39;&#39;; def params=\\&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token number">_1</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\&quot;.replaceAll(&#39;[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]&#39;, &#39;&#39;).split(&#39;,&#39;).toList(); if(params.size() == 1 &amp;&amp; params[0] == &#39;&#39;) return &#39;&#39;; for(i = 0; i &lt; params.size(); i++) {result+=&#39;* @param &#39; + params[i] + ((i &lt; params.size() - 1) ? &#39;\\\\n &#39; : &#39;&#39;)};return result&quot;</span></span><span class="token punctuation">,</span> <span class="token function">methodParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>return</code></li></ul><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line"><span class="token function">groovyScript</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;def rt = \\&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token number">_1</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\&quot;; return rt == &#39;void&#39; ? &#39;&#39; : &#39;\\\\n* @return {@link &#39; + (rt.contains(&#39;&lt;&#39;) ? rt.split(&#39;&lt;&#39;)[0] : rt) + &#39;}&#39;&quot;</span></span><span class="token punctuation">,</span> <span class="token function">methodReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote>`,3)]))}const c=n(p,[["render",o]]),u=JSON.parse('{"path":"/md/question/idea/question_idea_002.html","title":"【Intellj Idea】 配置Java method Live template","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1756257376000,"contributors":[{"name":"钱鹏展","username":"","email":"873373549@qq.com","commits":2}],"changelog":[{"hash":"c20bcf8c0c687509f29fe28d1e03a4381d92041c","time":1756257376000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"},{"hash":"ec7f7fd707c0e43d7c6b754b0986a2342710d7df","time":1755685021000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"}]},"filePathRelative":"md/question/idea/question_idea_002.md"}');export{c as comp,u as data};
