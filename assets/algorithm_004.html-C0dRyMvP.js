import{_ as i,c as u,b as s,d as l,a,w as e,r as c,o as r,e as t}from"./app-GRT9i7xS.js";const k="/qianpengzhan/assets/u_3602501124_4212124045_fm_253_fmt_auto_app_138_f_JPEG-Cpa2JGRd.webp",d={},m={class:"table-of-contents"};function v(b,n){const p=c("router-link"),o=c("Mermaid");return r(),u("div",null,[n[8]||(n[8]=s("h1",{id:"算法-选择排序",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#算法-选择排序"},[s("span",null,"算法 - 选择排序")])],-1)),s("nav",m,[s("ul",null,[s("li",null,[a(p,{to:"#【1】定义"},{default:e(()=>n[0]||(n[0]=[t("【1】定义")])),_:1,__:[0]})]),s("li",null,[a(p,{to:"#【2】算法流程图"},{default:e(()=>n[1]||(n[1]=[t("【2】算法流程图")])),_:1,__:[1]})]),s("li",null,[a(p,{to:"#【3】算法步骤说明"},{default:e(()=>n[2]||(n[2]=[t("【3】算法步骤说明")])),_:1,__:[2]})]),s("li",null,[a(p,{to:"#【4】核心计算步骤"},{default:e(()=>n[3]||(n[3]=[t("【4】核心计算步骤")])),_:1,__:[3]})]),s("li",null,[a(p,{to:"#【5】核心特性"},{default:e(()=>n[4]||(n[4]=[t("【5】核心特性")])),_:1,__:[4]})]),s("li",null,[a(p,{to:"#【6】代码示例"},{default:e(()=>n[5]||(n[5]=[t("【6】代码示例")])),_:1,__:[5]})]),s("li",null,[a(p,{to:"#【7】对数器"},{default:e(()=>n[6]||(n[6]=[t("【7】对数器")])),_:1,__:[6]})]),s("li",null,[a(p,{to:"#【8】参考资料"},{default:e(()=>n[7]||(n[7]=[t("【8】参考资料")])),_:1,__:[7]})])])]),n[9]||(n[9]=l('<blockquote><p>说在前面的话，本文为个人学习<a href="https://www.bilibili.com/video/BV1Ef4y1T7Qi/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">B站免费的左程云算法结构基础课</a>后进行总结的文章，主要是以<code>Java</code>来运行算法.</p></blockquote><h2 id="【1】定义" tabindex="-1"><a class="header-anchor" href="#【1】定义"><span>【1】定义</span></a></h2><blockquote><ul><li><b>选择排序（<code>Selection Sort</code>）</b></li></ul><div class="hint-container info"><p class="hint-container-title">定义</p><p><b>选择排序（<code>Selection Sort</code>）</b> 即 在随机数组中选择最小元素按照从小到大的顺序进行排序的过程。</p></div><ul><li><b>核心思想</b><ul><li>将数组分为‌<strong>已排序区间</strong>‌和‌<strong>未排序区间</strong>‌</li><li>每轮从未排序区间中选出‌<strong>最小元素</strong>‌</li><li>将该元素与未排序区间的‌<strong>第一个元素</strong>‌交换</li><li>重复上述过程直到数组完全有序</li></ul></li></ul></blockquote><h2 id="【2】算法流程图" tabindex="-1"><a class="header-anchor" href="#【2】算法流程图"><span>【2】算法流程图</span></a></h2>',4)),a(o,{code:"eJxLL0osyFAIceFSAALH6Kd7Gp4u745V0NW1U3CKftoxF8h72jPNSiHT1iCWi9MJLOFcnalgo5Cna2hfy8XpDBRSeDZjPVjGJTo3My8+My8ltcI2U0chyzZT2xCoDazm6YRlYDXe0c93T342dz5Q3AUs4FqdBTIOZJgrsmFu0UqJRUXRWbFAWRADbnSsvVKsAhenG7JidySbs4BGu4NFPaKztLWBPLDvwOphrvAAC3lAHABmg+2GSXsCvfioc4EC3FCg60CKPJHt9IpWerJrybPeRWDnZcYqPJ3Ug+ZSpVigNk4vsHKf6EyQYxQ4wYbAbPLh4vSBhCoXADPQeV8="}),n[10]||(n[10]=l('<p><img src="'+k+`" alt="u=3602501124,4212124045&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG"></p><h2 id="【3】算法步骤说明" tabindex="-1"><a class="header-anchor" href="#【3】算法步骤说明"><span>【3】算法步骤说明</span></a></h2><blockquote><ul><li><strong>初始化</strong>‌ 设置外层循环索引 <code>i=0</code>，表示当前待填充位置。</li><li><strong>遍历未排序序列</strong>‌ 内层循环从 <code>i+1</code> 到 <code>n-1</code>，寻找最小元素的索引 <code>min_index</code>。 <code>if arr[j] &lt; arr[min_index]</code> 则更新 <code>min_index = j</code>。</li><li>‌<strong>交换元素</strong>‌ 若 <code>min_index ≠ i</code>，交换 <code>arr[i]</code> 和 <code>arr[min_index]</code>。</li><li>‌<strong>移动边界</strong>‌ <code>i++</code> 后重复上述过程，直到 <code>i = n-2</code>（共执行 <code>n-1</code> 趟）。</li></ul></blockquote><h2 id="【4】核心计算步骤" tabindex="-1"><a class="header-anchor" href="#【4】核心计算步骤"><span>【4】核心计算步骤</span></a></h2><blockquote><ul><li>具体步骤如下： <ul><li><strong>外层循环</strong>‌： 从 <code>i = 0</code> 到 <code>i = n-2</code>（共 <code>n-1</code> 次），时间复杂度为 <code>O(n)</code>。</li><li><strong>内层循环</strong>‌： 每次外层循环中，内层循环从 <code>j = i+1</code> 到 <code>j = n-1</code>，比较次数依次为： <ul><li>第1次外层：<code>n-1</code> 次比较</li><li>第2次外层：<code>n-2</code> 次比较</li><li>...</li><li>第<code>n-1</code>次外层：<code>1</code> 次比较 总比较次数 = <code>(n-1) + (n-2) + ... + 1 = n(n-1)/2</code>，即 <code>O(n²)</code>。</li></ul></li><li><strong>交换操作</strong>‌： 每次外层循环最多交换1次（找到最小元素后与当前位置交换），交换次数为 <code>O(n)</code>，不影响整体时间复杂度。</li></ul></li></ul></blockquote><blockquote><ul><li><strong>最终结果‌</strong><ul><li><strong>时间复杂度</strong>‌：<code>O(n²)</code>（无论输入数据是否有序，均需执行相同次数的比较）。</li><li>‌<strong>空间复杂度</strong>‌：<code>O(1)</code>（原地排序，仅需常数级额外空间）。</li></ul></li></ul></blockquote><h2 id="【5】核心特性" tabindex="-1"><a class="header-anchor" href="#【5】核心特性"><span>【5】核心特性</span></a></h2><blockquote><ul><li>‌<strong>时间复杂度</strong>‌：固定为 <code>O(n²)</code>，无论数据是否有序。</li><li>‌<strong>空间复杂度</strong>‌：<code>O(1)</code>（原地排序）。</li><li>‌<strong>不稳定性</strong>‌：交换可能改变相等元素的原始顺序。</li></ul></blockquote><h2 id="【6】代码示例" tabindex="-1"><a class="header-anchor" href="#【6】代码示例"><span>【6】代码示例</span></a></h2><blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>business</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 选择排序算法</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/8/14 15:05</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectionSort</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 选择排序 即  选择最小元素按照从小到大排序的算法过程</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 数组为空 或者 元素数量 不足2个  排序无意义</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 第一轮: 1. 0 ~ N-1 进行遍历  2. (看+找)遍历的过程中每次都比较前后的数值 找出最小值  3.(换)替换当前值和最小值的下标</span></span>
<span class="line">        <span class="token comment">// 第二轮：1. 1 ~ N-1 进行遍历  2.同上 3.同上</span></span>
<span class="line">        <span class="token comment">// 第三轮: 1. 2 ~ N-1 进行遍历  2.同上 3.同上</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">        <span class="token comment">// 第N轮:  1. N-1 ~ N-1 进行遍历  2.同上 3.同上</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// i ~ N-1</span></span>
<span class="line">            <span class="token comment">// 设定最小值下标</span></span>
<span class="line">            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 比较2数谁最小 找出最小的数的下标</span></span>
<span class="line">                minIndex <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">?</span> j <span class="token operator">:</span> minIndex<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// 替换当前值和最小值的下标</span></span>
<span class="line">            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> minIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 替换当前值和最小值的下标  即 交换2个数的位置</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">arr</span>       数组</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">currIndex</span> 当前值的下标</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">minIndex</span>  最小值的下表</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> currIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> minIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>currIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr<span class="token punctuation">[</span>currIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token doc-comment comment">/**</span>
<span class="line">     * 异或交换原理</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     * ‌第一次异或‌：arr[currIndex] ^ arr[minIndex]</span>
<span class="line">     * 将两数差异位保存到 arr[currIndex]（此时 arr[currIndex] 变为临时值）</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     * ‌第二次异或‌：arr[currIndex] ^ arr[minIndex]</span>
<span class="line">     * 用临时值与 arr[minIndex] 异或，得到原始 arr[currIndex] 并存入 arr[minIndex]</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     * ‌第三次异或‌：arr[currIndex] ^ arr[minIndex]</span>
<span class="line">     * 用临时值与新 arr[minIndex] 异或，得到原始 arr[minIndex] 并存入 arr[currIndex]</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>arr = [3,5], currIndex=0, minIndex=1：</span>
<span class="line">     * arr[0] = 3 ^ 5 = 6  // [6,5]</span>
<span class="line">     * arr[1] = 6 ^ 5 = 3  // [6,3]</span>
<span class="line">     * arr[0] = 6 ^ 3 = 5  // [5,3] 完成交换</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">arr</span></span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">currIndex</span></span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">minIndex</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">optSwap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> currIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> minIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        arr<span class="token punctuation">[</span>currIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>currIndex<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>currIndex<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr<span class="token punctuation">[</span>currIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>currIndex<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="【7】对数器" tabindex="-1"><a class="header-anchor" href="#【7】对数器"><span>【7】对数器</span></a></h2><blockquote><p>以下是选择排序的对数器实现示例，用于验证选择排序算法的正确性</p></blockquote><blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>business</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 选择排序算法</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/8/14 15:05</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectionSort</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 对数器主测试方法</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> testTime <span class="token operator">=</span> <span class="token number">500000</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> maxSize <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">boolean</span> succeed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testTime<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token function">generateRandomArray</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">selectionSort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">comparator</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEqual</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                succeed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;测试失败！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;原数组：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;选择排序结果：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>succeed <span class="token operator">?</span> <span class="token string">&quot;所有测试通过！&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;测试失败！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 选择排序 即  选择最小元素按照从小到大排序的算法过程</span></span>
<span class="line">    <span class="token comment">// 待测试的选择排序实现</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 数组为空 或者 元素数量 不足2个  排序无意义</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 第一轮: 1. 0 ~ N-1 进行遍历  2. (看+找)遍历的过程中每次都比较前后的数值 找出最小值  3.(换)替换当前值和最小值的下标</span></span>
<span class="line">        <span class="token comment">// 第二轮：1. 1 ~ N-1 进行遍历  2.同上 3.同上</span></span>
<span class="line">        <span class="token comment">// 第三轮: 1. 2 ~ N-1 进行遍历  2.同上 3.同上</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">        <span class="token comment">// 第N轮:  1. N-1 ~ N-1 进行遍历  2.同上 3.同上</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// i ~ N-1</span></span>
<span class="line">            <span class="token comment">// 设定最小值下标</span></span>
<span class="line">            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 比较2数谁最小 找出最小的数的下标</span></span>
<span class="line">                minIndex <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">?</span> j <span class="token operator">:</span> minIndex<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// 替换当前值和最小值的下标</span></span>
<span class="line">            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> minIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 替换当前值和最小值的下标  即 交换2个数的位置</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">arr</span>       数组</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">currIndex</span> 当前值的下标</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">minIndex</span>  最小值的下表</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> currIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> minIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>currIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr<span class="token punctuation">[</span>currIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 异或交换原理</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     * ‌第一次异或‌：arr[currIndex] ^ arr[minIndex]</span>
<span class="line">     * 将两数差异位保存到 arr[currIndex]（此时 arr[currIndex] 变为临时值）</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     * ‌第二次异或‌：arr[currIndex] ^ arr[minIndex]</span>
<span class="line">     * 用临时值与 arr[minIndex] 异或，得到原始 arr[currIndex] 并存入 arr[minIndex]</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">     * ‌第三次异或‌：arr[currIndex] ^ arr[minIndex]</span>
<span class="line">     * 用临时值与新 arr[minIndex] 异或，得到原始 arr[minIndex] 并存入 arr[currIndex]</span>
<span class="line">     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>arr = [3,5], currIndex=0, minIndex=1：</span>
<span class="line">     * arr[0] = 3 ^ 5 = 6  // [6,5]</span>
<span class="line">     * arr[1] = 6 ^ 5 = 3  // [6,3]</span>
<span class="line">     * arr[0] = 6 ^ 3 = 5  // [5,3] 完成交换</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">arr</span></span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">currIndex</span></span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">minIndex</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">optSwap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> currIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> minIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        arr<span class="token punctuation">[</span>currIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>currIndex<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>currIndex<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        arr<span class="token punctuation">[</span>currIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>currIndex<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 正确的排序方法（对数器基准）</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">comparator</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 随机数组生成器</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateRandomArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>maxSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> arr<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 数组复制方法</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> res<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 验证两个数组是否相同</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arr1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> arr2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>arr1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> arr2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length <span class="token operator">!=</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><ol><li><strong>对数器组成</strong>‌：包含随机数组生成、正确排序方法（基准）、待测排序方法和结果验证四部分</li><li>‌<strong>测试流程</strong>‌：通过大量随机测试用例验证选择排序结果与系统排序结果的一致性</li><li>‌<strong>异常检测</strong>‌：当发现不一致结果时立即停止并输出错误案例</li><li>‌<strong>扩展性</strong>‌：可调整<code>testTime</code>、<code>maxSize</code>等参数控制测试强度</li></ol><ul><li>该对数器可有效验证选择排序的正确性，并帮助发现边界条件错误。对于其他排序算法，只需替换<code>selectionSort</code>方法即可复用该测试框架</li></ul></blockquote><h2 id="【8】参考资料" tabindex="-1"><a class="header-anchor" href="#【8】参考资料"><span>【8】参考资料</span></a></h2><ul><li><a href="https://www.bilibili.com/video/BV1Ef4y1T7Qi/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">B站免费的左程云算法结构基础课</a></li></ul>`,16))])}const w=i(d,[["render",v]]),g=JSON.parse('{"path":"/md/algorithm/algorithm_004.html","title":"算法 - 选择排序","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1755486380000,"contributors":[{"name":"钱鹏展","username":"","email":"873373549@qq.com","commits":2}],"changelog":[{"hash":"413aef7d5e738c202d096a5f06143b6cc9c51a0d","time":1755486380000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"},{"hash":"217cb3b10491c50e6c567ed02484095c99d3359c","time":1755239288000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"}]},"filePathRelative":"md/algorithm/algorithm_004.md"}');export{w as comp,g as data};
