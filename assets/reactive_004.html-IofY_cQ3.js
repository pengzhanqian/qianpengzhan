import{_ as r,c as d,b as n,d as k,a as t,w as p,e as s,r as o,o as m}from"./app-GRT9i7xS.js";const v="/qianpengzhan/assets/image-20250702104406929-av9WXj9S.png",b="/qianpengzhan/assets/image-20250704164310639-JcgDKrd5.png",g="/qianpengzhan/assets/image-20250704164948153-BJYsauwL.png",f="/qianpengzhan/assets/image-20250707101946627-ZQ4YBncn.png",h="/qianpengzhan/assets/image-20250707102340032-BLMxOU2-.png",x="/qianpengzhan/assets/image-20250707102403220-6PhNFH73.png",y="/qianpengzhan/assets/image-20250707151939678-C12WhDeU.png",w="/qianpengzhan/assets/image-20250707162516688-C-aBMCsZ.png",F="/qianpengzhan/assets/image-20250707163617974-EuvFORTs.png",N="/qianpengzhan/assets/image-20250707174850147-Dc7KSqgl.png",q="/qianpengzhan/assets/image-20250708102925852-CeEhR26W.png",O="/qianpengzhan/assets/image-20250708102844131-CWwZDkd5.png",I="/qianpengzhan/assets/image-20250708111143086-D1K6DpRQ.png",j="/qianpengzhan/assets/image-20250708113738020-BTwgkbI0.png",S="/qianpengzhan/assets/image-20250708113719379-BXjBsLKp.png",_="/qianpengzhan/assets/image-20250708113906096-Bm5laco2.png",C="/qianpengzhan/assets/image-20250708131356930-BbZ0kCFr.png",E="/qianpengzhan/assets/image-20250708131606176-Dq_kwF8N.png",T="/qianpengzhan/assets/image-20250708133704304-CLS1OPpO.png",M="/qianpengzhan/assets/image-20250708133652556-L1Nd8Z2W.png",R="/qianpengzhan/assets/image-20250708135654759-PgsCvvfN.png",A="/qianpengzhan/assets/image-20250708140218783-Cki51fKv.png",z="/qianpengzhan/assets/image-20250708142524286-D-1rNaFG.png",L="/qianpengzhan/assets/image-20250709102621664-Bz6hsZ5C.png",P="/qianpengzhan/assets/image-20250709102659706-CpbfULxC.png",D={},B={class:"table-of-contents"};function U(W,a){const e=o("router-link"),i=o("Tabs"),u=o("Mermaid");return m(),d("div",null,[a[62]||(a[62]=n("h1",{id:"第四章-reactor-框架",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第四章-reactor-框架"},[n("span",null,"第四章: Reactor 框架")])],-1)),n("nav",B,[n("ul",null,[n("li",null,[t(e,{to:"#【1】本章学习图解"},{default:p(()=>a[0]||(a[0]=[s("【1】本章学习图解")])),_:1,__:[0]})]),n("li",null,[t(e,{to:"#【2】project-reactor-官网"},{default:p(()=>a[1]||(a[1]=[s("【2】Project Reactor 官网")])),_:1,__:[1]})]),n("li",null,[t(e,{to:"#【3】reactor-响应式编程模型"},{default:p(()=>a[2]||(a[2]=[s("【3】Reactor 响应式编程模型")])),_:1,__:[2]})]),n("li",null,[t(e,{to:"#【4】引入相关jar"},{default:p(()=>a[3]||(a[3]=[s("【4】引入相关jar")])),_:1,__:[3]})]),n("li",null,[t(e,{to:"#【5】核心组件-mono-和-flux"},{default:p(()=>a[4]||(a[4]=[s("【5】核心组件 Mono 和 Flux")])),_:1,__:[4]}),n("ul",null,[n("li",null,[t(e,{to:"#_5-1-flux"},{default:p(()=>a[5]||(a[5]=[s("5.1 Flux")])),_:1,__:[5]})]),n("li",null,[t(e,{to:"#_5-2-mono"},{default:p(()=>a[6]||(a[6]=[s("5.2 Mono")])),_:1,__:[6]})]),n("li",null,[t(e,{to:"#_5-3-总结"},{default:p(()=>a[7]||(a[7]=[s("5.3 总结")])),_:1,__:[7]})]),n("li",null,[t(e,{to:"#_5-4-设计原则"},{default:p(()=>a[8]||(a[8]=[s("5.4 设计原则")])),_:1,__:[8]})]),n("li",null,[t(e,{to:"#_5-5-关键操作符与代码实践‌"},{default:p(()=>a[9]||(a[9]=[s("5.5 关键操作符与代码实践‌")])),_:1,__:[9]})]),n("li",null,[t(e,{to:"#_5-6-事件感知-doonxxx"},{default:p(()=>a[10]||(a[10]=[s("5.6 事件感知 doOnXxx")])),_:1,__:[10]})])])]),n("li",null,[t(e,{to:"#【6】核心组件log"},{default:p(()=>a[11]||(a[11]=[s("【6】核心组件log()")])),_:1,__:[11]})]),n("li",null,[t(e,{to:"#【7】核心组件subscribe"},{default:p(()=>a[12]||(a[12]=[s("【7】核心组件subscribe()")])),_:1,__:[12]}),n("ul",null,[n("li",null,[t(e,{to:"#_7-1-订阅方法api"},{default:p(()=>a[13]||(a[13]=[s("7.1 订阅方法API")])),_:1,__:[13]})]),n("li",null,[t(e,{to:"#_7-2-订阅方法代码示例"},{default:p(()=>a[14]||(a[14]=[s("7.2 订阅方法代码示例")])),_:1,__:[14]})]),n("li",null,[t(e,{to:"#_7-3-订阅方法中自定义消费者"},{default:p(()=>a[15]||(a[15]=[s("7.3 订阅方法中自定义消费者")])),_:1,__:[15]})])])]),n("li",null,[t(e,{to:"#【8】核心-请求重塑"},{default:p(()=>a[16]||(a[16]=[s("【8】核心 - 请求重塑")])),_:1,__:[16]}),n("ul",null,[n("li",null,[t(e,{to:"#_8-1-buffer-n"},{default:p(()=>a[17]||(a[17]=[s("8.1 buffer(N)")])),_:1,__:[17]})]),n("li",null,[t(e,{to:"#_8-2-limitrate-n"},{default:p(()=>a[18]||(a[18]=[s("8.2 limitRate(N)")])),_:1,__:[18]})]),n("li",null,[t(e,{to:"#_8-3-limitrequest-n-expired"},{default:p(()=>a[19]||(a[19]=[s("8.3 limitRequest(N) Expired")])),_:1,__:[19]})])])]),n("li",null,[t(e,{to:"#【9】核心组件-以编程方式创建序列"},{default:p(()=>a[20]||(a[20]=[s("【9】核心组件 - 以编程方式创建序列")])),_:1,__:[20]}),n("ul",null,[n("li",null,[t(e,{to:"#_9-1-同步生成"},{default:p(()=>a[21]||(a[21]=[s("9.1 同步生成")])),_:1,__:[21]})]),n("li",null,[t(e,{to:"#_9-2-异步或者多线程生成序列"},{default:p(()=>a[22]||(a[22]=[s("9.2 异步或者多线程生成序列")])),_:1,__:[22]})]),n("li",null,[t(e,{to:"#_9-3-自定义元素处理器-handle"},{default:p(()=>a[23]||(a[23]=[s("9.3 自定义元素处理器 Handle")])),_:1,__:[23]})])])]),n("li",null,[t(e,{to:"#【10】核心-自定义线程调度规则"},{default:p(()=>a[24]||(a[24]=[s("【10】核心 - 自定义线程调度规则")])),_:1,__:[24]})]),n("li",null,[t(e,{to:"#【11】reactor-api的常用操作"},{default:p(()=>a[25]||(a[25]=[s("【11】Reactor API的常用操作")])),_:1,__:[25]}),n("ul",null,[n("li",null,[t(e,{to:"#_11-1-filter"},{default:p(()=>a[26]||(a[26]=[s("11.1 filter")])),_:1,__:[26]})]),n("li",null,[t(e,{to:"#_11-2-flatmap"},{default:p(()=>a[27]||(a[27]=[s("11.2 flatMap")])),_:1,__:[27]})]),n("li",null,[t(e,{to:"#_11-3-concatmap"},{default:p(()=>a[28]||(a[28]=[s("11.3 concatMap")])),_:1,__:[28]})]),n("li",null,[t(e,{to:"#_11-4-transform"},{default:p(()=>a[29]||(a[29]=[s("11.4 transform")])),_:1,__:[29]})]),n("li",null,[t(e,{to:"#_11-5-ifempty"},{default:p(()=>a[30]||(a[30]=[s("11.5 ifEmpty")])),_:1,__:[30]})]),n("li",null,[t(e,{to:"#_11-6-merge"},{default:p(()=>a[31]||(a[31]=[s("11.6 merge")])),_:1,__:[31]})]),n("li",null,[t(e,{to:"#_11-7-zip"},{default:p(()=>a[32]||(a[32]=[s("11.7 zip")])),_:1,__:[32]})])])]),n("li",null,[t(e,{to:"#【12】reactor-错误如何处理"},{default:p(()=>a[33]||(a[33]=[s("【12】Reactor 错误如何处理")])),_:1,__:[33]}),n("ul",null,[n("li",null,[t(e,{to:"#_12-1-catch-and-return-a-static-default-value"},{default:p(()=>a[34]||(a[34]=[s("12.1 Catch and return a static default value.")])),_:1,__:[34]})]),n("li",null,[t(e,{to:"#_12-2-catch-and-execute-an-alternative-path-with-a-fallback-method"},{default:p(()=>a[35]||(a[35]=[s("12.2 Catch and execute an alternative path with a fallback method.")])),_:1,__:[35]})]),n("li",null,[t(e,{to:"#_12-3-catch-and-dynamically-compute-a-fallback-value"},{default:p(()=>a[36]||(a[36]=[s("12.3 Catch and dynamically compute a fallback value.")])),_:1,__:[36]})]),n("li",null,[t(e,{to:"#_12-4-catch-wrap-to-a-businessexception-and-re-throw"},{default:p(()=>a[37]||(a[37]=[s("12.4 Catch, wrap to a BusinessException, and re-throw.")])),_:1,__:[37]})]),n("li",null,[t(e,{to:"#_12-5-catch-log-an-error-specific-message-and-re-throw"},{default:p(()=>a[38]||(a[38]=[s("12.5 Catch, log an error-specific message, and re-throw.")])),_:1,__:[38]})]),n("li",null,[t(e,{to:"#_12-6-use-the-finally-block-to-clean-up-resources-or-a-java-7-try-with-resource-construct"},{default:p(()=>a[39]||(a[39]=[s("12.6 Use the finally block to clean up resources or a Java 7 “try-with-resource” construct.")])),_:1,__:[39]})]),n("li",null,[t(e,{to:"#_12-7-ignore-error-continue"},{default:p(()=>a[40]||(a[40]=[s("12.7 Ignore Error Continue")])),_:1,__:[40]})])])]),n("li",null,[t(e,{to:"#【13】reactor-超时和重试"},{default:p(()=>a[41]||(a[41]=[s("【13】Reactor 超时和重试")])),_:1,__:[41]})]),n("li",null,[t(e,{to:"#【14】sinks工具类的用法"},{default:p(()=>a[42]||(a[42]=[s("【14】Sinks工具类的用法")])),_:1,__:[42]}),n("ul",null,[n("li",null,[t(e,{to:"#_14-1-单播"},{default:p(()=>a[43]||(a[43]=[s("14.1 单播")])),_:1,__:[43]})]),n("li",null,[t(e,{to:"#_14-2-多播"},{default:p(()=>a[44]||(a[44]=[s("14.2 多播")])),_:1,__:[44]})]),n("li",null,[t(e,{to:"#_14-3-重放"},{default:p(()=>a[45]||(a[45]=[s("14.3 重放")])),_:1,__:[45]})]),n("li",null,[t(e,{to:"#_14-3-背压"},{default:p(()=>a[46]||(a[46]=[s("14.3 背压")])),_:1,__:[46]})]),n("li",null,[t(e,{to:"#_14-4-缓存"},{default:p(()=>a[47]||(a[47]=[s("14.4 缓存")])),_:1,__:[47]})])])]),n("li",null,[t(e,{to:"#【15】阻塞式api"},{default:p(()=>a[48]||(a[48]=[s("【15】阻塞式API")])),_:1,__:[48]})]),n("li",null,[t(e,{to:"#【16】-context-上下文api"},{default:p(()=>a[49]||(a[49]=[s("【16】 Context 上下文API")])),_:1,__:[49]})]),n("li",null,[t(e,{to:"#【17】-parallelflux"},{default:p(()=>a[50]||(a[50]=[s("【17】 parallelFlux")])),_:1,__:[50]})]),n("li",null,[t(e,{to:"#【18】参考资料"},{default:p(()=>a[51]||(a[51]=[s("【18】参考资料")])),_:1,__:[51]})])])]),a[63]||(a[63]=k('<blockquote><p>说在前面的话，本文为个人学习<a href="https://www.bilibili.com/video/BV1gsYEeLEuM?spm_id_from=333.788.videopod.episodes&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">SpringBoot3响应式编程精讲</a>后进行总结的文章，本文主要用于<b>响应式编程</b>。</p></blockquote><h2 id="【1】本章学习图解" tabindex="-1"><a class="header-anchor" href="#【1】本章学习图解"><span>【1】本章学习图解</span></a></h2><p><img src="'+v+'" alt="image-20250702104406929"></p><h2 id="【2】project-reactor-官网" tabindex="-1"><a class="header-anchor" href="#【2】project-reactor-官网"><span>【2】Project Reactor 官网</span></a></h2><blockquote><p>英文官网地址: <a href="https://projectreactor.io/" target="_blank" rel="noopener noreferrer">https://projectreactor.io/</a></p></blockquote><blockquote><p>以往：</p></blockquote>',6)),t(i,{data:[{id:"<strong>高并发三宝</strong>"},{id:"<strong>高可用三宝</strong>"},{id:"<strong>非阻塞的原理</strong>"}],active:0},{title0:p(({value:c,isActive:l})=>a[52]||(a[52]=[n("strong",null,"高并发三宝",-1)])),title1:p(({value:c,isActive:l})=>a[53]||(a[53]=[n("strong",null,"高可用三宝",-1)])),title2:p(({value:c,isActive:l})=>a[54]||(a[54]=[n("strong",null,"非阻塞的原理",-1)])),tab0:p(({value:c,isActive:l})=>a[55]||(a[55]=[n("ul",null,[n("li",null,[n("strong",null,"异步")]),n("li",null,[n("strong",null,"缓存")]),n("li",null,[n("strong",null,"队列排好")])],-1)])),tab1:p(({value:c,isActive:l})=>a[56]||(a[56]=[n("ul",null,[n("li",null,[n("strong",null,"分片")]),n("li",null,[n("strong",null,"复制")]),n("li",null,[n("strong",null,"选领导")])],-1)])),tab2:p(({value:c,isActive:l})=>a[57]||(a[57]=[n("ul",null,[n("li",null,[n("strong",null,"缓冲区")]),n("li",null,[n("strong",null,"回调")])],-1)])),_:1}),a[64]||(a[64]=n("blockquote",null,[n("p",null,[s("现在，1个框架就全搞定了。 这就是 "),n("code",null,"Project Reactor"),s(" 框架")])],-1)),a[65]||(a[65]=n("h2",{id:"【3】reactor-响应式编程模型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【3】reactor-响应式编程模型"},[n("span",null,"【3】Reactor 响应式编程模型")])],-1)),a[66]||(a[66]=n("p",null,[n("img",{src:b,alt:"image-20250704164310639"})],-1)),t(u,{code:"eJxLL0osyFDwCeJyjH42dcOz3nXPdk1QCChNyskszkgtilXQ1bWredo/8emO5ie7up/s3laj4BT9bHLvk71znq9Z9nLyPpukIrvcxAL9tMycktQi/bScxBLfxIJYLieIzj1Nz9YufbJnwcuGSTUKztEv1i16OaP1RUOrQnBpUnFyUWYS0A4uZ7DaF809T/u6n/b3vlzWUaPgyAUAzhtK9w=="}),t(u,{code:"eJxLy8kvT85ILCpRCHHiKi5NSi9KLMhQeDq59+muKU/39D/fvPv57vlcCgqO0c+2dTxrXP9y5canXSteNsx6sn/h041NsQq6unYKTtFP9zQ9W7v05dx5L2fsfrpw3rM5vU+7FsYC9TmBFThHw018NnXDs951T9fOeNq0AqTAGazABWjCzmcNy5+u2/lyysxnc3Y97dgWy5Wal8LFBQBZxVY1"}),a[67]||(a[67]=n("h2",{id:"【4】引入相关jar",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【4】引入相关jar"},[n("span",null,"【4】引入相关jar")])],-1)),t(i,{data:[{id:"引入父pom的jar"},{id:"再在子pom.xml中引入使用的jar"}],active:0},{title0:p(({value:c,isActive:l})=>a[58]||(a[58]=[s("引入父pom的jar")])),title1:p(({value:c,isActive:l})=>a[59]||(a[59]=[s("再在子pom.xml中引入使用的jar")])),tab0:p(({value:c,isActive:l})=>a[60]||(a[60]=[n("div",{class:"language-xml line-numbers-mode","data-highlighter":"prismjs","data-ext":"xml"},[n("pre",null,[n("code",{class:"language-xml"},[n("span",{class:"line"},[s("  "),n("span",{class:"token comment"},"<!--    引入project reactor 的jar     -->")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("dependencyManagement")]),n("span",{class:"token punctuation"},">")]),s()]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("dependencies")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("dependency")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("groupId")]),n("span",{class:"token punctuation"},">")]),s("io.projectreactor"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("groupId")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("artifactId")]),n("span",{class:"token punctuation"},">")]),s("reactor-bom"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("artifactId")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("version")]),n("span",{class:"token punctuation"},">")]),s("2024.0.6"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("version")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("type")]),n("span",{class:"token punctuation"},">")]),s("pom"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("type")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("scope")]),n("span",{class:"token punctuation"},">")]),s("import"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("scope")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("dependency")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("dependencies")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("dependencyManagement")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:p(({value:c,isActive:l})=>a[61]||(a[61]=[n("div",{class:"language-xml line-numbers-mode","data-highlighter":"prismjs","data-ext":"xml"},[n("pre",null,[n("code",{class:"language-xml"},[n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("dependencies")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("dependency")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("groupId")]),n("span",{class:"token punctuation"},">")]),s("io.projectreactor"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("groupId")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("artifactId")]),n("span",{class:"token punctuation"},">")]),s("reactor-core"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("artifactId")]),n("span",{class:"token punctuation"},">")]),s()]),s(`
`),n("span",{class:"line"},"        "),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("dependency")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("dependency")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("groupId")]),n("span",{class:"token punctuation"},">")]),s("io.projectreactor"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("groupId")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("artifactId")]),n("span",{class:"token punctuation"},">")]),s("reactor-test"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("artifactId")]),n("span",{class:"token punctuation"},">")]),s()]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("scope")]),n("span",{class:"token punctuation"},">")]),s("test"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("scope")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("dependency")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("dependencies")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[68]||(a[68]=k('<h2 id="【5】核心组件-mono-和-flux" tabindex="-1"><a class="header-anchor" href="#【5】核心组件-mono-和-flux"><span>【5】核心组件 Mono 和 Flux</span></a></h2><blockquote><p>万物皆数据，数据分2种，1种是<strong>单个或者没有</strong>，另一种是<strong>多个</strong></p><p>数据流 = N个元素 + 1个信号(完成/异常)</p></blockquote><h3 id="_5-1-flux" tabindex="-1"><a class="header-anchor" href="#_5-1-flux"><span>5.1 Flux</span></a></h3><blockquote><p><img src="'+g+'" alt="image-20250704164948153"></p></blockquote><blockquote><p>官网弹珠图:</p><p><img src="'+f+'" alt="image-20250707101946627"></p></blockquote><blockquote><p>With this large scope of possible signals, <code>Flux</code> is the general-purpose reactive type. Note that all events, even terminating ones, are optional: no <code>onNext</code> event but an <code>onComplete</code> event represents an <em>empty</em> finite sequence, but remove the <code>onComplete</code> and you have an <em>infinite</em> empty sequence (not particularly useful, except for tests around cancellation). Similarly, infinite sequences are not necessarily empty. For example, <code>Flux.interval(Duration)</code> produces a <code>Flux&lt;Long&gt;</code> that is infinite and emits regular ticks from a clock.</p><p>有了这么大范围的可能信号，<code>Flux</code>是通用的反应式类型。请注意，所有事件，甚至是终止事件，都是可选的：没有<code>onNext</code>事件，但<code>onComplete</code>事件表示一个<em>空</em>的有限序列，但删除<code>onComplete</code>，你有一个<em>无限</em>的空序列（不是特别有用，除了关于取消的测试）。类似地，无限序列不一定是空的。例如，<code>Flux.interval(Duration)</code>产生一个无限的<code>Flux&lt;Long&gt;</code>，并从时钟发出规则的滴答声。</p></blockquote><h3 id="_5-2-mono" tabindex="-1"><a class="header-anchor" href="#_5-2-mono"><span>5.2 Mono</span></a></h3><blockquote><p><img src="'+h+'" alt="image-20250707102340032"></p></blockquote><blockquote><p><img src="'+x+`" alt="image-20250707102403220"></p></blockquote><blockquote><p>A <code>Mono&lt;T&gt;</code> is a specialized <code>Publisher&lt;T&gt;</code> that emits at most one item <em>via</em> the <code>onNext</code> signal then terminates with an <code>onComplete</code> signal (successful <code>Mono</code>, with or without value), or only emits a single <code>onError</code> signal (failed <code>Mono</code>).</p><p>一个<code>Mono&lt;T&gt;</code>是一个专门的<code>Publisher&lt;T&gt;</code>，它<em>通过</em>onNext信号发出最多一个项目<code>onNext</code>然后以<code>onComplete</code>信号终止（成功的<code>Mono</code>，有或没有值），或者只发出一个<code>onError</code>信号（失败的<code>Mono</code>）。</p><p>Most <code>Mono</code> implementations are expected to immediately call <code>onComplete</code> on their <code>Subscriber</code> after having called <code>onNext</code>. <code>Mono.never()</code> is an outlier: it doesn’t emit any signal, which is not technically forbidden although not terribly useful outside of tests. On the other hand, a combination of <code>onNext</code> and <code>onError</code> is explicitly forbidden.</p><p>大多数<code>Mono</code>实现在调用<code>onNext</code>后会立即在<code>Subscriber</code>器上调用<code>onComplete</code>。<code>Mono.never()</code>是一个异常值：它不发出任何信号，这在技术上是不被禁止的，尽管在测试之外并不十分有用。另一方面，<code>onNext</code>和<code>onError</code>的组合被明确禁止。</p><p><code>Mono</code> offers only a subset of the operators that are available for a <code>Flux</code>, and some operators (notably those that combine the <code>Mono</code> with another <code>Publisher</code>) switch to a <code>Flux</code>. For example, <code>Mono#concatWith(Publisher)</code> returns a <code>Flux</code> while <code>Mono#then(Mono)</code> returns another <code>Mono</code>.</p><p><code>Mono</code>仅提供可用于<code>Flux</code>的运算符子集，一些运算符（特别是将<code>Mono</code>与另一个<code>Publisher</code>组合的运算符）切换到<code>Flux</code>。例如，<code>Mono#concatWith(Publisher)</code>返回一个<code>Flux</code>，而<code>Mono#then(Mono)</code>返回另一个<code>Mono</code>。</p><p>Note that you can use a <code>Mono</code> to represent no-value asynchronous processes that only have the concept of completion (similar to a <code>Runnable</code>). To create one, you can use an empty <code>Mono&lt;Void&gt;</code>.</p><p>请注意，您可以使用<code>Mono</code>来表示只有完成概念的无值异步进程（类似于<code>Runnable</code>）。要创建一个，您可以使用空的<code>Mono&lt;Void&gt;</code>。</p></blockquote><h3 id="_5-3-总结" tabindex="-1"><a class="header-anchor" href="#_5-3-总结"><span>5.3 总结</span></a></h3><blockquote><p><b><code>Flux</code></b> ：代表包含 0 到 N 个元素的异步序列，支持 <code>onNext</code>（数据元素）、<code>onComplete</code>（完成信号）、<code>onError</code>（错误信号）三种事件通知。</p><p>‌<b><code>Mono</code></b> ‌：表示最多包含 ‌<strong>0 或 1 个元素</strong>‌的异步序列，适用于单值场景（如 HTTP 请求响应）。</p><p>‌<strong>核心差异</strong>‌：<code>Flux</code> 处理流式数据（如数据库查询结果集），<code>Mono</code> 处理单次操作（如保存结果）</p></blockquote><h3 id="_5-4-设计原则" tabindex="-1"><a class="header-anchor" href="#_5-4-设计原则"><span>5.4 设计原则</span></a></h3><blockquote><ul><li>‌<strong>异步非阻塞</strong>‌：通过事件驱动模型避免线程阻塞，提高并发吞吐量。</li><li>‌<b>背压机制(Backpressure)</b>：消费者主动控制数据流速（如 <code>limitRate</code>），防止生产者过载。</li><li>‌<strong>声明式操作链</strong>‌：通过操作符（如 <code>map</code>、<code>filter</code>）构建处理流水线，取代传统回调嵌套。</li></ul></blockquote><h3 id="_5-5-关键操作符与代码实践‌" tabindex="-1"><a class="header-anchor" href="#_5-5-关键操作符与代码实践‌"><span>5.5 <strong>关键操作符与代码实践</strong>‌</span></a></h3><h4 id="_5-5-1-创建数据流‌" tabindex="-1"><a class="header-anchor" href="#_5-5-1-创建数据流‌"><span>5.5.1 创建数据流‌</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 静态创建 Flux</span></span>
<span class="line"><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> flux1 <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接创建元素</span></span>
<span class="line"><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> flux2 <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成整数序列</span></span>
<span class="line"><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> flux3 <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每秒发射一个递增整数</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 从集合创建</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> flux4 <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从集合派生</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建 Mono</span></span>
<span class="line"><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mono1 <span class="token operator">=</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 单值</span></span>
<span class="line"><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> mono2 <span class="token operator">=</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空序列（仅发送完成信号)</span></span>
<span class="line"><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> mono3 <span class="token operator">=</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromCallable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">fetchUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从异步任务创建</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-5-2-转换与处理数据‌" tabindex="-1"><a class="header-anchor" href="#_5-5-2-转换与处理数据‌"><span>5.5.2 转换与处理数据‌</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// Map：同步转换元素</span></span>
<span class="line"><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> upperFlux <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;A&quot;, &quot;B&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// FlatMap：异步转换（元素顺序可能乱序）</span></span>
<span class="line"><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> asyncFlux <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>id <span class="token operator">-&gt;</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromFuture</span><span class="token punctuation">(</span><span class="token function">fetchNameAsync</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 异步获取名称</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Filter：过滤元素</span></span>
<span class="line"><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> filtered <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仅保留偶数</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-5-3-错误处理" tabindex="-1"><a class="header-anchor" href="#_5-5-3-错误处理"><span>5.5.3 错误处理</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 捕获并返回默认值</span></span>
<span class="line"><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> safeFlux <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">onErrorReturn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 出错时返回</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 重试机制</span></span>
<span class="line"><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> retryFlux <span class="token operator">=</span> <span class="token function">httpRequestFlux</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 失败时最多重试 3 次</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-5-4-组合流" tabindex="-1"><a class="header-anchor" href="#_5-5-4-组合流"><span>5.5.4 组合流</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 合并流（并发执行）</span></span>
<span class="line"><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> merged <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>fluxA<span class="token punctuation">,</span> fluxB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 元素按到达时间混合</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 按顺序拼接</span></span>
<span class="line"><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> concatenated <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>fluxA<span class="token punctuation">,</span> fluxB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先消费 fluxA 再 fluxB</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 聚合多个流结果</span></span>
<span class="line"><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> zipped <span class="token operator">=</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>monoA<span class="token punctuation">,</span> monoB<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待两个 Mono 完成并聚合</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-5-5-背压控制" tabindex="-1"><a class="header-anchor" href="#_5-5-5-背压控制"><span>5.5.5 背压控制</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">limitRate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 每次请求 100 个元素</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span></span>
<span class="line">        data <span class="token operator">-&gt;</span> <span class="token function">process</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">        err <span class="token operator">-&gt;</span> <span class="token function">handleError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Completed&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 控制消费者拉取速率</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-6-事件感知-doonxxx" tabindex="-1"><a class="header-anchor" href="#_5-6-事件感知-doonxxx"><span>5.6 事件感知 <code>doOnXxx</code></span></a></h3><h4 id="_5-6-1-doonxxx-核心作用" tabindex="-1"><a class="header-anchor" href="#_5-6-1-doonxxx-核心作用"><span>5.6.1 <code>doOnXxx</code> 核心作用</span></a></h4><blockquote><ul><li><strong>功能定位</strong>‌ <ul><li>用于在流生命周期中插入‌<strong>副作用操作</strong>‌（如日志、监控、调试），‌<strong>不改变流内容</strong>‌，仅感知事件</li><li>典型场景：记录元素到达时间、统计错误率、资源清理。</li></ul></li><li><strong>与 <code>subscribe()</code> 回调的区别</strong>‌ <ul><li><code>subscribe()</code>：定义‌<strong>终端操作</strong>‌（如消费数据、处理错误)</li><li><code>doOnXxx</code>：定义‌<strong>中间操作</strong>‌，可在流处理链中多次调用。</li></ul></li></ul></blockquote><h4 id="_5-6-2-常用-doonxxx-方法‌" tabindex="-1"><a class="header-anchor" href="#_5-6-2-常用-doonxxx-方法‌"><span>5.6.2 常用 <code>doOnXxx</code> 方法‌</span></a></h4><h5 id="_5-6-2-1-基础事件感知" tabindex="-1"><a class="header-anchor" href="#_5-6-2-1-基础事件感知"><span>5.6.2.1 基础事件感知</span></a></h5><table><thead><tr><th>‌<strong>方法</strong>‌</th><th>‌<strong>触发时机</strong>‌</th><th>‌<strong>示例用途</strong>‌</th></tr></thead><tbody><tr><td><code>doOnSubscribe</code></td><td>订阅发生时</td><td>记录订阅时间戳</td></tr><tr><td><code>doOnNext</code></td><td>每个元素被发出时</td><td>打印元素值</td></tr><tr><td><code>doOnError</code></td><td>流发生错误时</td><td>记录错误日志</td></tr><tr><td><code>doOnComplete</code></td><td>流正常完成时</td><td>发送完成通知</td></tr><tr><td><code>doOnCancel</code></td><td>流被取消时</td><td>释放占用的资源</td></tr></tbody></table><h5 id="_5-6-2-2-复合事件感知‌" tabindex="-1"><a class="header-anchor" href="#_5-6-2-2-复合事件感知‌"><span>5.6.2.2 复合事件感知‌</span></a></h5><ul><li><p>‌<code>doOnEach</code>‌ 每个元素或信号（包括 <code>onNext</code>/<code>onComplete</code>/<code>onError</code>）到达时触发，通过 <code>Signal</code> 对象区分事件类型。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">doOnEach</span><span class="token punctuation">(</span>signal <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>signal<span class="token punctuation">.</span><span class="token function">isOnNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;元素: &quot;</span> <span class="token operator">+</span> signal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>signal<span class="token punctuation">.</span><span class="token function">isOnComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;流完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>‌**<code>doFinally</code>**‌ 流终止（无论成功、失败或取消）时触发，适合资源清理。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">doFinally</span><span class="token punctuation">(</span>type <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token class-name">SignalType</span><span class="token punctuation">.</span><span class="token constant">CANCEL</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;流被取消&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="_5-6-2-3-代码实践" tabindex="-1"><a class="header-anchor" href="#_5-6-2-3-代码实践"><span>5.6.2.3 代码实践</span></a></h5><ul><li><p>日志记录与监控</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">doOnSubscribe</span><span class="token punctuation">(</span>sub <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;订阅开始&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">doOnNext</span><span class="token punctuation">(</span>fruit <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;处理水果: {}&quot;</span><span class="token punctuation">,</span> fruit<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">doOnError</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;处理失败&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">doOnComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;处理完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>性能统计</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromCallable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">fetchFromDatabase</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">doOnSubscribe</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token function">startTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">doOnSuccess</span><span class="token punctuation">(</span>data <span class="token operator">-&gt;</span> <span class="token function">recordLatency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">doOnError</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">incrementErrorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>资源管理</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">openFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment">// 资源创建</span></span>
<span class="line">    file <span class="token operator">-&gt;</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span><span class="token function">readLines</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 流生成</span></span>
<span class="line">    file <span class="token operator">-&gt;</span> <span class="token function">closeFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>     <span class="token comment">// 资源释放</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">doOnCancel</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;文件读取被中断&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>其他实践</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/2 16:01</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorLearn01</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 1.多元素的流</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> just <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        just<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>o1 <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;o1: &quot;</span> <span class="token operator">+</span> o1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        just<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>o2 <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;o2: &quot;</span> <span class="token operator">+</span> o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 执行后发现， 都打印了1~10</span></span>
<span class="line">        <span class="token comment">// 说明对于每个订阅者来说,流都是一样的。  这就是广播模式</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 2.每秒发布者产生1个递增的数字</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> interval <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        interval<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;o: &quot;</span> <span class="token operator">+</span> o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 等消费者订阅结束 或者等到15s 直接结束</span></span>
<span class="line">        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="【6】核心组件log" tabindex="-1"><a class="header-anchor" href="#【6】核心组件log"><span>【6】核心组件<code>log()</code></span></a></h2><blockquote><p>这个比较简单，主要是理解什么地方调用log() 则打印哪个流的日志。</p></blockquote><ul><li><p><strong>代码实践一</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 13:10</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorLogLearn</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 这里的日志 是 OnNext(1,10)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>integer <span class="token operator">-&gt;</span> integer <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">//.log()</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>integer <span class="token operator">-&gt;</span> integer <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">//.log()</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 执行后</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Synchronous</span> <span class="token class-name">Fuseable</span><span class="token punctuation">]</span> <span class="token class-name">FluxRange<span class="token punctuation">.</span>RangeSubscriptionConditional</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">request</span><span class="token punctuation">(</span>unbounded<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">3</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">5</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">7</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">9</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">11</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>代码实践二</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 13:10</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorLogLearn</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">//.log()  // 这里的日志 是 OnNext(1,10)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>integer <span class="token operator">-&gt;</span> integer <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 这里的日志是 OnNext(2,4,6,8,10) 偶数</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>integer <span class="token operator">-&gt;</span> integer <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">//.log()</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 执行后：</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Fuseable</span><span class="token punctuation">]</span> <span class="token class-name">FluxFilterFuseable<span class="token punctuation">.</span>FilterFuseableSubscriber</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">request</span><span class="token punctuation">(</span>unbounded<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">3</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">5</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">7</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">9</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">11</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>代码实践三</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 13:10</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorLogLearn</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">//.log()  // 这里的日志 是 OnNext(1,10)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>integer <span class="token operator">-&gt;</span> integer <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">//.log()  // 这里的日志是 OnNext(2,4,6,8,10) 偶数</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>integer <span class="token operator">-&gt;</span> integer <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 这里就是偶数+1 3，5，7，9，11 5个数的流的日志了</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 执行后</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Fuseable</span><span class="token punctuation">]</span> <span class="token class-name">FluxMapFuseable<span class="token punctuation">.</span>MapFuseableSubscriber</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">request</span><span class="token punctuation">(</span>unbounded<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">3</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">5</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">7</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">9</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">11</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="【7】核心组件subscribe" tabindex="-1"><a class="header-anchor" href="#【7】核心组件subscribe"><span>【7】核心组件<code>subscribe()</code></span></a></h2><h3 id="_7-1-订阅方法api" tabindex="-1"><a class="header-anchor" href="#_7-1-订阅方法api"><span>7.1 订阅方法API</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Subscribe</span> and trigger the sequence<span class="token punctuation">.</span>   <span class="token comment">// 订阅并触发序列。</span></span>
<span class="line"></span>
<span class="line"><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Do</span> something <span class="token keyword">with</span> <span class="token namespace">each</span> produced value<span class="token punctuation">.</span>  <span class="token comment">// 对每个产生的值做些什么。</span></span>
<span class="line"></span>
<span class="line"><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">,</span></span>
<span class="line">          <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> errorConsumer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Deal</span> <span class="token keyword">with</span> <span class="token namespace">values</span> but also react <span class="token keyword">to</span> <span class="token namespace">an</span> error<span class="token punctuation">.</span>  <span class="token comment">// 处理值，但也对错误做出反应。</span></span>
<span class="line"></span>
<span class="line"><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">,</span></span>
<span class="line">          <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> errorConsumer<span class="token punctuation">,</span></span>
<span class="line">          <span class="token class-name">Runnable</span> completeConsumer<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token class-name">Deal</span> <span class="token keyword">with</span> <span class="token namespace">values</span> and errors but also run some code when the sequence successfully completes<span class="token punctuation">.</span></span>
<span class="line"><span class="token comment">// 处理值和错误，但也在序列成功完成时运行一些代码。</span></span>
<span class="line"></span>
<span class="line"><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">,</span></span>
<span class="line">          <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> errorConsumer<span class="token punctuation">,</span></span>
<span class="line">          <span class="token class-name">Runnable</span> completeConsumer<span class="token punctuation">,</span></span>
<span class="line">          <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Subscription</span><span class="token punctuation">&gt;</span></span> subscriptionConsumer<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token class-name">Deal</span> <span class="token keyword">with</span> <span class="token namespace">values</span> and errors and successful completion but also <span class="token keyword">do</span> something <span class="token keyword">with</span> <span class="token namespace">the</span> \`<span class="token class-name">Subscription</span>\` produced by <span class="token keyword">this</span> \`subscribe\` call<span class="token punctuation">.</span></span>
<span class="line"><span class="token comment">// 处理值和错误以及成功完成，但也对这个\`subscribe\`调用产生的\`Subscription\`做些什么。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">订阅方法</p><blockquote><p>流尚未被订阅不会触发流的流动，只有被订阅才会进行流的序列流动，且背压受订阅者控制流动速率。</p></blockquote></div><div class="hint-container tip"><p class="hint-container-title">TIP</p><blockquote><p>These variants return a reference to the subscription that you can use to cancel the subscription when no more data is needed. Upon cancellation, the source should stop producing values and clean up any resources it created. This cancel-and-clean-up behavior is represented in Reactor by the general-purpose <code>Disposable</code> interface.</p></blockquote><blockquote><p>这些变体返回对订阅的引用，当不需要更多数据时，您可以使用该引用来取消订阅。取消后，源应该停止生成值并清理它创建的任何资源。这种取消和清理行为在反应器中由通用的<code>Disposable</code>接口表示。</p></blockquote></div><h3 id="_7-2-订阅方法代码示例" tabindex="-1"><a class="header-anchor" href="#_7-2-订阅方法代码示例"><span>7.2 订阅方法代码示例</span></a></h3><blockquote><p>将根据上述的API对每种都进行代码示例</p></blockquote><ul><li><p><strong><code>subscribe()</code></strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 13:32</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorSubscribeLearn</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1. 不带参数的方法 subscribe()</span></span>
<span class="line">        <span class="token comment">// 设置当订阅者连接时产生三个值的Flux。</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> range <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 以最简单的方式订阅 即 默认订阅</span></span>
<span class="line">        range<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 执行后:</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Synchronous</span> <span class="token class-name">Fuseable</span><span class="token punctuation">]</span> <span class="token class-name">FluxRange<span class="token punctuation">.</span>RangeSubscription</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">request</span><span class="token punctuation">(</span>unbounded<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>subscribe(Consumer&lt;? super T&gt; consumer)</code></strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 13:32</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorSubscribeLearn</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1. 不带参数的方法 subscribe()</span></span>
<span class="line">        <span class="token comment">// 设置当订阅者连接时产生三个值的Flux。</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> range <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 以最简单的方式订阅 即 默认订阅</span></span>
<span class="line">        <span class="token comment">//range.log().subscribe();</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 2. subscribe(Consumer&lt;? super T&gt; consumer);</span></span>
<span class="line">        <span class="token comment">// 以函数式接口作为订阅者 打印流的元素</span></span>
<span class="line">        range<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 执行后:</span></span>
<span class="line"><span class="token number">1</span></span>
<span class="line"><span class="token number">2</span></span>
<span class="line"><span class="token number">3</span></span>
<span class="line"><span class="token number">4</span></span>
<span class="line"><span class="token number">5</span></span>
<span class="line"><span class="token number">6</span></span>
<span class="line"><span class="token number">7</span></span>
<span class="line"><span class="token number">8</span></span>
<span class="line"><span class="token number">9</span></span>
<span class="line"><span class="token number">10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>subscribe(Consumer&lt;? super T&gt; consumer, Consumer&lt;? super Throwable&gt; errorConsumer)</code></strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 13:32</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorSubscribeLearn</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1. 不带参数的方法 subscribe()</span></span>
<span class="line">        <span class="token comment">// 设置当订阅者连接时产生十个值的Flux。</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> range <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 以最简单的方式订阅 即 默认订阅</span></span>
<span class="line">        <span class="token comment">//range.log().subscribe();</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 2. subscribe(Consumer&lt;? super T&gt; consumer);</span></span>
<span class="line">        <span class="token comment">// 以函数式接口作为订阅者 打印流的元素</span></span>
<span class="line">        <span class="token comment">//range.subscribe(System.out::println);</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//3. subscribe(Consumer&lt;? super T&gt; consumer,</span></span>
<span class="line">        <span class="token comment">//          Consumer&lt;? super Throwable&gt; errorConsumer);</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> newRange <span class="token operator">=</span> range<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">return</span> i<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        newRange<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">,</span></span>
<span class="line">                error <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;error: &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 执行后：</span></span>
<span class="line"><span class="token number">1</span></span>
<span class="line"><span class="token number">2</span></span>
<span class="line"><span class="token number">3</span></span>
<span class="line"><span class="token number">4</span></span>
<span class="line"><span class="token number">5</span></span>
<span class="line"><span class="token number">6</span></span>
<span class="line"><span class="token number">7</span></span>
<span class="line"><span class="token number">8</span></span>
<span class="line">error<span class="token operator">:</span> <span class="token operator">/</span> by zero</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>subscribe(Consumer&lt;? super T&gt; consumer,Consumer&lt;? super Throwable&gt; errorConsumer,Runnable completeConsumer)</code></strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 13:32</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorSubscribeLearn</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1. 不带参数的方法 subscribe()</span></span>
<span class="line">        <span class="token comment">// 设置当订阅者连接时产生十个值的Flux。</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> range <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 以最简单的方式订阅 即 默认订阅</span></span>
<span class="line">        <span class="token comment">//range.log().subscribe();</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 2. subscribe(Consumer&lt;? super T&gt; consumer);</span></span>
<span class="line">        <span class="token comment">// 以函数式接口作为订阅者 打印流的元素</span></span>
<span class="line">        <span class="token comment">//range.subscribe(System.out::println);</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//3. subscribe(Consumer&lt;? super T&gt; consumer,</span></span>
<span class="line">        <span class="token comment">//          Consumer&lt;? super Throwable&gt; errorConsumer);</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> newRange <span class="token operator">=</span> range<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">return</span> i<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//        newRange.subscribe(System.out::println,</span></span>
<span class="line"><span class="token comment">//                error -&gt; {</span></span>
<span class="line"><span class="token comment">//                    System.out.println(&quot;error: &quot; + error.getMessage());</span></span>
<span class="line"><span class="token comment">//                });</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//4. subscribe(Consumer&lt;? super T&gt; consumer,Consumer&lt;? super Throwable&gt; errorConsumer,Runnable completeConsumer)</span></span>
<span class="line">        <span class="token comment">// 加了完成信号</span></span>
<span class="line">        range<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">,</span></span>
<span class="line">                error <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;error: &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 执行后:</span></span>
<span class="line"><span class="token number">1</span></span>
<span class="line"><span class="token number">2</span></span>
<span class="line"><span class="token number">3</span></span>
<span class="line"><span class="token number">4</span></span>
<span class="line"><span class="token number">5</span></span>
<span class="line"><span class="token number">6</span></span>
<span class="line"><span class="token number">7</span></span>
<span class="line"><span class="token number">8</span></span>
<span class="line"><span class="token number">9</span></span>
<span class="line"><span class="token number">10</span></span>
<span class="line">done</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>subscribe(Consumer&lt;? super T&gt; consumer,Consumer&lt;? super Throwable&gt; errorConsumer,Runnable completeConsumer,Consumer&lt;? super Subscription&gt; subscriptionConsumer)</code></strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 13:32</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorSubscribeLearn</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1. 不带参数的方法 subscribe()</span></span>
<span class="line">        <span class="token comment">// 设置当订阅者连接时产生十个值的Flux。</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> range <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 以最简单的方式订阅 即 默认订阅</span></span>
<span class="line">        <span class="token comment">//range.log().subscribe();</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 2. subscribe(Consumer&lt;? super T&gt; consumer);</span></span>
<span class="line">        <span class="token comment">// 以函数式接口作为订阅者 打印流的元素</span></span>
<span class="line">        <span class="token comment">//range.subscribe(System.out::println);</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//3. subscribe(Consumer&lt;? super T&gt; consumer,</span></span>
<span class="line">        <span class="token comment">//          Consumer&lt;? super Throwable&gt; errorConsumer);</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> newRange <span class="token operator">=</span> range<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">return</span> i<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//        newRange.subscribe(System.out::println,</span></span>
<span class="line"><span class="token comment">//                error -&gt; {</span></span>
<span class="line"><span class="token comment">//                    System.out.println(&quot;error: &quot; + error.getMessage());</span></span>
<span class="line"><span class="token comment">//                });</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//4. subscribe(Consumer&lt;? super T&gt; consumer,Consumer&lt;? super Throwable&gt; errorConsumer,Runnable completeConsumer)</span></span>
<span class="line">        <span class="token comment">// 加了完成信号</span></span>
<span class="line"><span class="token comment">//        range.subscribe(System.out::println,</span></span>
<span class="line"><span class="token comment">//                error -&gt; {</span></span>
<span class="line"><span class="token comment">//                    System.out.println(&quot;error: &quot; + error.getMessage());</span></span>
<span class="line"><span class="token comment">//                },</span></span>
<span class="line"><span class="token comment">//                () -&gt; System.out.println(&quot;done&quot;));</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 5.subscribe(Consumer&lt;? super T&gt; consumer,Consumer&lt;? super Throwable&gt; errorConsumer,Runnable completeConsumer,Consumer&lt;? super Subscription&gt; subscriptionConsumer)</span></span>
<span class="line"></span>
<span class="line">        range<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">,</span></span>
<span class="line">                error <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;error: &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token comment">// 执行1个中间操作    </span></span>
<span class="line">                subscription <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    subscription<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subscription<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//执行后：</span></span>
<span class="line"><span class="token number">1</span></span>
<span class="line"><span class="token number">2</span></span>
<span class="line"><span class="token number">3</span></span>
<span class="line"><span class="token number">4</span></span>
<span class="line"><span class="token number">5</span></span>
<span class="line"><span class="token number">6</span></span>
<span class="line"><span class="token number">7</span></span>
<span class="line"><span class="token number">8</span></span>
<span class="line"><span class="token number">9</span></span>
<span class="line"><span class="token number">10</span></span>
<span class="line">done</span>
<span class="line"><span class="token class-name"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span>FluxRange</span>$<span class="token class-name">RangeSubscription</span><span class="token annotation punctuation">@50675690</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_7-3-订阅方法中自定义消费者" tabindex="-1"><a class="header-anchor" href="#_7-3-订阅方法中自定义消费者"><span>7.3 订阅方法中自定义消费者</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>reactivestreams<span class="token punctuation">.</span></span><span class="token class-name">Subscription</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">BaseSubscriber</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">SignalType</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 自定义消费者</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 15:03</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorSubscribeCustomSubscriberLearn</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 发布者</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> range <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 订阅</span></span>
<span class="line">        range<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BaseSubscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//自定义实现hook 生命周期的钩子函数</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">hookOnSubscribe</span><span class="token punctuation">(</span><span class="token class-name">Subscription</span> subscription<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;订阅的时候触发本钩子函数...&quot;</span> <span class="token operator">+</span> subscription<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 开始订阅元素</span></span>
<span class="line">                <span class="token function">request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每次要1个</span></span>
<span class="line">                <span class="token comment">//requestUnbounded();// 每次要无限个</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">hookOnNext</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;元素到达的时候触发本钩子函数...&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 开始订阅下一个元素</span></span>
<span class="line">                <span class="token function">request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">hookOnComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;元素全部流动结束的时候触发本钩子函数...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">hookOnError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;元素流动过程中触发报错的时候触发本钩子函数...&quot;</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">hookOnCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;元素取消发布的时候触发本钩子函数...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">hookFinally</span><span class="token punctuation">(</span><span class="token class-name">SignalType</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;资源结束的时候触发本钩子函数...&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//执行后：</span></span>
<span class="line">订阅的时候触发本钩子函数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span>FluxRange$<span class="token class-name">RangeSubscription</span><span class="token annotation punctuation">@46f5f779</span></span>
<span class="line">元素到达的时候触发本钩子函数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.1</span></span>
<span class="line">元素到达的时候触发本钩子函数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.2</span></span>
<span class="line">元素到达的时候触发本钩子函数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.3</span></span>
<span class="line">元素到达的时候触发本钩子函数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.4</span></span>
<span class="line">元素到达的时候触发本钩子函数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.5</span></span>
<span class="line">元素到达的时候触发本钩子函数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.6</span></span>
<span class="line">元素到达的时候触发本钩子函数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.7</span></span>
<span class="line">元素到达的时候触发本钩子函数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.8</span></span>
<span class="line">元素到达的时候触发本钩子函数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.9</span></span>
<span class="line">元素到达的时候触发本钩子函数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.10</span></span>
<span class="line">元素全部流动结束的时候触发本钩子函数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">资源结束的时候触发本钩子函数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>onComplete</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里就不演示 <code>oncancle</code> <code>onError</code>了. 有兴趣的可以自行改下代码调试下.</p></blockquote><h2 id="【8】核心-请求重塑" tabindex="-1"><a class="header-anchor" href="#【8】核心-请求重塑"><span>【8】核心 - 请求重塑</span></a></h2><blockquote><p><img src="`+y+`" alt="image-20250707151939678"></p></blockquote><blockquote><p>When implementing backpressure in Reactor, the way consumer pressure is propagated back to the source is by sending a <code>request</code> to the upstream operator. The sum of current requests is sometimes referenced to as the current “demand”, or “pending request”. Demand is capped at <code>Long.MAX_VALUE</code>, representing an unbounded request (meaning “produce as fast as you can” — basically disabling backpressure).</p></blockquote><blockquote><p>在反应器中实现背压时，消费者压力传播回源的方式是向上游操作员发送请求。当前请求的总和有时被引用为当前“需求”或“待处理请求”。需求上限为Long.MAX_VALUE，代表无界请求（意思是“尽可能快地生产”——基本上禁用反压）。</p></blockquote><blockquote><p>The first request comes from the final subscriber at subscription time, yet the most direct ways of subscribing all immediately trigger an unbounded request of <code>Long.MAX_VALUE</code>:</p></blockquote><blockquote><p>第一个请求来自订阅时的最终订阅者，但最直接的订阅方式都会立即触发Long.MAX_VALUE的无界请求：</p><ul><li><code>subscribe()</code> and most of its lambda-based variants (to the exception of the one that has a <code>Consumer&lt;Subscription&gt;</code>)</li><li>订阅（）及其大多数基于lambda的变体（具有消费者&lt;订阅&gt;的变体除外）</li><li><code>block()</code>, <code>blockFirst()</code> and <code>blockLast()</code></li><li>阻塞，阻塞第一个，阻塞最后1个</li><li>iterating over a <code>toIterable()</code> or <code>toStream()</code></li><li>迭代，转迭代，转流</li></ul></blockquote><blockquote><p>The simplest way of customizing the original request is to <code>subscribe</code> with a <code>BaseSubscriber</code> with the <code>hookOnSubscribe</code> method overridden, as the following example shows:</p><p>自定义原始请求的最简单方法是使用覆盖hookOnSubscribe方法的BaseSubscriber订阅，如下例所示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>reactivestreams<span class="token punctuation">.</span></span><span class="token class-name">Subscription</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">BaseSubscriber</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 请求重塑</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 15:32</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorReshapeRequests</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">doOnRequest</span><span class="token punctuation">(</span>r <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;request of &quot;</span> <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BaseSubscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">                    <span class="token annotation punctuation">@Override</span></span>
<span class="line">                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hookOnSubscribe</span><span class="token punctuation">(</span><span class="token class-name">Subscription</span> subscription<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token function">request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                    <span class="token annotation punctuation">@Override</span></span>
<span class="line">                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hookOnNext</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Cancelling after having received &quot;</span> <span class="token operator">+</span> integer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                        <span class="token comment">// 这个就是取消订阅了</span></span>
<span class="line">                        <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 执行后:</span></span>
<span class="line">request of <span class="token number">1</span></span>
<span class="line"><span class="token class-name">Cancelling</span> after having received <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><div class="hint-container warning"><p class="hint-container-title">注意事项</p><blockquote><p>When manipulating a request, you must be careful to produce enough demand for the sequence to advance, or your Flux can get “stuck”. That is why <code>BaseSubscriber</code> defaults to an unbounded request in <code>hookOnSubscribe</code>. When overriding this hook, you should usually call <code>request</code> at least once.</p></blockquote><blockquote><p>操作请求时，您必须小心产生足够的需求以使序列前进，否则您的<code>Flux</code>可能会“卡住”。这就是为什么<code>BaseSubscriber</code>在<code>hookOnSubscribe</code>中默认为无界请求。覆盖此钩子函数时，您通常应该至少调用一次请求。</p></blockquote></div><h3 id="_8-1-buffer-n" tabindex="-1"><a class="header-anchor" href="#_8-1-buffer-n"><span>8.1 buffer(N)</span></a></h3><div class="hint-container info"><p class="hint-container-title">资料</p><blockquote><p>One thing to keep in mind is that demand expressed at the subscribe level <strong>can</strong> be reshaped by each operator in the upstream chain. A textbook case is the <code>buffer(N)</code> operator: If it receives a <code>request(2)</code>, it is interpreted as a demand for <strong>two full buffers</strong>. As a consequence, since buffers need <code>N</code> elements to be considered full, the <code>buffer</code> operator reshapes the request to <code>2 x N</code>.</p></blockquote><blockquote><p>需要记住的一件事是，在订阅级别表达的需求可以被上游链中的每个运算符重塑。一个典型的案例是缓冲区（N）运算符：如果它收到一个请求（2），它被解释为对两个完整缓冲区的需求。结果，由于缓冲区需要N个元素才能被认为是完整的，缓冲区运算符将请求重塑为2 x N。</p></blockquote></div><p><img src="`+w+`" alt="image-20250707162516688"></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 请求重塑 buffer N 代码示例</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 16:19</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorBufferNLearn</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> buffer <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 缓冲区 缓存2个元素 消费1次可以拿到2个元素 凑满后批量发给消费者</span></span>
<span class="line">        buffer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>b <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;buffer.type: &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, value: &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 执行后：</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">         buffer.type: class java.util.ArrayList, value: [1, 2]</span>
<span class="line">         buffer.type: class java.util.ArrayList, value: [3, 4]</span>
<span class="line">         buffer.type: class java.util.ArrayList, value: [5, 6]</span>
<span class="line">         buffer.type: class java.util.ArrayList, value: [7, 8]</span>
<span class="line">         buffer.type: class java.util.ArrayList, value: [9, 10]</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2-limitrate-n" tabindex="-1"><a class="header-anchor" href="#_8-2-limitrate-n"><span>8.2 limitRate(N)</span></a></h3><div class="hint-container info"><p class="hint-container-title">资料</p><blockquote><p><code>limitRate(N)</code> splits the downstream requests so that they are propagated upstream in smaller batches. For instance, a request of <code>100</code> made to <code>limitRate(10)</code> would result in, at most, <code>10</code> requests of <code>10</code> being propagated to the upstream. Note that, in this form, <code>limitRate</code> actually implements the replenishing optimization discussed earlier.</p></blockquote><blockquote><p>限制速率（N）拆分下游请求，以便它们以较小的批次向上游传播。例如，向限制速率（10）发出100的请求最多会导致10个10的请求被传播到上游。请注意，在这种形式下，限制速率实际上实现了前面讨论的补充优化。</p></blockquote></div><p><img src="`+F+`" alt="image-20250707163617974"></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 请求重塑 请求速率控制</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 16:26</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorLimitRateLearn</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> limitRate <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">limitRate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        limitRate<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 75%的预取策略 若75%的元素已经处理  则继续取新的75%的元素进入预取池 进行处理</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 执行后:</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Synchronous</span> <span class="token class-name">Fuseable</span><span class="token punctuation">]</span> <span class="token class-name">FluxRange<span class="token punctuation">.</span>RangeSubscription</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">73</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">74</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">)</span>  取新的<span class="token number">75</span><span class="token operator">%</span>元素</span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">76</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">79</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">147</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">148</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">149</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">)</span> 取新的<span class="token number">75</span><span class="token operator">%</span>元素</span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">151</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">152</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">153</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">154</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">972</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">973</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">974</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">975</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">)</span> 取新的<span class="token number">75</span><span class="token operator">%</span>元素</span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">976</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">977</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">978</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">979</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">980</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">981</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">982</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">983</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">984</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">985</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">986</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">987</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">988</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">989</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">990</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">991</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">992</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">993</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">994</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">995</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">996</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">997</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">998</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3-limitrequest-n-expired" tabindex="-1"><a class="header-anchor" href="#_8-3-limitrequest-n-expired"><span>8.3 limitRequest(N) Expired</span></a></h3><div class="hint-container info"><p class="hint-container-title">资料</p><blockquote><p><code>limitRequest(N)</code>, on the other hand, <strong>caps</strong> the downstream request to a maximum total demand. It adds up requests up to <code>N</code>. If a single <code>request</code> does not make the total demand overflow over <code>N</code>, that particular request is wholly propagated upstream. After that amount has been emitted by the source, <code>limitRequest</code> considers the sequence complete, sends an <code>onComplete</code> signal downstream, and cancels the source.</p></blockquote><blockquote><p>另一方面，限制请求（N）将目标端请求限制为最大总需求。它将请求加起来最多为N。如果单个请求没有使总需求溢出超过N，则该特定请求完全向上游传播。在源发出该数量后，限制请求认为序列已完成，向目标端发送onFull信号，并取消源。</p></blockquote></div><h2 id="【9】核心组件-以编程方式创建序列" tabindex="-1"><a class="header-anchor" href="#【9】核心组件-以编程方式创建序列"><span>【9】核心组件 - 以编程方式创建序列</span></a></h2><h3 id="_9-1-同步生成" tabindex="-1"><a class="header-anchor" href="#_9-1-同步生成"><span>9.1 同步生成</span></a></h3><blockquote><p>编程创建<code>Flux</code>的最简单形式是通过生成方法，该方法采用生成器函数。</p></blockquote><blockquote><p>这是用于同步和逐个排放的，这意味着接收器是一个同步接收器，并且每次回调调用最多只能调用一次它的<code>next()</code>方法。然后您可以额外调用<code>error\`\`（Throwable）</code>或完成<code>（）</code>，但这是可选的。</p></blockquote><blockquote><p>最有用的变体可能是允许您保留接收器使用详情可见的状态以决定下一步发出什么的变体。然后生成器函数变成<code>BiFunction&lt;S， SynsynousSink&lt;T&gt;，S&gt;</code>，其中<code>&lt;S&gt;</code>是状态对象的类型。您必须为初始状态/初状态提供一个供应商<code>&lt;S&gt;</code>，现在生成器函数在每轮都返回一个新状态。</p></blockquote><blockquote><p>For instance, you could use an <code>int</code> as the state:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 17:00</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorGenerateSeqLearn01</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1. 同步生成序列</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> flux <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token comment">// 我们提供初始状态值0。</span></span>
<span class="line">                <span class="token comment">// 这里的state就是状态值 sink就是水槽、管道、数据的接收器</span></span>
<span class="line">                <span class="token punctuation">(</span>state<span class="token punctuation">,</span> sink<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    sink<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&quot;3 x &quot;</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 我们使用状态来选择要发射的内容（乘法表3中的一行）。</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> sink<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我们也用它来选择何时停止。</span></span>
<span class="line">                    <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 我们返回一个我们在下一次调用中使用的新状态（除非序列在这个调用中终止）。</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        flux<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 执行后:</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Fuseable</span><span class="token punctuation">]</span> <span class="token class-name">FluxGenerate<span class="token punctuation">.</span>GenerateSubscription</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">request</span><span class="token punctuation">(</span>unbounded<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">8</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">9</span> <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">10</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>您也可以使用可变的<code>&lt;S&gt;</code>。上面的实例可以使用单个原子长作为状态重写，每轮都改变它：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicLong</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 17:00</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorGenerateSeqLearn01</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1. 同步生成序列</span></span>
<span class="line"><span class="token comment">//        Flux&lt;String&gt; flux = Flux.generate(</span></span>
<span class="line"><span class="token comment">//                () -&gt; 0,   // 我们提供初始状态值0。</span></span>
<span class="line"><span class="token comment">//                // 这里的state就是状态值 sink就是水槽、管道、数据的接收器</span></span>
<span class="line"><span class="token comment">//                (state, sink) -&gt; {</span></span>
<span class="line"><span class="token comment">//                    sink.next(&quot;3 x &quot; + state + &quot; = &quot; + 3 * state);  // 我们使用状态来选择要发射的内容（乘法表3中的一行）。</span></span>
<span class="line"><span class="token comment">//                    if (state == 10) sink.complete(); // 我们也用它来选择何时停止。</span></span>
<span class="line"><span class="token comment">//                    return state + 1;  // 我们返回一个我们在下一次调用中使用的新状态（除非序列在这个调用中终止）。</span></span>
<span class="line"><span class="token comment">//                });</span></span>
<span class="line">        <span class="token comment">//flux.log().subscribe();</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 您也可以使用可变的&lt;S&gt;。上面的实例可以使用单个原子长作为状态重写，每轮都改变它：</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> flux <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token class-name">AtomicLong</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">(</span>state<span class="token punctuation">,</span> sink<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">long</span> i <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    sink<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&quot;3 x &quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> sink<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">return</span> state<span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        flux<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 执行后：</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Fuseable</span><span class="token punctuation">]</span> <span class="token class-name">FluxGenerate<span class="token punctuation">.</span>GenerateSubscription</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">request</span><span class="token punctuation">(</span>unbounded<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">8</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">9</span> <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span> x <span class="token number">10</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_9-2-异步或者多线程生成序列" tabindex="-1"><a class="header-anchor" href="#_9-2-异步或者多线程生成序列"><span>9.2 异步或者多线程生成序列</span></a></h3><blockquote><p><code>Create</code>是一种更高级的<code>Flux</code>编程创建形式，适用于每轮多次发射，甚至来自多个线程。</p><p>它公开了一个<code>FLUSink</code>，以及它的下一个、错误和完整的方法。与生成相反，它没有基于状态的变体。另一方面，它可以在回调/回传中触发多线程事件。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">FluxSink</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 17:00</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorGenerateSeqLearn01</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1. 同步生成序列</span></span>
<span class="line"><span class="token comment">//        Flux&lt;String&gt; flux = Flux.generate(</span></span>
<span class="line"><span class="token comment">//                () -&gt; 0,   // 我们提供初始状态值0。</span></span>
<span class="line"><span class="token comment">//                // 这里的state就是状态值 sink就是水槽、管道、数据的接收器</span></span>
<span class="line"><span class="token comment">//                (state, sink) -&gt; {</span></span>
<span class="line"><span class="token comment">//                    sink.next(&quot;3 x &quot; + state + &quot; = &quot; + 3 * state);  // 我们使用状态来选择要发射的内容（乘法表3中的一行）。</span></span>
<span class="line"><span class="token comment">//                    if (state == 10) sink.complete(); // 我们也用它来选择何时停止。</span></span>
<span class="line"><span class="token comment">//                    return state + 1;  // 我们返回一个我们在下一次调用中使用的新状态（除非序列在这个调用中终止）。</span></span>
<span class="line"><span class="token comment">//                });</span></span>
<span class="line">        <span class="token comment">//flux.log().subscribe();</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//        // 您也可以使用可变的&lt;S&gt;。上面的实例可以使用单个原子长作为状态重写，每轮都改变它：</span></span>
<span class="line"><span class="token comment">//        Flux&lt;String&gt; flux = Flux.generate(</span></span>
<span class="line"><span class="token comment">//                AtomicLong::new,</span></span>
<span class="line"><span class="token comment">//                (state, sink) -&gt; {</span></span>
<span class="line"><span class="token comment">//                    long i = state.getAndIncrement();</span></span>
<span class="line"><span class="token comment">//                    sink.next(&quot;3 x &quot; + i + &quot; = &quot; + 3 * i);</span></span>
<span class="line"><span class="token comment">//                    if (i == 10) sink.complete();</span></span>
<span class="line"><span class="token comment">//                    return state;</span></span>
<span class="line"><span class="token comment">//                });</span></span>
<span class="line"><span class="token comment">//        flux.log().subscribe();</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 2、异步或者多线程创建序列</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>sink <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">MyListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyListener</span><span class="token punctuation">(</span>sink<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                listener<span class="token punctuation">.</span><span class="token function">online</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyListener</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token class-name">FluxSink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> sink<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">MyListener</span><span class="token punctuation">(</span><span class="token class-name">FluxSink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> sink<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>sink <span class="token operator">=</span> sink<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">online</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            sink<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&quot;hello-&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//执行后:</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token class-name">FluxCreate<span class="token punctuation">.</span>BufferAsyncSink</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token function">request</span><span class="token punctuation">(</span>unbounded<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token function">onNext</span><span class="token punctuation">(</span>hello<span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token function">onNext</span><span class="token punctuation">(</span>hello<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token function">onNext</span><span class="token punctuation">(</span>hello<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token function">onNext</span><span class="token punctuation">(</span>hello<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token function">onNext</span><span class="token punctuation">(</span>hello<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token function">onNext</span><span class="token punctuation">(</span>hello<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token function">onNext</span><span class="token punctuation">(</span>hello<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token function">onNext</span><span class="token punctuation">(</span>hello<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token function">onNext</span><span class="token punctuation">(</span>hello<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token function">onNext</span><span class="token punctuation">(</span>hello<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-3-自定义元素处理器-handle" tabindex="-1"><a class="header-anchor" href="#_9-3-自定义元素处理器-handle"><span>9.3 自定义元素处理器 Handle</span></a></h3><p><img src="`+N+`" alt="image-20250707174850147"></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 17:46</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorCustomHandleLearn</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 自定义处理器 Handle</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> handle <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    v <span class="token operator">=</span> v <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">                    e<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        handle<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//执行后：</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Fuseable</span><span class="token punctuation">]</span> <span class="token class-name">FluxHandleFuseable<span class="token punctuation">.</span>HandleFuseableSubscriber</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">request</span><span class="token punctuation">(</span>unbounded<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span> <span class="token constant">INFO</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【10】核心-自定义线程调度规则" tabindex="-1"><a class="header-anchor" href="#【10】核心-自定义线程调度规则"><span>【10】核心 - 自定义线程调度规则</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>scheduler<span class="token punctuation">.</span></span><span class="token class-name">Schedulers</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ArrayBlockingQueue</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/7 17:51</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactorThreadsAndSchedulesLearn01</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 调度器  线程池</span></span>
<span class="line">        <span class="token class-name">Schedulers</span><span class="token punctuation">.</span><span class="token function">boundedElastic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 有界  弹性调度 不是无限扩充的线程池  10*CPU的线程池 队列默认100K 默认60秒存活时间</span></span>
<span class="line">        <span class="token class-name">Schedulers</span><span class="token punctuation">.</span><span class="token function">immediate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无执行上下文 当前线程执行所有操作  默认使用这个</span></span>
<span class="line">        <span class="token class-name">Schedulers</span><span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用固定的单线程执行所有操作</span></span>
<span class="line">        <span class="token class-name">Schedulers</span><span class="token punctuation">.</span><span class="token function">fromExecutor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 自定义的线程池</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// publishOn(Schedulers.boundedElastic())  改变发布者的线程池</span></span>
<span class="line">        <span class="token comment">// subscribeOn(Schedulers.boundedElastic()) 改变订阅者的线程池</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">publishOn</span><span class="token punctuation">(</span><span class="token class-name">Schedulers</span><span class="token punctuation">.</span><span class="token function">boundedElastic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token doc-comment comment">/**</span>
<span class="line">         * [ INFO] (main) | onSubscribe([Fuseable] FluxPublishOn.PublishOnSubscriber)</span>
<span class="line">         * [ INFO] (main) | request(unbounded)</span>
<span class="line">         * [ INFO] (boundedElastic-1) | onNext(1)</span>
<span class="line">         * [ INFO] (boundedElastic-1) | onNext(2)</span>
<span class="line">         * [ INFO] (boundedElastic-1) | onNext(3)</span>
<span class="line">         * [ INFO] (boundedElastic-1) | onNext(4)</span>
<span class="line">         * [ INFO] (boundedElastic-1) | onNext(5)</span>
<span class="line">         * [ INFO] (boundedElastic-1) | onNext(6)</span>
<span class="line">         * [ INFO] (boundedElastic-1) | onNext(7)</span>
<span class="line">         * [ INFO] (boundedElastic-1) | onNext(8)</span>
<span class="line">         * [ INFO] (boundedElastic-1) | onNext(9)</span>
<span class="line">         * [ INFO] (boundedElastic-1) | onNext(10)</span>
<span class="line">         * [ INFO] (boundedElastic-1) | onComplete()</span>
<span class="line">         */</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">publishOn</span><span class="token punctuation">(</span><span class="token class-name">Schedulers</span><span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token doc-comment comment">/**</span>
<span class="line">         * [ INFO] (main) | onSubscribe([Fuseable] FluxPublishOn.PublishOnSubscriber)</span>
<span class="line">         * [ INFO] (main) | request(unbounded)</span>
<span class="line">         * [ INFO] (single-1) | onNext(1)</span>
<span class="line">         * [ INFO] (single-1) | onNext(2)</span>
<span class="line">         * [ INFO] (single-1) | onNext(3)</span>
<span class="line">         * [ INFO] (single-1) | onNext(4)</span>
<span class="line">         * [ INFO] (single-1) | onNext(5)</span>
<span class="line">         * [ INFO] (single-1) | onNext(6)</span>
<span class="line">         * [ INFO] (single-1) | onNext(7)</span>
<span class="line">         * [ INFO] (single-1) | onNext(8)</span>
<span class="line">         * [ INFO] (single-1) | onNext(9)</span>
<span class="line">         * [ INFO] (single-1) | onNext(10)</span>
<span class="line">         * [ INFO] (single-1) | onComplete()</span>
<span class="line">         */</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 异步换线程了 所以需要阻塞下</span></span>
<span class="line">        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【11】reactor-api的常用操作" tabindex="-1"><a class="header-anchor" href="#【11】reactor-api的常用操作"><span>【11】Reactor API的常用操作</span></a></h2><blockquote><p>Reactor API的常规操作有哪些:</p><ul><li><code>fliter</code></li><li><code>flatMap</code></li><li><code>concatMap</code></li><li><code>transform</code></li><li><code>defautlIfEmpty</code></li><li><code>switchIfEmpty</code></li><li><code>merge</code></li><li><code>zip</code></li></ul></blockquote><h3 id="_11-1-filter" tabindex="-1"><a class="header-anchor" href="#_11-1-filter"><span>11.1 <code>filter</code></span></a></h3><blockquote><p>数据流经过这个API会根据<code>filter</code>中的断言来挑选符合它条件的数据流进入后面的操作中。</p></blockquote><p><img src="`+q+`" alt="image-20250708102925852"></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/8 9:44</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterTest</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">filterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// filter 挑选符合条件的元素或者对象</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">//.log()</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">// 挑选偶数</span></span>
<span class="line">                <span class="token comment">//.log()</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">[ INFO] (main) | onSubscribe([Synchronous Fuseable] FluxArray.ArrayConditionalSubscription)</span>
<span class="line">[ INFO] (main) | request(unbounded)</span>
<span class="line">[ INFO] (main) | onNext(1)</span>
<span class="line">[ INFO] (main) | request(1)</span>
<span class="line">[ INFO] (main) | onNext(2)</span>
<span class="line">[ INFO] (main) | onNext(3)</span>
<span class="line">[ INFO] (main) | request(1)</span>
<span class="line">[ INFO] (main) | onNext(4)</span>
<span class="line">[ INFO] (main) | onComplete()</span>
<span class="line">         */</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">// 挑选偶数</span></span>
<span class="line">                <span class="token comment">//.log()</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">[ INFO] (main) | onSubscribe([Synchronous Fuseable] FluxRange.RangeSubscriptionConditional)</span>
<span class="line">[ INFO] (main) | request(unbounded)</span>
<span class="line">[ INFO] (main) | onNext(1)</span>
<span class="line">[ INFO] (main) | onNext(2)</span>
<span class="line">[ INFO] (main) | onNext(3)</span>
<span class="line">[ INFO] (main) | onNext(4)</span>
<span class="line">[ INFO] (main) | onComplete()</span>
<span class="line"></span>
<span class="line">         */</span></span>
<span class="line">	<span class="token comment">// 这里打印日志不一样的点  range 和 just 得到的数据类型不同， filter 会存在先执行 后执行的问题</span></span>
<span class="line">    <span class="token comment">// just中值是数据库流为空 1个个的发射， range是 已经把这些值放入 数据流 然后一起发射 消费端再订阅</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-2-flatmap" tabindex="-1"><a class="header-anchor" href="#_11-2-flatmap"><span>11.2 <code>flatMap</code></span></a></h3><blockquote><p>扁平化数据流操作。可以将数据流的某个元素按照规则扁平化为多个不同的元素的操作。</p></blockquote><p><img src="`+O+`" alt="image-20250708102844131"></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/8 10:23</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlatMapTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> just <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;zhang san&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;li si&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wang er ma zi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 将上述数据流的数据按照空格切分为多个字符串</span></span>
<span class="line">        just<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">fromArray</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        这里是原数据库流怎么被扁平化的操作的日志</span>
<span class="line">        [ INFO] (main) | onSubscribe([Synchronous Fuseable] FluxArray.ArraySubscription)</span>
<span class="line">        [ INFO] (main) | request(256)</span>
<span class="line">        [ INFO] (main) | onNext(zhang san)</span>
<span class="line">        [ INFO] (main) | request(1)              // 这里就是先扁平化 然后再取值</span>
<span class="line">        [ INFO] (main) | onNext(li si)</span>
<span class="line">        [ INFO] (main) | request(1)             // 这里就是先扁平化 然后再取值</span>
<span class="line">        [ INFO] (main) | onNext(wang er ma zi)</span>
<span class="line">        [ INFO] (main) | request(1)             // 这里就是先扁平化 然后再取值</span>
<span class="line">        [ INFO] (main) | onComplete()</span>
<span class="line">         */</span></span>
<span class="line"></span>
<span class="line">        just<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">fromArray</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        这里就是打印扁平化之后的所有元素</span>
<span class="line">        [ INFO] (main) onSubscribe(FluxFlatMap.FlatMapMain)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (main) onNext(zhang)</span>
<span class="line">        [ INFO] (main) onNext(san)</span>
<span class="line">        [ INFO] (main) onNext(li)</span>
<span class="line">        [ INFO] (main) onNext(si)</span>
<span class="line">        [ INFO] (main) onNext(wang)</span>
<span class="line">        [ INFO] (main) onNext(er)</span>
<span class="line">        [ INFO] (main) onNext(ma)</span>
<span class="line">        [ INFO] (main) onNext(zi)</span>
<span class="line">        [ INFO] (main) onComplete()</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-3-concatmap" tabindex="-1"><a class="header-anchor" href="#_11-3-concatmap"><span>11.3 <code>concatMap</code></span></a></h3><blockquote><p>这里有三个API</p><ul><li><code>concat</code> : <code>Flux</code>.<code>concat(Publisher1,Publisher2,...)</code> 可以连接多个发布者 将多个发布者的数据源串在一起</li><li><code>concatMap</code>: <code>Flux.just(1,2,3,4).concatMap(Function)</code> 对原数据源的每个元素进行转换之后拼接一起组成新的数据源</li><li><code>concatWith</code>: <code>Flux.just(1,2).concatWith(Flux.just(3,4))</code> 老数据源和同类型的新数据源拼接在一起</li></ul></blockquote><p><img src="`+I+'" alt="image-20250708111143086"></p><p><img src="'+j+'" alt="image-20250708113738020"></p><p><img src="'+S+'" alt="image-20250708113719379"></p><p><img src="'+_+`" alt="image-20250708113906096"></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/8 11:10</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcatMapTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">concatTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// \`concat\` :  \`Flux\`.\`concat(Publisher1,Publisher2,...)\`  可以连接多个发布者 将多个发布者的数据源串在一起</span></span>
<span class="line">        <span class="token comment">// 这种支持不同类型的数据源之间的拼接 串联</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;zhang san&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;li si&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        [ INFO] (main) onSubscribe(FluxConcatArray.ConcatArraySubscriber)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (main) onNext(1)</span>
<span class="line">        [ INFO] (main) onNext(2)</span>
<span class="line">        [ INFO] (main) onNext(3)</span>
<span class="line">        [ INFO] (main) onNext(4)</span>
<span class="line">        [ INFO] (main) onNext(zhang san)</span>
<span class="line">        [ INFO] (main) onNext(li si)</span>
<span class="line">        [ INFO] (main) onComplete()</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">concatMapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// \`concatMap\`: \`Flux.just(1,2,3,4).concatMap(Function)\` 对原数据源的每个元素进行转换之后拼接一起组成新的数据源</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">concatMap</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        [ INFO] (main) onSubscribe(FluxConcatMapNoPrefetch.FluxConcatMapNoPrefetchSubscriber)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (main) onNext(2)</span>
<span class="line">        [ INFO] (main) onNext(3)</span>
<span class="line">        [ INFO] (main) onNext(4)</span>
<span class="line">        [ INFO] (main) onComplete()</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">concatWithTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// \`concatWith\`: \`Flux.just(1,2).concatWith(Flux.just(3,4))\` 老数据源和同类型的新数据源拼接在一起</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">concatWith</span><span class="token punctuation">(</span><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        [ INFO] (main) | onSubscribe([Fuseable] FluxOnAssembly.OnAssemblySubscriber)</span>
<span class="line">        [ INFO] (main) | request(unbounded)</span>
<span class="line">        [ INFO] (main) | onNext(1)</span>
<span class="line">        [ INFO] (main) | onNext(2)</span>
<span class="line">        [ INFO] (main) | onNext(3)</span>
<span class="line">        [ INFO] (main) | onNext(1)</span>
<span class="line">        [ INFO] (main) | onNext(2)</span>
<span class="line">        [ INFO] (main) | onNext(3)</span>
<span class="line">        [ INFO] (main) | onNext(4)</span>
<span class="line">        [ INFO] (main) | onComplete()</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-4-transform" tabindex="-1"><a class="header-anchor" href="#_11-4-transform"><span>11.4 <code>transform</code></span></a></h3><blockquote><p>把流变成新数据</p><ul><li><code>transform</code> : 直接变换 <ul><li><img src="`+C+'" alt="image-20250708131356930"></li></ul></li><li><code>transformDeferred</code>&quot;: 带有延迟的变换 <ul><li><img src="'+E+`" alt="image-20250708131606176"></li></ul></li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/8 13:04</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransformTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transformTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 假设一个场景</span></span>
<span class="line">        <span class="token comment">// transform 不会共享变量 各自处理各自的</span></span>
<span class="line">        <span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> transform <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 第1次调用 则转大写</span></span>
<span class="line">                        <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 非第一次 返回原值</span></span>
<span class="line">                        <span class="token keyword">return</span> v<span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        transform<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;订阅者1： &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        transform<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;订阅者2： &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        订阅者1： A</span>
<span class="line">        订阅者1： B</span>
<span class="line">        订阅者1： C</span>
<span class="line">        订阅者2： A</span>
<span class="line">        订阅者2： B</span>
<span class="line">        订阅者2： C</span>
<span class="line">         */</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// transformDeferred 有状态的变化  count</span></span>
<span class="line">        <span class="token class-name">AtomicInteger</span> count1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> transform1 <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">transformDeferred</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>count1<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 第1次调用 则转大写</span></span>
<span class="line">                        <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 非第一次 返回原值</span></span>
<span class="line">                        <span class="token keyword">return</span> v<span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        transform1<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;订阅者3： &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        transform1<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;订阅者4： &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        订阅者3： A</span>
<span class="line">        订阅者3： B</span>
<span class="line">        订阅者3： C</span>
<span class="line">        订阅者4： a</span>
<span class="line">        订阅者4： b</span>
<span class="line">        订阅者4： c</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-5-ifempty" tabindex="-1"><a class="header-anchor" href="#_11-5-ifempty"><span>11.5 <code>ifEmpty</code></span></a></h3><blockquote><p>就是判空</p><ul><li><code>defaultIfEmpty</code> : 若发布者的数据流为空则给默认流，反之使用该发布者的流 (兜底处理) <ul><li><img src="`+T+'" alt="image-20250708133704304"></li></ul></li><li><code>switchIfEmpty</code>： 动态兜底转换数据流 <ul><li><img src="'+M+`" alt="image-20250708133652556"></li></ul></li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/8 13:31</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmptyTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Mono.just(null) 这个不是空流</span></span>
<span class="line">        <span class="token comment">// Mono.empty(); 这个是空流 只有1个完成信号</span></span>
<span class="line">        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">defaultIfEmpty</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// return Mono.empty();</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-6-merge" tabindex="-1"><a class="header-anchor" href="#_11-6-merge"><span>11.6 <code>merge</code></span></a></h3><blockquote><p>类似<code>concat</code>，它也有三个API，这个叫做**<code>合并</code>**</p><ul><li><p><code>merge</code></p><ul><li><img src="`+R+'" alt="image-20250708135654759"></li></ul></li><li><p><code>mergeWith</code></p><ul><li><img src="'+A+`" alt="image-20250708140218783"></li></ul></li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/8 13:49</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//类似于提交代码的merge</span></span>
<span class="line">        <span class="token comment">// 将多个数据源的流按照每个元素的时间戳重新排列得到新的数据流</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> merge <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delayElements</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delayElements</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delayElements</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        merge<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        [ INFO] (main) onSubscribe(FluxFlatMap.FlatMapMain)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (parallel-1) onNext(a)</span>
<span class="line">        [ INFO] (parallel-3) onNext(d)</span>
<span class="line">        [ INFO] (parallel-4) onNext(b)</span>
<span class="line">        [ INFO] (parallel-2) onNext(e)</span>
<span class="line">        [ INFO] (parallel-5) onNext(x)</span>
<span class="line">        [ INFO] (parallel-6) onNext(c)</span>
<span class="line">        [ INFO] (parallel-7) onNext(f)</span>
<span class="line">        [ INFO] (parallel-8) onNext(y)</span>
<span class="line">        [ INFO] (parallel-10) onNext(z)</span>
<span class="line">        [ INFO] (parallel-9) onNext(g)</span>
<span class="line">        [ INFO] (parallel-9) onComplete()</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeWithTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// mergeWith 同类型的2个数据流新老拼接</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> merge <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delayElements</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringFlux <span class="token operator">=</span> merge<span class="token punctuation">.</span><span class="token function">mergeWith</span><span class="token punctuation">(</span><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delayElements</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        stringFlux<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;time1: &quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, v= &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        time1: 1751954443824, v= e</span>
<span class="line">        time1: 1751954443827, v= a</span>
<span class="line">        time1: 1751954443839, v= f</span>
<span class="line">        time1: 1751954443839, v= b</span>
<span class="line">        time1: 1751954443855, v= c</span>
<span class="line">        time1: 1751954443855, v= g</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-7-zip" tabindex="-1"><a class="header-anchor" href="#_11-7-zip"><span>11.7 <code>zip</code></span></a></h3><blockquote><p>压缩</p><ul><li><code>zipWith</code></li><li><code>zip</code></li></ul></blockquote><p><img src="`+z+`" alt="image-20250708142524286"></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/8 14:06</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZipTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">zipTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// reactor.util.function.Tuple2&lt;T1, T2&gt;  1个2元素的元组</span></span>
<span class="line">        <span class="token comment">// 若2个</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringFlux <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringFlux2 <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>stringFlux<span class="token punctuation">,</span> stringFlux2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token doc-comment comment">/**</span>
<span class="line">         * [a,x]</span>
<span class="line">         * [b,y]</span>
<span class="line">         * [c,z]</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【12】reactor-错误如何处理" tabindex="-1"><a class="header-anchor" href="#【12】reactor-错误如何处理"><span>【12】Reactor 错误如何处理</span></a></h2><h3 id="_12-1-catch-and-return-a-static-default-value" tabindex="-1"><a class="header-anchor" href="#_12-1-catch-and-return-a-static-default-value"><span>12.1 Catch and return a static default value.</span></a></h3><blockquote><p>捕获并返回静态默认值。</p></blockquote><blockquote><p>以前同步方法捕获异常如下：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">doSomethingDangerous</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot;RECOVERED&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在异步中<code>onErrorReturn</code> API 等同于上述代码的效果。</p><ul><li>吃掉异常，消费者无感知异常</li><li>返回一个默认值</li><li>流正常完成</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 12.1 Catch and return a static default value.</span></span>
<span class="line">        <span class="token comment">// 捕获并返回静态默认值。</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        try {</span>
<span class="line">          return doSomethingDangerous(10);</span>
<span class="line">        }</span>
<span class="line">        catch (Throwable error) {</span>
<span class="line">          return &quot;RECOVERED&quot;;</span>
<span class="line">        }</span>
<span class="line">         */</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">doSomethingDangerous</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">onErrorReturn</span><span class="token punctuation">(</span><span class="token string">&quot;RECOVERED&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        [ INFO] (main) onSubscribe(FluxOnErrorReturn.ReturnSubscriber)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (main) onNext(RECOVERED)</span>
<span class="line">        [ INFO] (main) onComplete()</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">doSomethingDangerous</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> integer <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-2-catch-and-execute-an-alternative-path-with-a-fallback-method" tabindex="-1"><a class="header-anchor" href="#_12-2-catch-and-execute-an-alternative-path-with-a-fallback-method"><span>12.2 Catch and execute an alternative path with a fallback method.</span></a></h3><blockquote><p>吃掉异常，使用兜底方法</p><p>以前同步方法捕获异常如下：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">doSomethingDangerous</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">doOtherthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在异步中<code>onErrorResume</code> API 等同于上述代码的效果。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">doSomethingDangerous</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getLocalizedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        [ INFO] (main) onSubscribe(FluxOnErrorResume.ResumeSubscriber)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (main) onNext(/ by zero)</span>
<span class="line">        [ INFO] (main) onComplete()</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">doSomethingDangerous</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> integer <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-3-catch-and-dynamically-compute-a-fallback-value" tabindex="-1"><a class="header-anchor" href="#_12-3-catch-and-dynamically-compute-a-fallback-value"><span>12.3 Catch and dynamically compute a fallback value.</span></a></h3><blockquote><p>捕获并动态计算一个返回值。返回值根据错误得到新值</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Value</span> v <span class="token operator">=</span> <span class="token function">erroringMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token class-name">MyWrapper</span><span class="token punctuation">.</span><span class="token function">fromValue</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token class-name">MyWrapper</span><span class="token punctuation">.</span><span class="token function">fromError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">erroringFlux<span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span>error <span class="token operator">-&gt;</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span> </span>
<span class="line">        <span class="token class-name">MyWrapper</span><span class="token punctuation">.</span><span class="token function">fromError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> </span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_12-4-catch-wrap-to-a-businessexception-and-re-throw" tabindex="-1"><a class="header-anchor" href="#_12-4-catch-wrap-to-a-businessexception-and-re-throw"><span>12.4 Catch, wrap to a <code>BusinessException</code>, and re-throw.</span></a></h3><blockquote><p>“捕获、包装到BusinessException并重新抛出”在命令式世界中如下所示：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">callExternalService</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">&quot;oops, SLA exceeded&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在“回退方法”示例中，平面地图中的最后一行提示我们以响应方式实现相同的功能，</p><p>可以继续使用<code>OnErrorResume</code> 结合<code>Flux.error(new BusinessException())</code>来抛出自定义异常</p><p>如下所示：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;timeout1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>k <span class="token operator">-&gt;</span> <span class="token function">callExternalService</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span>original <span class="token operator">-&gt;</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">&quot;oops, SLA exceeded&quot;</span><span class="token punctuation">,</span> original<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>但是，有一种更直接的方法可以使用onErrorMap实现相同的效果：(使用<code>OnErrorMap</code>进行映射到自定义异常 ---&gt; 推荐这种方式)</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;timeout1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>k <span class="token operator">-&gt;</span> <span class="token function">callExternalService</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">onErrorMap</span><span class="token punctuation">(</span>original <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">&quot;oops, SLA exceeded&quot;</span><span class="token punctuation">,</span> original<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"> 	<span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">doSomethingDangerous</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span>error <span class="token operator">-&gt;</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">&quot;自定义业务异常: &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;v: &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                        error <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;ERROR&gt;: &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;COMPLETE&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">doSomethingDangerous</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">onErrorMap</span><span class="token punctuation">(</span>error <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">&quot;自定义业务异常: &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;v: &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                    error <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;ERROR&gt;: &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;COMPLETE&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// &lt;ERROR&gt;: 自定义业务异常: / by zero</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">doSomethingDangerous</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> integer <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">BusinessException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-5-catch-log-an-error-specific-message-and-re-throw" tabindex="-1"><a class="header-anchor" href="#_12-5-catch-log-an-error-specific-message-and-re-throw"><span>12.5 Catch, log an error-specific message, and re-throw.</span></a></h3><blockquote><p>对于希望错误继续传播但仍然希望在不修改序列的情况下对其做出反应的情况（对实例进行日志记录），可以使用doOnError运算符。这相当于“Catch、log an error-特定消息并重新抛出”模式，如下例所示：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">callExternalService</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//make a record of the error</span></span>
<span class="line">  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;uh oh, falling back, service failed for key &quot;</span> <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">throw</span> error<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>doOnError</code>运算符以及所有以<code>doOn</code>为前缀的运算符有时被称为具有“副作用”。它们让您无需修改即可查看序列的事件内部。</p><p>与前面显示的命令式示例一样，以下示例仍然传播错误，但确保我们至少记录外部服务发生故障：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">LongAdder</span> failureStat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongAdder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> flux <span class="token operator">=</span></span>
<span class="line"><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;unknown&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>k <span class="token operator">-&gt;</span> <span class="token function">callExternalService</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> </span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">doOnError</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            failureStat<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;uh oh, falling back, service failed for key &quot;</span> <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-6-use-the-finally-block-to-clean-up-resources-or-a-java-7-try-with-resource-construct" tabindex="-1"><a class="header-anchor" href="#_12-6-use-the-finally-block-to-clean-up-resources-or-a-java-7-try-with-resource-construct"><span>12.6 Use the <code>finally</code> block to clean up resources or a Java 7 “try-with-resource” construct.</span></a></h3><blockquote><p>与命令式编程的最后一个并行是清理，可以通过使用“使用最终屏蔽来清理资源”或使用“Java7 try-with资源构造”来完成，两者都如下所示：</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Stats</span> stats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stats<span class="token punctuation">.</span><span class="token function">startTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">doSomethingDangerous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">  stats<span class="token punctuation">.</span><span class="token function">stopTimerAndRecordTiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">SomeAutoCloseable</span> disposableInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeAutoCloseable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> disposableInstance<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用<code>doFinal</code> 最终一定会执行的API</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Stats</span> stats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">LongAdder</span> statsCancel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongAdder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> flux <span class="token operator">=</span></span>
<span class="line"><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">doOnSubscribe</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> stats<span class="token punctuation">.</span><span class="token function">startTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">doFinally</span><span class="token punctuation">(</span>type <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> </span>
<span class="line">        stats<span class="token punctuation">.</span><span class="token function">stopTimerAndRecordTiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token class-name">SignalType</span><span class="token punctuation">.</span><span class="token constant">CANCEL</span><span class="token punctuation">)</span> </span>
<span class="line">          statsCancel<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-7-ignore-error-continue" tabindex="-1"><a class="header-anchor" href="#_12-7-ignore-error-continue"><span>12.7 Ignore Error Continue</span></a></h3><blockquote><p>忽略当前异常，继续执行, 使用<code>OnErrorContinue</code></p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">doSomethingDangerous1</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">onErrorContinue</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> complete<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;error: &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;complete: &quot;</span> <span class="token operator">+</span> complete<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发现&quot;</span> <span class="token operator">+</span> complete <span class="token operator">+</span> <span class="token string">&quot;有问题,但是继续执行其他的,我会记录这个问题&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        [ INFO] (main) | onSubscribe([Fuseable] FluxContextWrite.ContextWriteSubscriber)</span>
<span class="line">        [ INFO] (main) | request(unbounded)</span>
<span class="line">        [ INFO] (main) | onNext(10)</span>
<span class="line">        [ INFO] (main) | onNext(5)</span>
<span class="line">        [ INFO] (main) | onNext(3)</span>
<span class="line">        [ INFO] (main) | onNext(2)</span>
<span class="line">        [ INFO] (main) | onNext(2)</span>
<span class="line">        error: java.lang.ArithmeticException: / by zero</span>
<span class="line">        complete: 0</span>
<span class="line">        发现0有问题,但是继续执行其他的,我会记录这个问题</span>
<span class="line">        [ INFO] (main) | onNext(1)</span>
<span class="line">        [ INFO] (main) | onNext(1)</span>
<span class="line">        [ INFO] (main) | onNext(1)</span>
<span class="line">        [ INFO] (main) | onNext(1)</span>
<span class="line">        [ INFO] (main) | onComplete()</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">doSomethingDangerous1</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> integer<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【13】reactor-超时和重试" tabindex="-1"><a class="header-anchor" href="#【13】reactor-超时和重试"><span>【13】Reactor 超时和重试</span></a></h2><blockquote><p>这块就比较简单，就是我们常说的<strong>重试机制</strong></p><ul><li>超时 <ul><li><img src="`+L+'" alt="image-20250709102621664"></li></ul></li><li>重试 <ul><li><img src="'+P+`" alt="image-20250709102659706"></li></ul></li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/9 10:06</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">retryTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 超时和重试学习</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">delayElements</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 超时时间比元素间隔时间长  则不会超时</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        [ INFO] (main) onSubscribe(SerializedSubscriber)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (parallel-2) onNext(1)</span>
<span class="line">        [ INFO] (parallel-2) onComplete()</span>
<span class="line">         */</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">delayElements</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 超时时间比元素间隔时间短 则会超时报错</span></span>
<span class="line">                <span class="token comment">//.log()</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        [ INFO] (main) onSubscribe(SerializedSubscriber)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (main) onSubscribe(MonoDelayUntil.DelayUntilCoordinator)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (parallel-3) cancel()</span>
<span class="line">        [ERROR] (parallel-3) Operator called default onErrorDropped - reactor.core.Exceptions$ErrorCallbackNotImplemented: java.util.concurrent.TimeoutException: Did not observe any item or terminal signal within 1000ms in &#39;log&#39; (and no fallback has been configured)</span>
<span class="line">        reactor.core.Exceptions$ErrorCallbackNotImplemented: java.util.concurrent.TimeoutException:</span>
<span class="line">         */</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">delayElements</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 超时时间比元素间隔时间短 则会超时报错</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">//重试3次 流从头开始重试3次</span></span>
<span class="line">                <span class="token comment">//.log()</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        [ INFO] (main) onSubscribe(MonoDelayUntil.DelayUntilCoordinator)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (parallel-1) cancel()</span>
<span class="line">        [ INFO] (parallel-1) onSubscribe(MonoDelayUntil.DelayUntilCoordinator)</span>
<span class="line">        [ INFO] (parallel-1) request(unbounded)</span>
<span class="line">        [ INFO] (parallel-3) cancel()</span>
<span class="line">        [ INFO] (parallel-3) onSubscribe(MonoDelayUntil.DelayUntilCoordinator)</span>
<span class="line">        [ INFO] (parallel-3) request(unbounded)</span>
<span class="line">        [ INFO] (parallel-5) cancel()</span>
<span class="line">        [ INFO] (parallel-5) onSubscribe(MonoDelayUntil.DelayUntilCoordinator)</span>
<span class="line">        [ INFO] (parallel-5) request(unbounded)</span>
<span class="line">        [ INFO] (parallel-7) cancel()</span>
<span class="line">        [ERROR]</span>
<span class="line">         */</span></span>
<span class="line">        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【14】sinks工具类的用法" tabindex="-1"><a class="header-anchor" href="#【14】sinks工具类的用法"><span>【14】Sinks工具类的用法</span></a></h2><blockquote><ul><li><p><code>Sinks</code>: 可以理解为接收器，数据的管道，所有的数据沿着这个管道往下走</p></li><li><p><code>Sinks.many()</code>: 类似<code>Flux</code>, 数据管理允许多个元素通过，即发送<code>Flux</code> 数据</p></li><li><p><code>Sinks.one()</code>：类似 <code>Mono</code>， 数据管理允许0~1个元素通过，即发送<code>Mono</code>数据</p></li></ul></blockquote><h3 id="_14-1-单播" tabindex="-1"><a class="header-anchor" href="#_14-1-单播"><span>14.1 单播</span></a></h3><blockquote><ul><li><code>Sinks</code>的单播：<code>Sinks.many().unicast()</code> 即 该管道只能绑定单个订阅者(消费者),一旦绑定了多个将会报错</li></ul></blockquote><h3 id="_14-2-多播" tabindex="-1"><a class="header-anchor" href="#_14-2-多播"><span>14.2 多播</span></a></h3><blockquote><ul><li><code>Sinks</code>的多播：<code>Sinks.many().multicast()</code> 即 该管道允许绑定1~N个订阅者(消费者)</li></ul></blockquote><h3 id="_14-3-重放" tabindex="-1"><a class="header-anchor" href="#_14-3-重放"><span>14.3 重放</span></a></h3><blockquote><ul><li><code>Sinks</code>的重放: <code>Sinks.many().replay()</code>即 该管道会从头开始播放管理到的每个元素</li></ul></blockquote><h3 id="_14-3-背压" tabindex="-1"><a class="header-anchor" href="#_14-3-背压"><span>14.3 背压</span></a></h3><blockquote><ul><li><code>Sinks</code>的背压: 就是订阅者来控制元素流动的个数和频率</li></ul></blockquote><h3 id="_14-4-缓存" tabindex="-1"><a class="header-anchor" href="#_14-4-缓存"><span>14.4 缓存</span></a></h3><blockquote><ul><li><code>Sinks</code>的缓存：默认数据管道绑定多个订阅者时，若不设置缓存<code>cache(x)</code>，则都是缓存所有, 订阅者都是从头开始流动,若设置了<code>cache(3)</code>则后续的订阅者会从缓存位置进行消费。</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Sinks</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ArrayBlockingQueue</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/9 11:09</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SinksTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unicast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//单播</span></span>
<span class="line">        <span class="token class-name">Sinks<span class="token punctuation">.</span>Many</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> unicast <span class="token operator">=</span> <span class="token class-name">Sinks</span><span class="token punctuation">.</span><span class="token function">many</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">unicast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 单播</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">onBackpressureBuffer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 背压 10个元素</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 发布数据</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 尝试发送数据</span></span>
<span class="line">            unicast<span class="token punctuation">.</span><span class="token function">tryEmitNext</span><span class="token punctuation">(</span><span class="token string">&quot;a-&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 消费者1订阅</span></span>
<span class="line">        unicast<span class="token punctuation">.</span><span class="token function">asFlux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;v1=&quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        v1=a-0</span>
<span class="line">        v1=a-1</span>
<span class="line">        v1=a-2</span>
<span class="line">        v1=a-3</span>
<span class="line">        v1=a-4</span>
<span class="line">        v1=a-5</span>
<span class="line">        v1=a-6</span>
<span class="line">        v1=a-7</span>
<span class="line">        v1=a-8</span>
<span class="line">        v1=a-9</span>
<span class="line">         */</span></span>
<span class="line">        <span class="token comment">// 当绑定2个消费者时</span></span>
<span class="line">        unicast<span class="token punctuation">.</span><span class="token function">asFlux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;v2=&quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*  报错</span>
<span class="line">        [ERROR] (main) Operator called default onErrorDropped - reactor.core.Exceptions$ErrorCallbackNotImplemented: java.lang.IllegalStateException: Sinks.many().unicast() sinks only allow a single Subscriber</span>
<span class="line">reactor.core.Exceptions$ErrorCallbackNotImplemented: java.lang.IllegalStateException: Sinks.many().unicast() sinks only allow a single Subscriber</span>
<span class="line">Caused by: java.lang.IllegalStateException: Sinks.many().unicast() sinks only allow a single Subscriber</span>
<span class="line">	at reactor.core.publisher.SinkManyUnicast.subscribe(SinkManyUnicast.java:426)</span>
<span class="line">	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)</span>
<span class="line">	at reactor.core.publisher.Flux.subscribeWith(Flux.java:9012)</span>
<span class="line">	at reactor.core.publisher.Flux.subscribe(Flux.java:8856)</span>
<span class="line">	at reactor.core.publisher.Flux.subscribe(Flux.java:8780)</span>
<span class="line">	at reactor.core.publisher.Flux.subscribe(Flux.java:8723)</span>
<span class="line">	at com.learn.reactive.stream.flow.SinksTest.main(SinksTest.java:40)</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multicast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 多播</span></span>
<span class="line">        <span class="token class-name">Sinks<span class="token punctuation">.</span>Many</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> multiCast <span class="token operator">=</span> <span class="token class-name">Sinks</span><span class="token punctuation">.</span><span class="token function">many</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">multicast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 多播</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">onBackpressureBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 因为直接这个播放 第二个订阅者就看不到元素了 所以异步1秒1个</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                multiCast<span class="token punctuation">.</span><span class="token function">tryEmitNext</span><span class="token punctuation">(</span><span class="token string">&quot;multi-&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        multiCast<span class="token punctuation">.</span><span class="token function">asFlux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;v1=&quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// 第5秒开始 订阅</span></span>
<span class="line">            multiCast<span class="token punctuation">.</span><span class="token function">asFlux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;v2=&quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        v1=multi-0</span>
<span class="line">        v1=multi-1</span>
<span class="line">        v1=multi-2</span>
<span class="line">        v1=multi-3</span>
<span class="line">        v1=multi-4</span>
<span class="line">        v2=multi-4</span>
<span class="line">        v1=multi-5</span>
<span class="line">        v2=multi-5</span>
<span class="line">        v1=multi-6</span>
<span class="line">        v2=multi-6</span>
<span class="line">        v1=multi-7</span>
<span class="line">        v2=multi-7</span>
<span class="line">        v1=multi-8</span>
<span class="line">        v2=multi-8</span>
<span class="line">        v1=multi-9</span>
<span class="line">        v2=multi-9</span>
<span class="line">         */</span></span>
<span class="line">        <span class="token comment">// 这里我们会发现第5秒开始订阅 拿到的数据已经时从5开始了</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">replay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 重放</span></span>
<span class="line">        <span class="token class-name">Sinks<span class="token punctuation">.</span>Many</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> multiCast <span class="token operator">=</span> <span class="token class-name">Sinks</span><span class="token punctuation">.</span><span class="token function">many</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">replay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 因为直接这个播放 第二个订阅者就看不到元素了 所以异步1秒1个</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                multiCast<span class="token punctuation">.</span><span class="token function">tryEmitNext</span><span class="token punctuation">(</span><span class="token string">&quot;multi-&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        multiCast<span class="token punctuation">.</span><span class="token function">asFlux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;v1=&quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// 第5秒开始 订阅  重放20个</span></span>
<span class="line">            multiCast<span class="token punctuation">.</span><span class="token function">asFlux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;v2=&quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        v1=multi-0</span>
<span class="line">        v1=multi-1</span>
<span class="line">        v1=multi-2</span>
<span class="line">        v1=multi-3</span>
<span class="line">        v2=multi-0</span>
<span class="line">        v2=multi-1</span>
<span class="line">        v2=multi-2</span>
<span class="line">        v2=multi-3</span>
<span class="line">        v1=multi-4</span>
<span class="line">        v2=multi-4</span>
<span class="line">        v1=multi-5</span>
<span class="line">        v2=multi-5</span>
<span class="line">        v1=multi-6</span>
<span class="line">        v2=multi-6</span>
<span class="line">        v1=multi-7</span>
<span class="line">        v2=multi-7</span>
<span class="line">        v1=multi-8</span>
<span class="line">        v2=multi-8</span>
<span class="line">        v1=multi-9</span>
<span class="line">        v2=multi-9</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Sinks<span class="token punctuation">.</span>Many</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> multiCast <span class="token operator">=</span> <span class="token class-name">Sinks</span><span class="token punctuation">.</span><span class="token function">many</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">multicast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onBackpressureBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 因为直接这个播放 第二个订阅者就看不到元素了 所以异步1秒1个</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                multiCast<span class="token punctuation">.</span><span class="token function">tryEmitNext</span><span class="token punctuation">(</span><span class="token string">&quot;multi-&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> multiCast<span class="token punctuation">.</span><span class="token function">asFlux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cache</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 第一个订阅者不打印</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// 第5秒开始 订阅</span></span>
<span class="line">            cache<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;v2=&quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        // 第5秒开始订阅 本来应该是 v2=multi-4 开始的，但是缓存了3个 所以从v2=multi-1开始了</span>
<span class="line">        v2=multi-1</span>
<span class="line">        v2=multi-2</span>
<span class="line">        v2=multi-3</span>
<span class="line">        v2=multi-4</span>
<span class="line">        v2=multi-5</span>
<span class="line">        v2=multi-6</span>
<span class="line">        v2=multi-7</span>
<span class="line">        v2=multi-8</span>
<span class="line">        v2=multi-9</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【15】阻塞式api" tabindex="-1"><a class="header-anchor" href="#【15】阻塞式api"><span>【15】阻塞式API</span></a></h2><blockquote><ul><li><code>block()</code></li><li><code>blockFirst</code></li><li><code>blockLast</code></li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 阻塞式API 其实就是同步接口 把流的数据聚集在一起 然后1次性获取</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> block <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">collectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">blockFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">blockLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>
<span class="line">    1</span>
<span class="line">    10</span>
<span class="line">     */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【16】-context-上下文api" tabindex="-1"><a class="header-anchor" href="#【16】-context-上下文api"><span>【16】 Context 上下文API</span></a></h2><blockquote><ul><li>响应式编程中的<code>Context</code> <code>API</code> 就是对应同步命令式编程中的<code>ThreadLocal</code>。</li><li>因为响应式编程的链路横跨很多个不同的线程，故<code>ThreadLocal</code>在响应式编程中失效，故<code>Context</code>应运而生。</li></ul></blockquote><blockquote><ul><li><code>Context</code>是自下游传递到上游的</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>util<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">Context</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/9 13:55</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextApiTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextApiTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">transformDeferredContextual</span><span class="token punctuation">(</span><span class="token punctuation">(</span>flux<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;flux: &quot;</span> <span class="token operator">+</span> flux<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;context: &quot;</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;prefix&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token class-name">Object</span> prefix <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;prefix&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">return</span> flux<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">contextWrite</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;prefix&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;context&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;v=&quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">flux: FluxRange</span>
<span class="line">context: context</span>
<span class="line">[ INFO] (main) | onSubscribe([Fuseable] FluxContextWrite.ContextWriteSubscriber)</span>
<span class="line">[ INFO] (main) | request(unbounded)</span>
<span class="line">[ INFO] (main) | onNext(1-context)</span>
<span class="line">v=1-context</span>
<span class="line">[ INFO] (main) | onNext(2-context)</span>
<span class="line">v=2-context</span>
<span class="line">[ INFO] (main) | onNext(3-context)</span>
<span class="line">v=3-context</span>
<span class="line">[ INFO] (main) | onNext(4-context)</span>
<span class="line">v=4-context</span>
<span class="line">[ INFO] (main) | onNext(5-context)</span>
<span class="line">v=5-context</span>
<span class="line">[ INFO] (main) | onNext(6-context)</span>
<span class="line">v=6-context</span>
<span class="line">[ INFO] (main) | onNext(7-context)</span>
<span class="line">v=7-context</span>
<span class="line">[ INFO] (main) | onNext(8-context)</span>
<span class="line">v=8-context</span>
<span class="line">[ INFO] (main) | onNext(9-context)</span>
<span class="line">v=9-context</span>
<span class="line">[ INFO] (main) | onNext(10-context)</span>
<span class="line">v=10-context</span>
<span class="line">[ INFO] (main) | onComplete()</span>
<span class="line">         */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【17】-parallelflux" tabindex="-1"><a class="header-anchor" href="#【17】-parallelflux"><span>【17】 parallelFlux</span></a></h2><blockquote><p>并发流</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flow</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Flux</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>scheduler<span class="token punctuation">.</span></span><span class="token class-name">Schedulers</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> qianpengzhan</span>
<span class="line"> * <span class="token keyword">@since</span> 2025/7/9 13:46</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParallelFluxTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parallelFluxTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1个场景 百万数据 分为8个不同的并发线程分批处理 怎么写</span></span>
<span class="line">        <span class="token comment">// 这里用 1000 和 125个1批 作为例子</span></span>
<span class="line">        <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">)</span> <span class="token comment">// 没批12500个</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">runOn</span><span class="token punctuation">(</span><span class="token class-name">Schedulers</span><span class="token punctuation">.</span><span class="token function">newParallel</span><span class="token punctuation">(</span><span class="token string">&quot;parallel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">        [ INFO] (main) onSubscribe([Fuseable] FluxPublishOn.PublishOnSubscriber)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (main) onSubscribe([Fuseable] FluxPublishOn.PublishOnSubscriber)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (main) onSubscribe([Fuseable] FluxPublishOn.PublishOnSubscriber)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (main) onSubscribe([Fuseable] FluxPublishOn.PublishOnSubscriber)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (main) onSubscribe([Fuseable] FluxPublishOn.PublishOnSubscriber)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (main) onSubscribe([Fuseable] FluxPublishOn.PublishOnSubscriber)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (main) onSubscribe([Fuseable] FluxPublishOn.PublishOnSubscriber)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (main) onSubscribe([Fuseable] FluxPublishOn.PublishOnSubscriber)</span>
<span class="line">        [ INFO] (main) request(unbounded)</span>
<span class="line">        [ INFO] (parallel-1) onNext([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125])</span>
<span class="line">        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125]</span>
<span class="line">        [ INFO] (parallel-2) onNext([126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250])</span>
<span class="line">        [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250]</span>
<span class="line">        [ INFO] (parallel-5) onNext([501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625])</span>
<span class="line">        [501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625]</span>
<span class="line">        [ INFO] (parallel-6) onNext([626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750])</span>
<span class="line">        [626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750]</span>
<span class="line">        [ INFO] (parallel-4) onNext([376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500])</span>
<span class="line">        [376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500]</span>
<span class="line">        [ INFO] (parallel-6) onComplete()</span>
<span class="line">        [ INFO] (parallel-5) onComplete()</span>
<span class="line">        [ INFO] (parallel-2) onComplete()</span>
<span class="line">        [ INFO] (parallel-3) onNext([251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375])</span>
<span class="line">        [251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375]</span>
<span class="line">        [ INFO] (parallel-8) onNext([876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000])</span>
<span class="line">        [876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000]</span>
<span class="line">        [ INFO] (parallel-7) onNext([751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875])</span>
<span class="line">        [751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875]</span>
<span class="line">        [ INFO] (parallel-1) onComplete()</span>
<span class="line">        [ INFO] (parallel-7) onComplete()</span>
<span class="line">        [ INFO] (parallel-8) onComplete()</span>
<span class="line">        [ INFO] (parallel-3) onComplete()</span>
<span class="line">        [ INFO] (parallel-4) onComplete()</span>
<span class="line"></span>
<span class="line">         */</span></span>
<span class="line">        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【18】参考资料" tabindex="-1"><a class="header-anchor" href="#【18】参考资料"><span>【18】参考资料</span></a></h2><ul><li><a href="https://www.bilibili.com/video/BV1gsYEeLEuM?spm_id_from=333.788.videopod.episodes&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">SpringBoot3响应式编程精讲</a></li><li><a href="https://projectreactor.io/docs/core/release/reference/coreFeatures/simple-ways-to-create-a-flux-or-mono-and-subscribe-to-it.html" target="_blank" rel="noopener noreferrer">Project Reactor官网</a></li></ul>`,179))])}const X=r(D,[["render",U]]),H=JSON.parse('{"path":"/md/note/reactive/reactive_004.html","title":"第四章: Reactor 框架","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1752043345000,"contributors":[{"name":"钱鹏展","username":"","email":"873373549@qq.com","commits":11}],"changelog":[{"hash":"7de0a5c2ce59cd99ab7752467e41ebc3933d592f","time":1752043345000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"},{"hash":"9e2c8d5af29c1795b803b1099638fd647f79f931","time":1752042688000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"},{"hash":"4ea33341761afcd5c93660f415365711d628c071","time":1752042418000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"},{"hash":"d2068bb36a45d601586c1808fd916e74f73b3cc7","time":1752025084000,"email":"873373549@qq.com","author":"钱鹏展","message":"提交"},{"hash":"1d79da2b697108d353b473f14b25f96e18c588b8","time":1751875193000,"email":"873373549@qq.com","author":"钱鹏展","message":"docs"},{"hash":"8acde3fccf9538c2cc9abca5972278346dc4f7e8","time":1751874755000,"email":"873373549@qq.com","author":"钱鹏展","message":"docs"},{"hash":"2b12cf73e242234d3106271b36ad865c6183fc18","time":1751874063000,"email":"873373549@qq.com","author":"钱鹏展","message":"dcos"},{"hash":"934fb18705f5c1b5dbf80c387a0427bba7716abc","time":1751461089000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"},{"hash":"b5f0f655cb06befa27aba61322656e9cf5724ab3","time":1751449873000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"},{"hash":"bc86eba4ffe5df3dec1c759424a47a0cfb60d4c0","time":1751424279000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"},{"hash":"09b64de9d67a64a0b5e9a3b72758148e4768d973","time":1751423715000,"email":"873373549@qq.com","author":"钱鹏展","message":"submit"}]},"filePathRelative":"md/note/reactive/reactive_004.md"}');export{X as comp,H as data};
